
RTOS-ADCPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08005cbc  08005cbc  00015cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da4  08005da4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005da4  08005da4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005da4  08005da4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  20000074  08005e20  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ab4  08005e20  00021ab4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015817  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000321a  00000000  00000000  000358b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  00038ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  00039ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bdc  00000000  00000000  0003b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001537f  00000000  00000000  0003eda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099289  00000000  00000000  00054123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed3ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057f4  00000000  00000000  000ed3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ca4 	.word	0x08005ca4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005ca4 	.word	0x08005ca4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb60 	bl	8000828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f828 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8e4 	bl	8000338 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f8b8 	bl	80002e4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000174:	f000 f878 	bl	8000268 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f002 fc14 	bl	80029a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800017c:	4a09      	ldr	r2, [pc, #36]	; (80001a4 <main+0x44>)
 800017e:	2100      	movs	r1, #0
 8000180:	4809      	ldr	r0, [pc, #36]	; (80001a8 <main+0x48>)
 8000182:	f002 fc75 	bl	8002a70 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a08      	ldr	r2, [pc, #32]	; (80001ac <main+0x4c>)
 800018a:	6013      	str	r3, [r2, #0]

  /* creation of readADC */
  readADCHandle = osThreadNew(startReadADC, NULL, &readADC_attributes);
 800018c:	4a08      	ldr	r2, [pc, #32]	; (80001b0 <main+0x50>)
 800018e:	2100      	movs	r1, #0
 8000190:	4808      	ldr	r0, [pc, #32]	; (80001b4 <main+0x54>)
 8000192:	f002 fc6d 	bl	8002a70 <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <main+0x58>)
 800019a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800019c:	f002 fc34 	bl	8002a08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001a0:	e7fe      	b.n	80001a0 <main+0x40>
 80001a2:	bf00      	nop
 80001a4:	08005d10 	.word	0x08005d10
 80001a8:	08000415 	.word	0x08000415
 80001ac:	20000104 	.word	0x20000104
 80001b0:	08005d34 	.word	0x08005d34
 80001b4:	08000475 	.word	0x08000475
 80001b8:	20000108 	.word	0x20000108

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b094      	sub	sp, #80	; 0x50
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c6:	2228      	movs	r2, #40	; 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f005 f8f6 	bl	80053bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	f107 0314 	add.w	r3, r7, #20
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
 80001de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
 80001e6:	605a      	str	r2, [r3, #4]
 80001e8:	609a      	str	r2, [r3, #8]
 80001ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ec:	2302      	movs	r3, #2
 80001ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f0:	2301      	movs	r3, #1
 80001f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f4:	2310      	movs	r3, #16
 80001f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f8:	2302      	movs	r3, #2
 80001fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001fc:	2300      	movs	r3, #0
 80001fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000200:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	4618      	mov	r0, r3
 800020c:	f001 fa08 	bl	8001620 <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000216:	f000 f947 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f001 fc74 	bl	8001b24 <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000242:	f000 f931 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000246:	2302      	movs	r3, #2
 8000248:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f001 fe2f 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800025c:	f000 f924 	bl	80004a8 <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3750      	adds	r7, #80	; 0x50
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2200      	movs	r2, #0
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 faf1 	bl	800088c <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f8fa 	bl	80004a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fd79 	bl	8000dbc <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f8ea 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	20000090 	.word	0x20000090
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002ea:	4a12      	ldr	r2, [pc, #72]	; (8000334 <MX_USART2_UART_Init+0x50>)
 80002ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002ee:	4b10      	ldr	r3, [pc, #64]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f6:	4b0e      	ldr	r3, [pc, #56]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002fc:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000302:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 800030a:	220c      	movs	r2, #12
 800030c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030e:	4b08      	ldr	r3, [pc, #32]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 8000316:	2200      	movs	r2, #0
 8000318:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031a:	4805      	ldr	r0, [pc, #20]	; (8000330 <MX_USART2_UART_Init+0x4c>)
 800031c:	f002 f98a 	bl	8002634 <HAL_UART_Init>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000326:	f000 f8bf 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	200000c0 	.word	0x200000c0
 8000334:	40004400 	.word	0x40004400

08000338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b088      	sub	sp, #32
 800033c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033e:	f107 0310 	add.w	r3, r7, #16
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <MX_GPIO_Init+0xcc>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	4a2c      	ldr	r2, [pc, #176]	; (8000404 <MX_GPIO_Init+0xcc>)
 8000352:	f043 0310 	orr.w	r3, r3, #16
 8000356:	6193      	str	r3, [r2, #24]
 8000358:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <MX_GPIO_Init+0xcc>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	f003 0310 	and.w	r3, r3, #16
 8000360:	60fb      	str	r3, [r7, #12]
 8000362:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000364:	4b27      	ldr	r3, [pc, #156]	; (8000404 <MX_GPIO_Init+0xcc>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	4a26      	ldr	r2, [pc, #152]	; (8000404 <MX_GPIO_Init+0xcc>)
 800036a:	f043 0320 	orr.w	r3, r3, #32
 800036e:	6193      	str	r3, [r2, #24]
 8000370:	4b24      	ldr	r3, [pc, #144]	; (8000404 <MX_GPIO_Init+0xcc>)
 8000372:	699b      	ldr	r3, [r3, #24]
 8000374:	f003 0320 	and.w	r3, r3, #32
 8000378:	60bb      	str	r3, [r7, #8]
 800037a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_GPIO_Init+0xcc>)
 800037e:	699b      	ldr	r3, [r3, #24]
 8000380:	4a20      	ldr	r2, [pc, #128]	; (8000404 <MX_GPIO_Init+0xcc>)
 8000382:	f043 0304 	orr.w	r3, r3, #4
 8000386:	6193      	str	r3, [r2, #24]
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_GPIO_Init+0xcc>)
 800038a:	699b      	ldr	r3, [r3, #24]
 800038c:	f003 0304 	and.w	r3, r3, #4
 8000390:	607b      	str	r3, [r7, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_GPIO_Init+0xcc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a1a      	ldr	r2, [pc, #104]	; (8000404 <MX_GPIO_Init+0xcc>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b18      	ldr	r3, [pc, #96]	; (8000404 <MX_GPIO_Init+0xcc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0308 	and.w	r3, r3, #8
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	4815      	ldr	r0, [pc, #84]	; (8000408 <MX_GPIO_Init+0xd0>)
 80003b2:	f001 f8fb 	bl	80015ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003bc:	4b13      	ldr	r3, [pc, #76]	; (800040c <MX_GPIO_Init+0xd4>)
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	4811      	ldr	r0, [pc, #68]	; (8000410 <MX_GPIO_Init+0xd8>)
 80003cc:	f000 ff6a 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003d0:	2320      	movs	r3, #32
 80003d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d4:	2301      	movs	r3, #1
 80003d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003dc:	2302      	movs	r3, #2
 80003de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003e0:	f107 0310 	add.w	r3, r7, #16
 80003e4:	4619      	mov	r1, r3
 80003e6:	4808      	ldr	r0, [pc, #32]	; (8000408 <MX_GPIO_Init+0xd0>)
 80003e8:	f000 ff5c 	bl	80012a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2105      	movs	r1, #5
 80003f0:	2028      	movs	r0, #40	; 0x28
 80003f2:	f000 ff2c 	bl	800124e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f000 ff45 	bl	8001286 <HAL_NVIC_EnableIRQ>

}
 80003fc:	bf00      	nop
 80003fe:	3720      	adds	r7, #32
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800
 800040c:	10110000 	.word	0x10110000
 8000410:	40011000 	.word	0x40011000

08000414 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  uint16_t raw;
  char msg[10];
  /* Infinite loop */
  for(;;)
  {
	HAL_ADC_Start(&hadc1);
 800041c:	4812      	ldr	r0, [pc, #72]	; (8000468 <StartDefaultTask+0x54>)
 800041e:	f000 fb0d 	bl	8000a3c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000422:	f04f 31ff 	mov.w	r1, #4294967295
 8000426:	4810      	ldr	r0, [pc, #64]	; (8000468 <StartDefaultTask+0x54>)
 8000428:	f000 fbb6 	bl	8000b98 <HAL_ADC_PollForConversion>
	raw = HAL_ADC_GetValue(&hadc1);
 800042c:	480e      	ldr	r0, [pc, #56]	; (8000468 <StartDefaultTask+0x54>)
 800042e:	f000 fcb9 	bl	8000da4 <HAL_ADC_GetValue>
 8000432:	4603      	mov	r3, r0
 8000434:	82fb      	strh	r3, [r7, #22]

	// Convert to string and print
	sprintf(msg, "%hu\r\n", raw);
 8000436:	8afa      	ldrh	r2, [r7, #22]
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	490b      	ldr	r1, [pc, #44]	; (800046c <StartDefaultTask+0x58>)
 800043e:	4618      	mov	r0, r3
 8000440:	f004 ffc4 	bl	80053cc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000444:	f107 030c 	add.w	r3, r7, #12
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fe81 	bl	8000150 <strlen>
 800044e:	4603      	mov	r3, r0
 8000450:	b29a      	uxth	r2, r3
 8000452:	f107 010c 	add.w	r1, r7, #12
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <StartDefaultTask+0x5c>)
 800045c:	f002 f937 	bl	80026ce <HAL_UART_Transmit>
    osDelay(10);
 8000460:	200a      	movs	r0, #10
 8000462:	f002 fbaf 	bl	8002bc4 <osDelay>
	HAL_ADC_Start(&hadc1);
 8000466:	e7d9      	b.n	800041c <StartDefaultTask+0x8>
 8000468:	20000090 	.word	0x20000090
 800046c:	08005cd0 	.word	0x08005cd0
 8000470:	200000c0 	.word	0x200000c0

08000474 <startReadADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadADC */
void startReadADC(void *argument)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadADC */
  /* Infinite loop */
  for(;;)
  {

	  osDelay(10);
 800047c:	200a      	movs	r0, #10
 800047e:	f002 fba1 	bl	8002bc4 <osDelay>
 8000482:	e7fb      	b.n	800047c <startReadADC+0x8>

08000484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d101      	bne.n	800049a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000496:	f000 f9dd 	bl	8000854 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40000800 	.word	0x40000800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ba:	4b18      	ldr	r3, [pc, #96]	; (800051c <HAL_MspInit+0x68>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a17      	ldr	r2, [pc, #92]	; (800051c <HAL_MspInit+0x68>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <HAL_MspInit+0x68>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_MspInit+0x68>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a11      	ldr	r2, [pc, #68]	; (800051c <HAL_MspInit+0x68>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b0f      	ldr	r3, [pc, #60]	; (800051c <HAL_MspInit+0x68>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	210f      	movs	r1, #15
 80004ee:	f06f 0001 	mvn.w	r0, #1
 80004f2:	f000 feac 	bl	800124e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004f6:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <HAL_MspInit+0x6c>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	4a04      	ldr	r2, [pc, #16]	; (8000520 <HAL_MspInit+0x6c>)
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40021000 	.word	0x40021000
 8000520:	40010000 	.word	0x40010000

08000524 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a14      	ldr	r2, [pc, #80]	; (8000590 <HAL_ADC_MspInit+0x6c>)
 8000540:	4293      	cmp	r3, r2
 8000542:	d121      	bne.n	8000588 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <HAL_ADC_MspInit+0x70>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	4a12      	ldr	r2, [pc, #72]	; (8000594 <HAL_ADC_MspInit+0x70>)
 800054a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054e:	6193      	str	r3, [r2, #24]
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <HAL_ADC_MspInit+0x70>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <HAL_ADC_MspInit+0x70>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	4a0c      	ldr	r2, [pc, #48]	; (8000594 <HAL_ADC_MspInit+0x70>)
 8000562:	f043 0304 	orr.w	r3, r3, #4
 8000566:	6193      	str	r3, [r2, #24]
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_ADC_MspInit+0x70>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	f003 0304 	and.w	r3, r3, #4
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000578:	2303      	movs	r3, #3
 800057a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4619      	mov	r1, r3
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <HAL_ADC_MspInit+0x74>)
 8000584:	f000 fe8e 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40012400 	.word	0x40012400
 8000594:	40021000 	.word	0x40021000
 8000598:	40010800 	.word	0x40010800

0800059c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a15      	ldr	r2, [pc, #84]	; (800060c <HAL_UART_MspInit+0x70>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d123      	bne.n	8000604 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005be:	69db      	ldr	r3, [r3, #28]
 80005c0:	4a13      	ldr	r2, [pc, #76]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005c6:	61d3      	str	r3, [r2, #28]
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005ca:	69db      	ldr	r3, [r3, #28]
 80005cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_UART_MspInit+0x74>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ec:	230c      	movs	r3, #12
 80005ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f0:	2302      	movs	r3, #2
 80005f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f4:	2302      	movs	r3, #2
 80005f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	4805      	ldr	r0, [pc, #20]	; (8000614 <HAL_UART_MspInit+0x78>)
 8000600:	f000 fe50 	bl	80012a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000604:	bf00      	nop
 8000606:	3720      	adds	r7, #32
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40004400 	.word	0x40004400
 8000610:	40021000 	.word	0x40021000
 8000614:	40010800 	.word	0x40010800

08000618 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08e      	sub	sp, #56	; 0x38
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000620:	2300      	movs	r3, #0
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000624:	2300      	movs	r3, #0
 8000626:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000628:	2300      	movs	r3, #0
 800062a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800062e:	4b34      	ldr	r3, [pc, #208]	; (8000700 <HAL_InitTick+0xe8>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	4a33      	ldr	r2, [pc, #204]	; (8000700 <HAL_InitTick+0xe8>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	61d3      	str	r3, [r2, #28]
 800063a:	4b31      	ldr	r3, [pc, #196]	; (8000700 <HAL_InitTick+0xe8>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000646:	f107 0210 	add.w	r2, r7, #16
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4611      	mov	r1, r2
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fbe1 	bl	8001e18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800065a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800065c:	2b00      	cmp	r3, #0
 800065e:	d103      	bne.n	8000668 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000660:	f001 fbb2 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 8000664:	6378      	str	r0, [r7, #52]	; 0x34
 8000666:	e004      	b.n	8000672 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000668:	f001 fbae 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 800066c:	4603      	mov	r3, r0
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000674:	4a23      	ldr	r2, [pc, #140]	; (8000704 <HAL_InitTick+0xec>)
 8000676:	fba2 2303 	umull	r2, r3, r2, r3
 800067a:	0c9b      	lsrs	r3, r3, #18
 800067c:	3b01      	subs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <HAL_InitTick+0xf0>)
 8000682:	4a22      	ldr	r2, [pc, #136]	; (800070c <HAL_InitTick+0xf4>)
 8000684:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_InitTick+0xf0>)
 8000688:	f240 32e7 	movw	r2, #999	; 0x3e7
 800068c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800068e:	4a1e      	ldr	r2, [pc, #120]	; (8000708 <HAL_InitTick+0xf0>)
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_InitTick+0xf0>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_InitTick+0xf0>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_InitTick+0xf0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80006a6:	4818      	ldr	r0, [pc, #96]	; (8000708 <HAL_InitTick+0xf0>)
 80006a8:	f001 fd7a 	bl	80021a0 <HAL_TIM_Base_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80006b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d11b      	bne.n	80006f2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80006ba:	4813      	ldr	r0, [pc, #76]	; (8000708 <HAL_InitTick+0xf0>)
 80006bc:	f001 fdc8 	bl	8002250 <HAL_TIM_Base_Start_IT>
 80006c0:	4603      	mov	r3, r0
 80006c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80006c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d111      	bne.n	80006f2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006ce:	201e      	movs	r0, #30
 80006d0:	f000 fdd9 	bl	8001286 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d808      	bhi.n	80006ec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80006da:	2200      	movs	r2, #0
 80006dc:	6879      	ldr	r1, [r7, #4]
 80006de:	201e      	movs	r0, #30
 80006e0:	f000 fdb5 	bl	800124e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <HAL_InitTick+0xf8>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
 80006ea:	e002      	b.n	80006f2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80006ec:	2301      	movs	r3, #1
 80006ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3738      	adds	r7, #56	; 0x38
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40021000 	.word	0x40021000
 8000704:	431bde83 	.word	0x431bde83
 8000708:	2000010c 	.word	0x2000010c
 800070c:	40000800 	.word	0x40000800
 8000710:	20000004 	.word	0x20000004

08000714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <NMI_Handler+0x4>

0800071a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <HardFault_Handler+0x4>

08000720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <MemManage_Handler+0x4>

08000726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072a:	e7fe      	b.n	800072a <BusFault_Handler+0x4>

0800072c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000730:	e7fe      	b.n	8000730 <UsageFault_Handler+0x4>

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
	...

08000740 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <TIM4_IRQHandler+0x10>)
 8000746:	f001 fdd5 	bl	80022f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000010c 	.word	0x2000010c

08000754 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000758:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800075c:	f000 ff3e 	bl	80015dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}

08000764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a14      	ldr	r2, [pc, #80]	; (80007c0 <_sbrk+0x5c>)
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <_sbrk+0x60>)
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000778:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d102      	bne.n	8000786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <_sbrk+0x64>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <_sbrk+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <_sbrk+0x64>)
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	429a      	cmp	r2, r3
 8000792:	d207      	bcs.n	80007a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000794:	f004 fdda 	bl	800534c <__errno>
 8000798:	4603      	mov	r3, r0
 800079a:	220c      	movs	r2, #12
 800079c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079e:	f04f 33ff 	mov.w	r3, #4294967295
 80007a2:	e009      	b.n	80007b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <_sbrk+0x64>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007aa:	4b07      	ldr	r3, [pc, #28]	; (80007c8 <_sbrk+0x64>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4413      	add	r3, r2
 80007b2:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <_sbrk+0x64>)
 80007b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b6:	68fb      	ldr	r3, [r7, #12]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20005000 	.word	0x20005000
 80007c4:	00000400 	.word	0x00000400
 80007c8:	20000154 	.word	0x20000154
 80007cc:	20001ab8 	.word	0x20001ab8

080007d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007dc:	480c      	ldr	r0, [pc, #48]	; (8000810 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007de:	490d      	ldr	r1, [pc, #52]	; (8000814 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007e4:	e002      	b.n	80007ec <LoopCopyDataInit>

080007e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ea:	3304      	adds	r3, #4

080007ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f0:	d3f9      	bcc.n	80007e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	; (800081c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007f4:	4c0a      	ldr	r4, [pc, #40]	; (8000820 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f8:	e001      	b.n	80007fe <LoopFillZerobss>

080007fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fc:	3204      	adds	r2, #4

080007fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000800:	d3fb      	bcc.n	80007fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000802:	f7ff ffe5 	bl	80007d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000806:	f004 fda7 	bl	8005358 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800080a:	f7ff fca9 	bl	8000160 <main>
  bx lr
 800080e:	4770      	bx	lr
  ldr r0, =_sdata
 8000810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000814:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000818:	08005dac 	.word	0x08005dac
  ldr r2, =_sbss
 800081c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000820:	20001ab4 	.word	0x20001ab4

08000824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_2_IRQHandler>
	...

08000828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800082c:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_Init+0x28>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a07      	ldr	r2, [pc, #28]	; (8000850 <HAL_Init+0x28>)
 8000832:	f043 0310 	orr.w	r3, r3, #16
 8000836:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000838:	2003      	movs	r0, #3
 800083a:	f000 fcfd 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800083e:	200f      	movs	r0, #15
 8000840:	f7ff feea 	bl	8000618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000844:	f7ff fe36 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000848:	2300      	movs	r3, #0
}
 800084a:	4618      	mov	r0, r3
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40022000 	.word	0x40022000

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4413      	add	r3, r2
 8000864:	4a03      	ldr	r2, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	6013      	str	r3, [r2, #0]
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	bc80      	pop	{r7}
 800086e:	4770      	bx	lr
 8000870:	20000008 	.word	0x20000008
 8000874:	20000158 	.word	0x20000158

08000878 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	4618      	mov	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr
 8000888:	20000158 	.word	0x20000158

0800088c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000894:	2300      	movs	r3, #0
 8000896:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e0be      	b.n	8000a2c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d109      	bne.n	80008d0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008ca:	6878      	ldr	r0, [r7, #4]
 80008cc:	f7ff fe2a 	bl	8000524 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f000 fbc5 	bl	8001060 <ADC_ConversionStop_Disable>
 80008d6:	4603      	mov	r3, r0
 80008d8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008de:	f003 0310 	and.w	r3, r3, #16
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 8099 	bne.w	8000a1a <HAL_ADC_Init+0x18e>
 80008e8:	7dfb      	ldrb	r3, [r7, #23]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	f040 8095 	bne.w	8000a1a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80008f8:	f023 0302 	bic.w	r3, r3, #2
 80008fc:	f043 0202 	orr.w	r2, r3, #2
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800090c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	7b1b      	ldrb	r3, [r3, #12]
 8000912:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000914:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	4313      	orrs	r3, r2
 800091a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000924:	d003      	beq.n	800092e <HAL_ADC_Init+0xa2>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d102      	bne.n	8000934 <HAL_ADC_Init+0xa8>
 800092e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000932:	e000      	b.n	8000936 <HAL_ADC_Init+0xaa>
 8000934:	2300      	movs	r3, #0
 8000936:	693a      	ldr	r2, [r7, #16]
 8000938:	4313      	orrs	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	7d1b      	ldrb	r3, [r3, #20]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d119      	bne.n	8000978 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	7b1b      	ldrb	r3, [r3, #12]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d109      	bne.n	8000960 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	3b01      	subs	r3, #1
 8000952:	035a      	lsls	r2, r3, #13
 8000954:	693b      	ldr	r3, [r7, #16]
 8000956:	4313      	orrs	r3, r2
 8000958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	e00b      	b.n	8000978 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000964:	f043 0220 	orr.w	r2, r3, #32
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	f043 0201 	orr.w	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	430a      	orrs	r2, r1
 800098a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	689a      	ldr	r2, [r3, #8]
 8000992:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <HAL_ADC_Init+0x1a8>)
 8000994:	4013      	ands	r3, r2
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	6812      	ldr	r2, [r2, #0]
 800099a:	68b9      	ldr	r1, [r7, #8]
 800099c:	430b      	orrs	r3, r1
 800099e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009a8:	d003      	beq.n	80009b2 <HAL_ADC_Init+0x126>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d104      	bne.n	80009bc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	691b      	ldr	r3, [r3, #16]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	051b      	lsls	r3, r3, #20
 80009ba:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	430a      	orrs	r2, r1
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <HAL_ADC_Init+0x1ac>)
 80009d8:	4013      	ands	r3, r2
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d10b      	bne.n	80009f8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009ea:	f023 0303 	bic.w	r3, r3, #3
 80009ee:	f043 0201 	orr.w	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009f6:	e018      	b.n	8000a2a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009fc:	f023 0312 	bic.w	r3, r3, #18
 8000a00:	f043 0210 	orr.w	r2, r3, #16
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0c:	f043 0201 	orr.w	r2, r3, #1
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a14:	2301      	movs	r3, #1
 8000a16:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a18:	e007      	b.n	8000a2a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a1e:	f043 0210 	orr.w	r2, r3, #16
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a26:	2301      	movs	r3, #1
 8000a28:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	ffe1f7fd 	.word	0xffe1f7fd
 8000a38:	ff1f0efe 	.word	0xff1f0efe

08000a3c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000a4e:	2b01      	cmp	r3, #1
 8000a50:	d101      	bne.n	8000a56 <HAL_ADC_Start+0x1a>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e098      	b.n	8000b88 <HAL_ADC_Start+0x14c>
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f000 faa4 	bl	8000fac <ADC_Enable>
 8000a64:	4603      	mov	r3, r0
 8000a66:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 8087 	bne.w	8000b7e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a41      	ldr	r2, [pc, #260]	; (8000b90 <HAL_ADC_Start+0x154>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d105      	bne.n	8000a9a <HAL_ADC_Start+0x5e>
 8000a8e:	4b41      	ldr	r3, [pc, #260]	; (8000b94 <HAL_ADC_Start+0x158>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d115      	bne.n	8000ac6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d026      	beq.n	8000b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000abc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ac4:	e01d      	b.n	8000b02 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a2f      	ldr	r2, [pc, #188]	; (8000b94 <HAL_ADC_Start+0x158>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d004      	beq.n	8000ae6 <HAL_ADC_Start+0xaa>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	; (8000b90 <HAL_ADC_Start+0x154>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10d      	bne.n	8000b02 <HAL_ADC_Start+0xc6>
 8000ae6:	4b2b      	ldr	r3, [pc, #172]	; (8000b94 <HAL_ADC_Start+0x158>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d007      	beq.n	8000b02 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000afa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	f023 0206 	bic.w	r2, r3, #6
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b1a:	e002      	b.n	8000b22 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f06f 0202 	mvn.w	r2, #2
 8000b32:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000b3e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000b42:	d113      	bne.n	8000b6c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b48:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <HAL_ADC_Start+0x154>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d105      	bne.n	8000b5a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_ADC_Start+0x158>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d108      	bne.n	8000b6c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	689a      	ldr	r2, [r3, #8]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	e00c      	b.n	8000b86 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e003      	b.n	8000b86 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40012800 	.word	0x40012800
 8000b94:	40012400 	.word	0x40012400

08000b98 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000bae:	f7ff fe63 	bl	8000878 <HAL_GetTick>
 8000bb2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d00b      	beq.n	8000bda <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc6:	f043 0220 	orr.w	r2, r3, #32
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e0d3      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d131      	bne.n	8000c4c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d12a      	bne.n	8000c4c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000bf6:	e021      	b.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bfe:	d01d      	beq.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d007      	beq.n	8000c16 <HAL_ADC_PollForConversion+0x7e>
 8000c06:	f7ff fe37 	bl	8000878 <HAL_GetTick>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d212      	bcs.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d10b      	bne.n	8000c3c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c28:	f043 0204 	orr.w	r2, r3, #4
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e0a2      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0d6      	beq.n	8000bf8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000c4a:	e070      	b.n	8000d2e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000c4c:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <HAL_ADC_PollForConversion+0x1f4>)
 8000c4e:	681c      	ldr	r4, [r3, #0]
 8000c50:	2002      	movs	r0, #2
 8000c52:	f001 f9e5 	bl	8002020 <HAL_RCCEx_GetPeriphCLKFreq>
 8000c56:	4603      	mov	r3, r0
 8000c58:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	6919      	ldr	r1, [r3, #16]
 8000c62:	4b4b      	ldr	r3, [pc, #300]	; (8000d90 <HAL_ADC_PollForConversion+0x1f8>)
 8000c64:	400b      	ands	r3, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d118      	bne.n	8000c9c <HAL_ADC_PollForConversion+0x104>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	68d9      	ldr	r1, [r3, #12]
 8000c70:	4b48      	ldr	r3, [pc, #288]	; (8000d94 <HAL_ADC_PollForConversion+0x1fc>)
 8000c72:	400b      	ands	r3, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d111      	bne.n	8000c9c <HAL_ADC_PollForConversion+0x104>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6919      	ldr	r1, [r3, #16]
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_ADC_PollForConversion+0x200>)
 8000c80:	400b      	ands	r3, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d108      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x100>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68d9      	ldr	r1, [r3, #12]
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <HAL_ADC_PollForConversion+0x204>)
 8000c8e:	400b      	ands	r3, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <HAL_ADC_PollForConversion+0x100>
 8000c94:	2314      	movs	r3, #20
 8000c96:	e020      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000c98:	2329      	movs	r3, #41	; 0x29
 8000c9a:	e01e      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6919      	ldr	r1, [r3, #16]
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <HAL_ADC_PollForConversion+0x200>)
 8000ca4:	400b      	ands	r3, r1
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d106      	bne.n	8000cb8 <HAL_ADC_PollForConversion+0x120>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68d9      	ldr	r1, [r3, #12]
 8000cb0:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <HAL_ADC_PollForConversion+0x204>)
 8000cb2:	400b      	ands	r3, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00d      	beq.n	8000cd4 <HAL_ADC_PollForConversion+0x13c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	6919      	ldr	r1, [r3, #16]
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <HAL_ADC_PollForConversion+0x208>)
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d108      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x140>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	68d9      	ldr	r1, [r3, #12]
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <HAL_ADC_PollForConversion+0x208>)
 8000cce:	400b      	ands	r3, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_ADC_PollForConversion+0x140>
 8000cd4:	2354      	movs	r3, #84	; 0x54
 8000cd6:	e000      	b.n	8000cda <HAL_ADC_PollForConversion+0x142>
 8000cd8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000cda:	fb02 f303 	mul.w	r3, r2, r3
 8000cde:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000ce0:	e021      	b.n	8000d26 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d01a      	beq.n	8000d20 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <HAL_ADC_PollForConversion+0x168>
 8000cf0:	f7ff fdc2 	bl	8000878 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d20f      	bcs.n	8000d20 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d90b      	bls.n	8000d20 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d0c:	f043 0204 	orr.w	r2, r3, #4
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	e030      	b.n	8000d82 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d8d9      	bhi.n	8000ce2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f06f 0212 	mvn.w	r2, #18
 8000d36:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d52:	d115      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d105      	bne.n	8000d80 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d78:	f043 0201 	orr.w	r2, r3, #1
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	371c      	adds	r7, #28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd90      	pop	{r4, r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	24924924 	.word	0x24924924
 8000d94:	00924924 	.word	0x00924924
 8000d98:	12492492 	.word	0x12492492
 8000d9c:	00492492 	.word	0x00492492
 8000da0:	00249249 	.word	0x00249249

08000da4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d101      	bne.n	8000ddc <HAL_ADC_ConfigChannel+0x20>
 8000dd8:	2302      	movs	r3, #2
 8000dda:	e0dc      	b.n	8000f96 <HAL_ADC_ConfigChannel+0x1da>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2201      	movs	r2, #1
 8000de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b06      	cmp	r3, #6
 8000dea:	d81c      	bhi.n	8000e26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685a      	ldr	r2, [r3, #4]
 8000df6:	4613      	mov	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	4413      	add	r3, r2
 8000dfc:	3b05      	subs	r3, #5
 8000dfe:	221f      	movs	r2, #31
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	4413      	add	r3, r2
 8000e16:	3b05      	subs	r3, #5
 8000e18:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	430a      	orrs	r2, r1
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
 8000e24:	e03c      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b0c      	cmp	r3, #12
 8000e2c:	d81c      	bhi.n	8000e68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685a      	ldr	r2, [r3, #4]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	3b23      	subs	r3, #35	; 0x23
 8000e40:	221f      	movs	r2, #31
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4019      	ands	r1, r3
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	3b23      	subs	r3, #35	; 0x23
 8000e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	631a      	str	r2, [r3, #48]	; 0x30
 8000e66:	e01b      	b.n	8000ea0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3b41      	subs	r3, #65	; 0x41
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4019      	ands	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	3b41      	subs	r3, #65	; 0x41
 8000e94:	fa00 f203 	lsl.w	r2, r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d91c      	bls.n	8000ee2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68d9      	ldr	r1, [r3, #12]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	3b1e      	subs	r3, #30
 8000eba:	2207      	movs	r2, #7
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	6898      	ldr	r0, [r3, #8]
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	4413      	add	r3, r2
 8000ed2:	3b1e      	subs	r3, #30
 8000ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	430a      	orrs	r2, r1
 8000ede:	60da      	str	r2, [r3, #12]
 8000ee0:	e019      	b.n	8000f16 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6919      	ldr	r1, [r3, #16]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	2207      	movs	r2, #7
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	4019      	ands	r1, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	6898      	ldr	r0, [r3, #8]
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	430a      	orrs	r2, r1
 8000f14:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d003      	beq.n	8000f26 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f22:	2b11      	cmp	r3, #17
 8000f24:	d132      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d125      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d126      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f4c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b10      	cmp	r3, #16
 8000f54:	d11a      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9a      	lsrs	r2, r3, #18
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f6c:	e002      	b.n	8000f74 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d1f9      	bne.n	8000f6e <HAL_ADC_ConfigChannel+0x1b2>
 8000f7a:	e007      	b.n	8000f8c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	f043 0220 	orr.w	r2, r3, #32
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	40012400 	.word	0x40012400
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	431bde83 	.word	0x431bde83

08000fac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d040      	beq.n	800104c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0201 	orr.w	r2, r2, #1
 8000fd8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <ADC_Enable+0xac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a1f      	ldr	r2, [pc, #124]	; (800105c <ADC_Enable+0xb0>)
 8000fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe4:	0c9b      	lsrs	r3, r3, #18
 8000fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000fe8:	e002      	b.n	8000ff0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ff6:	f7ff fc3f 	bl	8000878 <HAL_GetTick>
 8000ffa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ffc:	e01f      	b.n	800103e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000ffe:	f7ff fc3b 	bl	8000878 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d918      	bls.n	800103e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b01      	cmp	r3, #1
 8001018:	d011      	beq.n	800103e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f043 0210 	orr.w	r2, r3, #16
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e007      	b.n	800104e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d1d8      	bne.n	8000ffe <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000000 	.word	0x20000000
 800105c:	431bde83 	.word	0x431bde83

08001060 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b01      	cmp	r3, #1
 8001078:	d12e      	bne.n	80010d8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f022 0201 	bic.w	r2, r2, #1
 8001088:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800108a:	f7ff fbf5 	bl	8000878 <HAL_GetTick>
 800108e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001090:	e01b      	b.n	80010ca <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001092:	f7ff fbf1 	bl	8000878 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	2b02      	cmp	r3, #2
 800109e:	d914      	bls.n	80010ca <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d10d      	bne.n	80010ca <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b2:	f043 0210 	orr.w	r2, r3, #16
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	f043 0201 	orr.w	r2, r3, #1
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e007      	b.n	80010da <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 0301 	and.w	r3, r3, #1
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d0dc      	beq.n	8001092 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001100:	4013      	ands	r3, r2
 8001102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800110c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x44>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <__NVIC_GetPriorityGrouping+0x18>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	0a1b      	lsrs	r3, r3, #8
 8001136:	f003 0307 	and.w	r3, r3, #7
}
 800113a:	4618      	mov	r0, r3
 800113c:	46bd      	mov	sp, r7
 800113e:	bc80      	pop	{r7}
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	db0b      	blt.n	8001172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	f003 021f 	and.w	r2, r3, #31
 8001160:	4906      	ldr	r1, [pc, #24]	; (800117c <__NVIC_EnableIRQ+0x34>)
 8001162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	2001      	movs	r0, #1
 800116a:	fa00 f202 	lsl.w	r2, r0, r2
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100

08001180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	6039      	str	r1, [r7, #0]
 800118a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	db0a      	blt.n	80011aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	b2da      	uxtb	r2, r3
 8001198:	490c      	ldr	r1, [pc, #48]	; (80011cc <__NVIC_SetPriority+0x4c>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	b2d2      	uxtb	r2, r2
 80011a2:	440b      	add	r3, r1
 80011a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a8:	e00a      	b.n	80011c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	4908      	ldr	r1, [pc, #32]	; (80011d0 <__NVIC_SetPriority+0x50>)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	3b04      	subs	r3, #4
 80011b8:	0112      	lsls	r2, r2, #4
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	440b      	add	r3, r1
 80011be:	761a      	strb	r2, [r3, #24]
}
 80011c0:	bf00      	nop
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	f1c3 0307 	rsb	r3, r3, #7
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	bf28      	it	cs
 80011f2:	2304      	movcs	r3, #4
 80011f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3304      	adds	r3, #4
 80011fa:	2b06      	cmp	r3, #6
 80011fc:	d902      	bls.n	8001204 <NVIC_EncodePriority+0x30>
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3b03      	subs	r3, #3
 8001202:	e000      	b.n	8001206 <NVIC_EncodePriority+0x32>
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43da      	mvns	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	401a      	ands	r2, r3
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800121c:	f04f 31ff 	mov.w	r1, #4294967295
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	fa01 f303 	lsl.w	r3, r1, r3
 8001226:	43d9      	mvns	r1, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	4313      	orrs	r3, r2
         );
}
 800122e:	4618      	mov	r0, r3
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff4f 	bl	80010e4 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff64 	bl	800112c <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ffb2 	bl	80011d4 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff81 	bl	8001180 <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff57 	bl	8001148 <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b08b      	sub	sp, #44	; 0x2c
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012b2:	2300      	movs	r3, #0
 80012b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012b6:	e169      	b.n	800158c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012b8:	2201      	movs	r2, #1
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f040 8158 	bne.w	8001586 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	4a9a      	ldr	r2, [pc, #616]	; (8001544 <HAL_GPIO_Init+0x2a0>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d05e      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012e0:	4a98      	ldr	r2, [pc, #608]	; (8001544 <HAL_GPIO_Init+0x2a0>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d875      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012e6:	4a98      	ldr	r2, [pc, #608]	; (8001548 <HAL_GPIO_Init+0x2a4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d058      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012ec:	4a96      	ldr	r2, [pc, #600]	; (8001548 <HAL_GPIO_Init+0x2a4>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d86f      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012f2:	4a96      	ldr	r2, [pc, #600]	; (800154c <HAL_GPIO_Init+0x2a8>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d052      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 80012f8:	4a94      	ldr	r2, [pc, #592]	; (800154c <HAL_GPIO_Init+0x2a8>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d869      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 80012fe:	4a94      	ldr	r2, [pc, #592]	; (8001550 <HAL_GPIO_Init+0x2ac>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d04c      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 8001304:	4a92      	ldr	r2, [pc, #584]	; (8001550 <HAL_GPIO_Init+0x2ac>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d863      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 800130a:	4a92      	ldr	r2, [pc, #584]	; (8001554 <HAL_GPIO_Init+0x2b0>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d046      	beq.n	800139e <HAL_GPIO_Init+0xfa>
 8001310:	4a90      	ldr	r2, [pc, #576]	; (8001554 <HAL_GPIO_Init+0x2b0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d85d      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 8001316:	2b12      	cmp	r3, #18
 8001318:	d82a      	bhi.n	8001370 <HAL_GPIO_Init+0xcc>
 800131a:	2b12      	cmp	r3, #18
 800131c:	d859      	bhi.n	80013d2 <HAL_GPIO_Init+0x12e>
 800131e:	a201      	add	r2, pc, #4	; (adr r2, 8001324 <HAL_GPIO_Init+0x80>)
 8001320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001324:	0800139f 	.word	0x0800139f
 8001328:	08001379 	.word	0x08001379
 800132c:	0800138b 	.word	0x0800138b
 8001330:	080013cd 	.word	0x080013cd
 8001334:	080013d3 	.word	0x080013d3
 8001338:	080013d3 	.word	0x080013d3
 800133c:	080013d3 	.word	0x080013d3
 8001340:	080013d3 	.word	0x080013d3
 8001344:	080013d3 	.word	0x080013d3
 8001348:	080013d3 	.word	0x080013d3
 800134c:	080013d3 	.word	0x080013d3
 8001350:	080013d3 	.word	0x080013d3
 8001354:	080013d3 	.word	0x080013d3
 8001358:	080013d3 	.word	0x080013d3
 800135c:	080013d3 	.word	0x080013d3
 8001360:	080013d3 	.word	0x080013d3
 8001364:	080013d3 	.word	0x080013d3
 8001368:	08001381 	.word	0x08001381
 800136c:	08001395 	.word	0x08001395
 8001370:	4a79      	ldr	r2, [pc, #484]	; (8001558 <HAL_GPIO_Init+0x2b4>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d013      	beq.n	800139e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001376:	e02c      	b.n	80013d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	623b      	str	r3, [r7, #32]
          break;
 800137e:	e029      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	3304      	adds	r3, #4
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e024      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	3308      	adds	r3, #8
 8001390:	623b      	str	r3, [r7, #32]
          break;
 8001392:	e01f      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	330c      	adds	r3, #12
 800139a:	623b      	str	r3, [r7, #32]
          break;
 800139c:	e01a      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d102      	bne.n	80013ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013a6:	2304      	movs	r3, #4
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e013      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d105      	bne.n	80013c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	611a      	str	r2, [r3, #16]
          break;
 80013be:	e009      	b.n	80013d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013c0:	2308      	movs	r3, #8
 80013c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	615a      	str	r2, [r3, #20]
          break;
 80013ca:	e003      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013cc:	2300      	movs	r3, #0
 80013ce:	623b      	str	r3, [r7, #32]
          break;
 80013d0:	e000      	b.n	80013d4 <HAL_GPIO_Init+0x130>
          break;
 80013d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	2bff      	cmp	r3, #255	; 0xff
 80013d8:	d801      	bhi.n	80013de <HAL_GPIO_Init+0x13a>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	e001      	b.n	80013e2 <HAL_GPIO_Init+0x13e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3304      	adds	r3, #4
 80013e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	2bff      	cmp	r3, #255	; 0xff
 80013e8:	d802      	bhi.n	80013f0 <HAL_GPIO_Init+0x14c>
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x152>
 80013f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f2:	3b08      	subs	r3, #8
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	210f      	movs	r1, #15
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	43db      	mvns	r3, r3
 8001406:	401a      	ands	r2, r3
 8001408:	6a39      	ldr	r1, [r7, #32]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	fa01 f303 	lsl.w	r3, r1, r3
 8001410:	431a      	orrs	r2, r3
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 80b1 	beq.w	8001586 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001424:	4b4d      	ldr	r3, [pc, #308]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a4c      	ldr	r2, [pc, #304]	; (800155c <HAL_GPIO_Init+0x2b8>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b4a      	ldr	r3, [pc, #296]	; (800155c <HAL_GPIO_Init+0x2b8>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800143c:	4a48      	ldr	r2, [pc, #288]	; (8001560 <HAL_GPIO_Init+0x2bc>)
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	089b      	lsrs	r3, r3, #2
 8001442:	3302      	adds	r3, #2
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	220f      	movs	r2, #15
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a40      	ldr	r2, [pc, #256]	; (8001564 <HAL_GPIO_Init+0x2c0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d013      	beq.n	8001490 <HAL_GPIO_Init+0x1ec>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <HAL_GPIO_Init+0x2c4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d00d      	beq.n	800148c <HAL_GPIO_Init+0x1e8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a3e      	ldr	r2, [pc, #248]	; (800156c <HAL_GPIO_Init+0x2c8>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d007      	beq.n	8001488 <HAL_GPIO_Init+0x1e4>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a3d      	ldr	r2, [pc, #244]	; (8001570 <HAL_GPIO_Init+0x2cc>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d101      	bne.n	8001484 <HAL_GPIO_Init+0x1e0>
 8001480:	2303      	movs	r3, #3
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001484:	2304      	movs	r3, #4
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x1ee>
 8001490:	2300      	movs	r3, #0
 8001492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	4313      	orrs	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <HAL_GPIO_Init+0x2bc>)
 80014a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d006      	beq.n	80014ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	492c      	ldr	r1, [pc, #176]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4928      	ldr	r1, [pc, #160]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014d4:	4013      	ands	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d006      	beq.n	80014f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014e4:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	4922      	ldr	r1, [pc, #136]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	604b      	str	r3, [r1, #4]
 80014f0:	e006      	b.n	8001500 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	491e      	ldr	r1, [pc, #120]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d006      	beq.n	800151a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	4918      	ldr	r1, [pc, #96]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	43db      	mvns	r3, r3
 8001522:	4914      	ldr	r1, [pc, #80]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001524:	4013      	ands	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d021      	beq.n	8001578 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 8001536:	68da      	ldr	r2, [r3, #12]
 8001538:	490e      	ldr	r1, [pc, #56]	; (8001574 <HAL_GPIO_Init+0x2d0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
 8001540:	e021      	b.n	8001586 <HAL_GPIO_Init+0x2e2>
 8001542:	bf00      	nop
 8001544:	10320000 	.word	0x10320000
 8001548:	10310000 	.word	0x10310000
 800154c:	10220000 	.word	0x10220000
 8001550:	10210000 	.word	0x10210000
 8001554:	10120000 	.word	0x10120000
 8001558:	10110000 	.word	0x10110000
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000
 8001564:	40010800 	.word	0x40010800
 8001568:	40010c00 	.word	0x40010c00
 800156c:	40011000 	.word	0x40011000
 8001570:	40011400 	.word	0x40011400
 8001574:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001578:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <HAL_GPIO_Init+0x304>)
 800157a:	68da      	ldr	r2, [r3, #12]
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	43db      	mvns	r3, r3
 8001580:	4909      	ldr	r1, [pc, #36]	; (80015a8 <HAL_GPIO_Init+0x304>)
 8001582:	4013      	ands	r3, r2
 8001584:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001588:	3301      	adds	r3, #1
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001592:	fa22 f303 	lsr.w	r3, r2, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	f47f ae8e 	bne.w	80012b8 <HAL_GPIO_Init+0x14>
  }
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	372c      	adds	r7, #44	; 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	460b      	mov	r3, r1
 80015b6:	807b      	strh	r3, [r7, #2]
 80015b8:	4613      	mov	r3, r2
 80015ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015bc:	787b      	ldrb	r3, [r7, #1]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015c8:	e003      	b.n	80015d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	041a      	lsls	r2, r3, #16
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015f2:	4a05      	ldr	r2, [pc, #20]	; (8001608 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f806 	bl	800160c <HAL_GPIO_EXTI_Callback>
  }
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40010400 	.word	0x40010400

0800160c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e272      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 8087 	beq.w	800174e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f003 030c 	and.w	r3, r3, #12
 8001648:	2b04      	cmp	r3, #4
 800164a:	d00c      	beq.n	8001666 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800164c:	4b8f      	ldr	r3, [pc, #572]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 030c 	and.w	r3, r3, #12
 8001654:	2b08      	cmp	r3, #8
 8001656:	d112      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
 8001658:	4b8c      	ldr	r3, [pc, #560]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001664:	d10b      	bne.n	800167e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001666:	4b89      	ldr	r3, [pc, #548]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d06c      	beq.n	800174c <HAL_RCC_OscConfig+0x12c>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d168      	bne.n	800174c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e24c      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d106      	bne.n	8001696 <HAL_RCC_OscConfig+0x76>
 8001688:	4b80      	ldr	r3, [pc, #512]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a7f      	ldr	r2, [pc, #508]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800168e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	e02e      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x98>
 800169e:	4b7b      	ldr	r3, [pc, #492]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7a      	ldr	r2, [pc, #488]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	4b78      	ldr	r3, [pc, #480]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a77      	ldr	r2, [pc, #476]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0xbc>
 80016c2:	4b72      	ldr	r3, [pc, #456]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a71      	ldr	r2, [pc, #452]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0xd4>
 80016dc:	4b6b      	ldr	r3, [pc, #428]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a6a      	ldr	r2, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b68      	ldr	r3, [pc, #416]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a67      	ldr	r2, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80016ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff f8bc 	bl	8000878 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001704:	f7ff f8b8 	bl	8000878 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b64      	cmp	r3, #100	; 0x64
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e200      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001716:	4b5d      	ldr	r3, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0xe4>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff f8a8 	bl	8000878 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff f8a4 	bl	8000878 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1ec      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800173e:	4b53      	ldr	r3, [pc, #332]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x10c>
 800174a:	e000      	b.n	800174e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800174c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d063      	beq.n	8001822 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175a:	4b4c      	ldr	r3, [pc, #304]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 030c 	and.w	r3, r3, #12
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00b      	beq.n	800177e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001766:	4b49      	ldr	r3, [pc, #292]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b08      	cmp	r3, #8
 8001770:	d11c      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
 8001772:	4b46      	ldr	r3, [pc, #280]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d116      	bne.n	80017ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800177e:	4b43      	ldr	r3, [pc, #268]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d005      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1c0      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001796:	4b3d      	ldr	r3, [pc, #244]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4939      	ldr	r1, [pc, #228]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017aa:	e03a      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017b4:	4b36      	ldr	r3, [pc, #216]	; (8001890 <HAL_RCC_OscConfig+0x270>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ba:	f7ff f85d 	bl	8000878 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c2:	f7ff f859 	bl	8000878 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1a1      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	4927      	ldr	r1, [pc, #156]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 80017f0:	4313      	orrs	r3, r2
 80017f2:	600b      	str	r3, [r1, #0]
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f6:	4b26      	ldr	r3, [pc, #152]	; (8001890 <HAL_RCC_OscConfig+0x270>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f83c 	bl	8000878 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001804:	f7ff f838 	bl	8000878 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e180      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0308 	and.w	r3, r3, #8
 800182a:	2b00      	cmp	r3, #0
 800182c:	d03a      	beq.n	80018a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d019      	beq.n	800186a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183c:	f7ff f81c 	bl	8000878 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001844:	f7ff f818 	bl	8000878 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e160      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <HAL_RCC_OscConfig+0x26c>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f000 fb08 	bl	8001e78 <RCC_Delay>
 8001868:	e01c      	b.n	80018a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800186a:	4b0a      	ldr	r3, [pc, #40]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001870:	f7ff f802 	bl	8000878 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001876:	e00f      	b.n	8001898 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7fe fffe 	bl	8000878 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d908      	bls.n	8001898 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e146      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	42420000 	.word	0x42420000
 8001894:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001898:	4b92      	ldr	r3, [pc, #584]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1e9      	bne.n	8001878 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a6 	beq.w	80019fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b2:	2300      	movs	r3, #0
 80018b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b6:	4b8b      	ldr	r3, [pc, #556]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10d      	bne.n	80018de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a87      	ldr	r2, [pc, #540]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
 80018ce:	4b85      	ldr	r3, [pc, #532]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018da:	2301      	movs	r3, #1
 80018dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	4b82      	ldr	r3, [pc, #520]	; (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d118      	bne.n	800191c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ea:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a7e      	ldr	r2, [pc, #504]	; (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 80018f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018f6:	f7fe ffbf 	bl	8000878 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018fe:	f7fe ffbb 	bl	8000878 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b64      	cmp	r3, #100	; 0x64
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e103      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001910:	4b75      	ldr	r3, [pc, #468]	; (8001ae8 <HAL_RCC_OscConfig+0x4c8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d106      	bne.n	8001932 <HAL_RCC_OscConfig+0x312>
 8001924:	4b6f      	ldr	r3, [pc, #444]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	4a6e      	ldr	r2, [pc, #440]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	e02d      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0x334>
 800193a:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a69      	ldr	r2, [pc, #420]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a66      	ldr	r2, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
 8001952:	e01c      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b05      	cmp	r3, #5
 800195a:	d10c      	bne.n	8001976 <HAL_RCC_OscConfig+0x356>
 800195c:	4b61      	ldr	r3, [pc, #388]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a60      	ldr	r2, [pc, #384]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	4a5d      	ldr	r2, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6213      	str	r3, [r2, #32]
 8001974:	e00b      	b.n	800198e <HAL_RCC_OscConfig+0x36e>
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001978:	6a1b      	ldr	r3, [r3, #32]
 800197a:	4a5a      	ldr	r2, [pc, #360]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800197c:	f023 0301 	bic.w	r3, r3, #1
 8001980:	6213      	str	r3, [r2, #32]
 8001982:	4b58      	ldr	r3, [pc, #352]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	4a57      	ldr	r2, [pc, #348]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001988:	f023 0304 	bic.w	r3, r3, #4
 800198c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d015      	beq.n	80019c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7fe ff6f 	bl	8000878 <HAL_GetTick>
 800199a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7fe ff6b 	bl	8000878 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e0b1      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0ee      	beq.n	800199e <HAL_RCC_OscConfig+0x37e>
 80019c0:	e014      	b.n	80019ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c2:	f7fe ff59 	bl	8000878 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7fe ff55 	bl	8000878 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e09b      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e0:	4b40      	ldr	r3, [pc, #256]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1ee      	bne.n	80019ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ec:	7dfb      	ldrb	r3, [r7, #23]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d105      	bne.n	80019fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8087 	beq.w	8001b16 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a08:	4b36      	ldr	r3, [pc, #216]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 030c 	and.w	r3, r3, #12
 8001a10:	2b08      	cmp	r3, #8
 8001a12:	d061      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d146      	bne.n	8001aaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1c:	4b33      	ldr	r3, [pc, #204]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a22:	f7fe ff29 	bl	8000878 <HAL_GetTick>
 8001a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2a:	f7fe ff25 	bl	8000878 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e06d      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4921      	ldr	r1, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a19      	ldr	r1, [r3, #32]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	430b      	orrs	r3, r1
 8001a76:	491b      	ldr	r1, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a82:	f7fe fef9 	bl	8000878 <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7fe fef5 	bl	8000878 <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e03d      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0f0      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46a>
 8001aa8:	e035      	b.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x4cc>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7fe fee2 	bl	8000878 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab8:	f7fe fede 	bl	8000878 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e026      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x498>
 8001ad6:	e01e      	b.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e019      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af0:	4b0b      	ldr	r3, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x500>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d106      	bne.n	8001b12 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d0      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d910      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b46:	4b67      	ldr	r3, [pc, #412]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 0207 	bic.w	r2, r3, #7
 8001b4e:	4965      	ldr	r1, [pc, #404]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b56:	4b63      	ldr	r3, [pc, #396]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d001      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0b8      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b80:	4b59      	ldr	r3, [pc, #356]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a58      	ldr	r2, [pc, #352]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b98:	4b53      	ldr	r3, [pc, #332]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	4a52      	ldr	r2, [pc, #328]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ba2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ba4:	4b50      	ldr	r3, [pc, #320]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	494d      	ldr	r1, [pc, #308]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d040      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bca:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e07f      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001be2:	4b41      	ldr	r3, [pc, #260]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e073      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b3d      	ldr	r3, [pc, #244]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e06b      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b39      	ldr	r3, [pc, #228]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c14:	f7fe fe30 	bl	8000878 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7fe fe2c 	bl	8000878 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e053      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c44:	4b27      	ldr	r3, [pc, #156]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d210      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c52:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0207 	bic.w	r2, r3, #7
 8001c5a:	4922      	ldr	r1, [pc, #136]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e032      	b.n	8001cda <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c9e:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	490e      	ldr	r1, [pc, #56]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cb2:	f000 f821 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	490a      	ldr	r1, [pc, #40]	; (8001cec <HAL_RCC_ClockConfig+0x1c8>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	4a09      	ldr	r2, [pc, #36]	; (8001cf0 <HAL_RCC_ClockConfig+0x1cc>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_RCC_ClockConfig+0x1d0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fca0 	bl	8000618 <HAL_InitTick>

  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000
 8001ce8:	40021000 	.word	0x40021000
 8001cec:	08005d58 	.word	0x08005d58
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000004 	.word	0x20000004

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b490      	push	{r4, r7}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d00:	1d3c      	adds	r4, r7, #4
 8001d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d08:	f240 2301 	movw	r3, #513	; 0x201
 8001d0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d22:	4b21      	ldr	r3, [pc, #132]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d002      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x40>
 8001d32:	2b08      	cmp	r3, #8
 8001d34:	d003      	beq.n	8001d3e <HAL_RCC_GetSysClockFreq+0x46>
 8001d36:	e02b      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d38:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d3a:	623b      	str	r3, [r7, #32]
      break;
 8001d3c:	e02b      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	0c9b      	lsrs	r3, r3, #18
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3328      	adds	r3, #40	; 0x28
 8001d48:	443b      	add	r3, r7
 8001d4a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d4e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d012      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	0c5b      	lsrs	r3, r3, #17
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	3328      	adds	r3, #40	; 0x28
 8001d66:	443b      	add	r3, r7
 8001d68:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d6c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d72:	fb03 f202 	mul.w	r2, r3, r2
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	e004      	b.n	8001d8a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	623b      	str	r3, [r7, #32]
      break;
 8001d8e:	e002      	b.n	8001d96 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d92:	623b      	str	r3, [r7, #32]
      break;
 8001d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d96:	6a3b      	ldr	r3, [r7, #32]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3728      	adds	r7, #40	; 0x28
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc90      	pop	{r4, r7}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	08005cd8 	.word	0x08005cd8
 8001da8:	40021000 	.word	0x40021000
 8001dac:	007a1200 	.word	0x007a1200
 8001db0:	003d0900 	.word	0x003d0900

08001db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	20000000 	.word	0x20000000

08001dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dcc:	f7ff fff2 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	0a1b      	lsrs	r3, r3, #8
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	4903      	ldr	r1, [pc, #12]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dde:	5ccb      	ldrb	r3, [r1, r3]
 8001de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40021000 	.word	0x40021000
 8001dec:	08005d68 	.word	0x08005d68

08001df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	0adb      	lsrs	r3, r3, #11
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	4903      	ldr	r1, [pc, #12]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e06:	5ccb      	ldrb	r3, [r1, r3]
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08005d68 	.word	0x08005d68

08001e18 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	220f      	movs	r2, #15
 8001e26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_GetClockConfig+0x58>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e34:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_RCC_GetClockConfig+0x58>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e40:	4b0b      	ldr	r3, [pc, #44]	; (8001e70 <HAL_RCC_GetClockConfig+0x58>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_RCC_GetClockConfig+0x58>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	08db      	lsrs	r3, r3, #3
 8001e52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0207 	and.w	r2, r3, #7
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40022000 	.word	0x40022000

08001e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <RCC_Delay+0x34>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <RCC_Delay+0x38>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e94:	bf00      	nop
  }
  while (Delay --);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <RCC_Delay+0x1c>
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07d      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d118      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fcb0 	bl	8000878 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	e008      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fcac 	bl	8000878 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e06d      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02e      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d027      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f68:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f6e:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d014      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fc7b 	bl	8000878 <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fc77 	bl	8000878 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e036      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4917      	ldr	r1, [pc, #92]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	490b      	ldr	r1, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	42420440 	.word	0x42420440

08002020 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002020:	b590      	push	{r4, r7, lr}
 8002022:	b08d      	sub	sp, #52	; 0x34
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800202a:	f107 040c 	add.w	r4, r7, #12
 800202e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002030:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002034:	f240 2301 	movw	r3, #513	; 0x201
 8002038:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	2300      	movs	r3, #0
 800204c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b10      	cmp	r3, #16
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b10      	cmp	r3, #16
 8002058:	f200 808e 	bhi.w	8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d049      	beq.n	80020f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b02      	cmp	r3, #2
 8002066:	d079      	beq.n	800215c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002068:	e086      	b.n	8002178 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800206a:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002070:	4b47      	ldr	r3, [pc, #284]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d07f      	beq.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	0c9b      	lsrs	r3, r3, #18
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	3330      	adds	r3, #48	; 0x30
 8002086:	443b      	add	r3, r7
 8002088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800208c:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d017      	beq.n	80020c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c5b      	lsrs	r3, r3, #17
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	3330      	adds	r3, #48	; 0x30
 80020a4:	443b      	add	r3, r7
 80020a6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00d      	beq.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80020b6:	4a37      	ldr	r2, [pc, #220]	; (8002194 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	fb02 f303 	mul.w	r3, r2, r3
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020c6:	e004      	b.n	80020d2 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	4a33      	ldr	r2, [pc, #204]	; (8002198 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80020d2:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020de:	d102      	bne.n	80020e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020e4:	e04a      	b.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80020e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4a2c      	ldr	r2, [pc, #176]	; (800219c <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80020ec:	fba2 2303 	umull	r2, r3, r2, r3
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80020f4:	e042      	b.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80020f6:	4b26      	ldr	r3, [pc, #152]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002106:	d108      	bne.n	800211a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002116:	62bb      	str	r3, [r7, #40]	; 0x28
 8002118:	e01f      	b.n	800215a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002124:	d109      	bne.n	800213a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002126:	4b1a      	ldr	r3, [pc, #104]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002132:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002136:	62bb      	str	r3, [r7, #40]	; 0x28
 8002138:	e00f      	b.n	800215a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002140:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002144:	d11c      	bne.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002146:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d016      	beq.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002152:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002158:	e012      	b.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800215a:	e011      	b.n	8002180 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800215c:	f7ff fe48 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	0b9b      	lsrs	r3, r3, #14
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	3301      	adds	r3, #1
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002176:	e004      	b.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002178:	bf00      	nop
 800217a:	e002      	b.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800217c:	bf00      	nop
 800217e:	e000      	b.n	8002182 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002180:	bf00      	nop
    }
  }
  return (frequency);
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002184:	4618      	mov	r0, r3
 8002186:	3734      	adds	r7, #52	; 0x34
 8002188:	46bd      	mov	sp, r7
 800218a:	bd90      	pop	{r4, r7, pc}
 800218c:	08005ce8 	.word	0x08005ce8
 8002190:	40021000 	.word	0x40021000
 8002194:	007a1200 	.word	0x007a1200
 8002198:	003d0900 	.word	0x003d0900
 800219c:	aaaaaaab 	.word	0xaaaaaaab

080021a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e041      	b.n	8002236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f839 	bl	800223e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f000 f9b4 	bl	800254c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b01      	cmp	r3, #1
 8002262:	d001      	beq.n	8002268 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e03a      	b.n	80022de <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2202      	movs	r2, #2
 800226c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a18      	ldr	r2, [pc, #96]	; (80022e8 <HAL_TIM_Base_Start_IT+0x98>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d00e      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x58>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002292:	d009      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x58>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_TIM_Base_Start_IT+0x9c>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d004      	beq.n	80022a8 <HAL_TIM_Base_Start_IT+0x58>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_TIM_Base_Start_IT+0xa0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d111      	bne.n	80022cc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 0307 	and.w	r3, r3, #7
 80022b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d010      	beq.n	80022dc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0201 	orr.w	r2, r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ca:	e007      	b.n	80022dc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f042 0201 	orr.w	r2, r2, #1
 80022da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40000400 	.word	0x40000400
 80022f0:	40000800 	.word	0x40000800

080022f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b02      	cmp	r3, #2
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b02      	cmp	r3, #2
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0202 	mvn.w	r2, #2
 8002320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8ed 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8e0 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8ef 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0204 	mvn.w	r2, #4
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2202      	movs	r2, #2
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f8c3 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8b6 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8c5 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0308 	and.w	r3, r3, #8
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0208 	mvn.w	r2, #8
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2204      	movs	r2, #4
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f899 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f88c 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f89b 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0310 	and.w	r3, r3, #16
 8002402:	2b10      	cmp	r3, #16
 8002404:	d122      	bne.n	800244c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0310 	and.w	r3, r3, #16
 8002410:	2b10      	cmp	r3, #16
 8002412:	d11b      	bne.n	800244c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0210 	mvn.w	r2, #16
 800241c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2208      	movs	r2, #8
 8002422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f86f 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 8002438:	e005      	b.n	8002446 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f862 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f871 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d107      	bne.n	8002478 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f06f 0201 	mvn.w	r2, #1
 8002470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe f806 	bl	8000484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	d10e      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002490:	2b80      	cmp	r3, #128	; 0x80
 8002492:	d107      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800249c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8bf 	bl	8002622 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ae:	2b40      	cmp	r3, #64	; 0x40
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024bc:	2b40      	cmp	r3, #64	; 0x40
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f835 	bl	800253a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b20      	cmp	r3, #32
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0220 	mvn.w	r2, #32
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f88a 	bl	8002610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024fc:	bf00      	nop
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00b      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d007      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a26      	ldr	r2, [pc, #152]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <TIM_Base_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <TIM_Base_SetConfig+0xc0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d103      	bne.n	80025f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	615a      	str	r2, [r3, #20]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800

08002610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e03f      	b.n	80026c6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d106      	bne.n	8002660 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f7fd ff9e 	bl	800059c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2224      	movs	r2, #36	; 0x24
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002676:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f905 	bl	8002888 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800268c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695a      	ldr	r2, [r3, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800269c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2220      	movs	r2, #32
 80026b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b08a      	sub	sp, #40	; 0x28
 80026d2:	af02      	add	r7, sp, #8
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	603b      	str	r3, [r7, #0]
 80026da:	4613      	mov	r3, r2
 80026dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80026de:	2300      	movs	r3, #0
 80026e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d17c      	bne.n	80027e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_Transmit+0x2c>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e075      	b.n	80027ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_UART_Transmit+0x3e>
 8002708:	2302      	movs	r3, #2
 800270a:	e06e      	b.n	80027ea <HAL_UART_Transmit+0x11c>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2221      	movs	r2, #33	; 0x21
 800271e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002722:	f7fe f8a9 	bl	8000878 <HAL_GetTick>
 8002726:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800273c:	d108      	bne.n	8002750 <HAL_UART_Transmit+0x82>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d104      	bne.n	8002750 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002746:	2300      	movs	r3, #0
 8002748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	e003      	b.n	8002758 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002760:	e02a      	b.n	80027b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	2180      	movs	r1, #128	; 0x80
 800276c:	68f8      	ldr	r0, [r7, #12]
 800276e:	f000 f840 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e036      	b.n	80027ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10b      	bne.n	800279a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	881b      	ldrh	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002790:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	3302      	adds	r3, #2
 8002796:	61bb      	str	r3, [r7, #24]
 8002798:	e007      	b.n	80027aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	781a      	ldrb	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	3301      	adds	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80027bc:	b29b      	uxth	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1cf      	bne.n	8002762 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2200      	movs	r2, #0
 80027ca:	2140      	movs	r1, #64	; 0x40
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f810 	bl	80027f2 <UART_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e006      	b.n	80027ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80027e8:	2302      	movs	r3, #2
  }
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3720      	adds	r7, #32
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	60f8      	str	r0, [r7, #12]
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	603b      	str	r3, [r7, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002802:	e02c      	b.n	800285e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d028      	beq.n	800285e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <UART_WaitOnFlagUntilTimeout+0x30>
 8002812:	f7fe f831 	bl	8000878 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	429a      	cmp	r2, r3
 8002820:	d21d      	bcs.n	800285e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002830:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0201 	bic.w	r2, r2, #1
 8002840:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e00f      	b.n	800287e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4013      	ands	r3, r2
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	429a      	cmp	r2, r3
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	79fb      	ldrb	r3, [r7, #7]
 8002878:	429a      	cmp	r2, r3
 800287a:	d0c3      	beq.n	8002804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
	...

08002888 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689a      	ldr	r2, [r3, #8]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80028c2:	f023 030c 	bic.w	r3, r3, #12
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	430b      	orrs	r3, r1
 80028ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2c      	ldr	r2, [pc, #176]	; (800299c <UART_SetConfig+0x114>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d103      	bne.n	80028f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028f0:	f7ff fa7e 	bl	8001df0 <HAL_RCC_GetPCLK2Freq>
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	e002      	b.n	80028fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028f8:	f7ff fa66 	bl	8001dc8 <HAL_RCC_GetPCLK1Freq>
 80028fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	009a      	lsls	r2, r3, #2
 8002908:	441a      	add	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	fbb2 f3f3 	udiv	r3, r2, r3
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <UART_SetConfig+0x118>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	0119      	lsls	r1, r3, #4
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	441a      	add	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fbb2 f2f3 	udiv	r2, r2, r3
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <UART_SetConfig+0x118>)
 8002936:	fba3 0302 	umull	r0, r3, r3, r2
 800293a:	095b      	lsrs	r3, r3, #5
 800293c:	2064      	movs	r0, #100	; 0x64
 800293e:	fb00 f303 	mul.w	r3, r0, r3
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	3332      	adds	r3, #50	; 0x32
 8002948:	4a15      	ldr	r2, [pc, #84]	; (80029a0 <UART_SetConfig+0x118>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002954:	4419      	add	r1, r3
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009a      	lsls	r2, r3, #2
 8002960:	441a      	add	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fbb2 f2f3 	udiv	r2, r2, r3
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <UART_SetConfig+0x118>)
 800296e:	fba3 0302 	umull	r0, r3, r3, r2
 8002972:	095b      	lsrs	r3, r3, #5
 8002974:	2064      	movs	r0, #100	; 0x64
 8002976:	fb00 f303 	mul.w	r3, r0, r3
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	3332      	adds	r3, #50	; 0x32
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <UART_SetConfig+0x118>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	095b      	lsrs	r3, r3, #5
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	440a      	add	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002994:	bf00      	nop
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40013800 	.word	0x40013800
 80029a0:	51eb851f 	.word	0x51eb851f

080029a4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029aa:	f3ef 8305 	mrs	r3, IPSR
 80029ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80029b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029b6:	f3ef 8310 	mrs	r3, PRIMASK
 80029ba:	607b      	str	r3, [r7, #4]
  return(result);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d109      	bne.n	80029d6 <osKernelInitialize+0x32>
 80029c2:	4b10      	ldr	r3, [pc, #64]	; (8002a04 <osKernelInitialize+0x60>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d109      	bne.n	80029de <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029ca:	f3ef 8311 	mrs	r3, BASEPRI
 80029ce:	603b      	str	r3, [r7, #0]
  return(result);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029d6:	f06f 0305 	mvn.w	r3, #5
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	e00c      	b.n	80029f8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029de:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <osKernelInitialize+0x60>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d105      	bne.n	80029f2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029e6:	4b07      	ldr	r3, [pc, #28]	; (8002a04 <osKernelInitialize+0x60>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	e002      	b.n	80029f8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029f8:	68fb      	ldr	r3, [r7, #12]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr
 8002a04:	2000015c 	.word	0x2000015c

08002a08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a0e:	f3ef 8305 	mrs	r3, IPSR
 8002a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	607b      	str	r3, [r7, #4]
  return(result);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <osKernelStart+0x32>
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <osKernelStart+0x64>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d109      	bne.n	8002a42 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002a32:	603b      	str	r3, [r7, #0]
  return(result);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a3a:	f06f 0305 	mvn.w	r3, #5
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	e00e      	b.n	8002a60 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a42:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <osKernelStart+0x64>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d107      	bne.n	8002a5a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <osKernelStart+0x64>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a50:	f001 f878 	bl	8003b44 <vTaskStartScheduler>
      stat = osOK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	e002      	b.n	8002a60 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a60:	68fb      	ldr	r3, [r7, #12]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000015c 	.word	0x2000015c

08002a70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b092      	sub	sp, #72	; 0x48
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a80:	f3ef 8305 	mrs	r3, IPSR
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f040 8094 	bne.w	8002bb6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a92:	623b      	str	r3, [r7, #32]
  return(result);
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f040 808d 	bne.w	8002bb6 <osThreadNew+0x146>
 8002a9c:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <osThreadNew+0x150>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d106      	bne.n	8002ab2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8002aa8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 8082 	bne.w	8002bb6 <osThreadNew+0x146>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d07e      	beq.n	8002bb6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002ab8:	2380      	movs	r3, #128	; 0x80
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002abc:	2318      	movs	r3, #24
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002ac4:	f107 031b 	add.w	r3, r7, #27
 8002ac8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002aca:	f04f 33ff 	mov.w	r3, #4294967295
 8002ace:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d045      	beq.n	8002b62 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <osThreadNew+0x74>
        name = attr->name;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d002      	beq.n	8002af2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <osThreadNew+0x9a>
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	2b38      	cmp	r3, #56	; 0x38
 8002afc:	d805      	bhi.n	8002b0a <osThreadNew+0x9a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <osThreadNew+0x9e>
        return (NULL);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e054      	b.n	8002bb8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	089b      	lsrs	r3, r3, #2
 8002b1c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00e      	beq.n	8002b44 <osThreadNew+0xd4>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b5b      	cmp	r3, #91	; 0x5b
 8002b2c:	d90a      	bls.n	8002b44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d006      	beq.n	8002b44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <osThreadNew+0xd4>
        mem = 1;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	e010      	b.n	8002b66 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <osThreadNew+0xf6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d108      	bne.n	8002b66 <osThreadNew+0xf6>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d104      	bne.n	8002b66 <osThreadNew+0xf6>
          mem = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b60:	e001      	b.n	8002b66 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d110      	bne.n	8002b8e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b74:	9202      	str	r2, [sp, #8]
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 fe12 	bl	80037ac <xTaskCreateStatic>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	617b      	str	r3, [r7, #20]
 8002b8c:	e013      	b.n	8002bb6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d110      	bne.n	8002bb6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 fe5c 	bl	8003864 <xTaskCreate>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d001      	beq.n	8002bb6 <osThreadNew+0x146>
          hTask = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002bb6:	697b      	ldr	r3, [r7, #20]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3738      	adds	r7, #56	; 0x38
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	2000015c 	.word	0x2000015c

08002bc4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bcc:	f3ef 8305 	mrs	r3, IPSR
 8002bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8002bd2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10f      	bne.n	8002bf8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002bdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d109      	bne.n	8002bf8 <osDelay+0x34>
 8002be4:	4b0d      	ldr	r3, [pc, #52]	; (8002c1c <osDelay+0x58>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d109      	bne.n	8002c00 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bec:	f3ef 8311 	mrs	r3, BASEPRI
 8002bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <osDelay+0x3c>
    stat = osErrorISR;
 8002bf8:	f06f 0305 	mvn.w	r3, #5
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	e007      	b.n	8002c10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 ff66 	bl	8003adc <vTaskDelay>
    }
  }

  return (stat);
 8002c10:	697b      	ldr	r3, [r7, #20]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	2000015c 	.word	0x2000015c

08002c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002c20:	b480      	push	{r7}
 8002c22:	b085      	sub	sp, #20
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4a06      	ldr	r2, [pc, #24]	; (8002c48 <vApplicationGetIdleTaskMemory+0x28>)
 8002c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a05      	ldr	r2, [pc, #20]	; (8002c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8002c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr
 8002c48:	20000160 	.word	0x20000160
 8002c4c:	200001bc 	.word	0x200001bc

08002c50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4a07      	ldr	r2, [pc, #28]	; (8002c7c <vApplicationGetTimerTaskMemory+0x2c>)
 8002c60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <vApplicationGetTimerTaskMemory+0x30>)
 8002c66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c6e:	601a      	str	r2, [r3, #0]
}
 8002c70:	bf00      	nop
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	200003bc 	.word	0x200003bc
 8002c80:	20000418 	.word	0x20000418

08002c84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f103 0208 	add.w	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f103 0208 	add.w	r2, r3, #8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f103 0208 	add.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr

08002cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b085      	sub	sp, #20
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	601a      	str	r2, [r3, #0]
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bc80      	pop	{r7}
 8002d1e:	4770      	bx	lr

08002d20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d36:	d103      	bne.n	8002d40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e00c      	b.n	8002d5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3308      	adds	r3, #8
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	e002      	b.n	8002d4e <vListInsert+0x2e>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68ba      	ldr	r2, [r7, #8]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d2f6      	bcs.n	8002d48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	601a      	str	r2, [r3, #0]
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	6892      	ldr	r2, [r2, #8]
 8002da6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6852      	ldr	r2, [r2, #4]
 8002db0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d103      	bne.n	8002dc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr
	...

08002de4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d10a      	bne.n	8002e0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e0e:	f001 ffc5 	bl	8004d9c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1a:	68f9      	ldr	r1, [r7, #12]
 8002e1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e1e:	fb01 f303 	mul.w	r3, r1, r3
 8002e22:	441a      	add	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	68f9      	ldr	r1, [r7, #12]
 8002e42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	22ff      	movs	r2, #255	; 0xff
 8002e52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d114      	bne.n	8002e8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01a      	beq.n	8002ea2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 f8f1 	bl	8004058 <xTaskRemoveFromEventList>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <xQueueGenericReset+0xcc>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	e009      	b.n	8002ea2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	3310      	adds	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff fef6 	bl	8002c84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3324      	adds	r3, #36	; 0x24
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7ff fef1 	bl	8002c84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ea2:	f001 ffab 	bl	8004dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	; 0x38
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10a      	bne.n	8002ede <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10a      	bne.n	8002efa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ef6:	bf00      	nop
 8002ef8:	e7fe      	b.n	8002ef8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <xQueueGenericCreateStatic+0x52>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <xQueueGenericCreateStatic+0x56>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <xQueueGenericCreateStatic+0x58>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d10a      	bne.n	8002f26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	623b      	str	r3, [r7, #32]
}
 8002f22:	bf00      	nop
 8002f24:	e7fe      	b.n	8002f24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d102      	bne.n	8002f32 <xQueueGenericCreateStatic+0x7e>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <xQueueGenericCreateStatic+0x82>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <xQueueGenericCreateStatic+0x84>
 8002f36:	2300      	movs	r3, #0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	61fb      	str	r3, [r7, #28]
}
 8002f4e:	bf00      	nop
 8002f50:	e7fe      	b.n	8002f50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f52:	2350      	movs	r3, #80	; 0x50
 8002f54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d00a      	beq.n	8002f72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f60:	f383 8811 	msr	BASEPRI, r3
 8002f64:	f3bf 8f6f 	isb	sy
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	61bb      	str	r3, [r7, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00d      	beq.n	8002f98 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8a:	9300      	str	r3, [sp, #0]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f805 	bl	8002fa2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3730      	adds	r7, #48	; 0x30
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
 8002fae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e002      	b.n	8002fc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	69b8      	ldr	r0, [r7, #24]
 8002fd4:	f7ff ff06 	bl	8002de4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	; 0x38
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <xQueueGenericSend+0x32>
	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d103      	bne.n	8003028 <xQueueGenericSend+0x40>
 8003020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <xQueueGenericSend+0x44>
 8003028:	2301      	movs	r3, #1
 800302a:	e000      	b.n	800302e <xQueueGenericSend+0x46>
 800302c:	2300      	movs	r3, #0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xQueueGenericSend+0x60>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d103      	bne.n	8003056 <xQueueGenericSend+0x6e>
 800304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <xQueueGenericSend+0x72>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <xQueueGenericSend+0x74>
 800305a:	2300      	movs	r3, #0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10a      	bne.n	8003076 <xQueueGenericSend+0x8e>
	__asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	623b      	str	r3, [r7, #32]
}
 8003072:	bf00      	nop
 8003074:	e7fe      	b.n	8003074 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003076:	f001 f9b1 	bl	80043dc <xTaskGetSchedulerState>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <xQueueGenericSend+0x9e>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <xQueueGenericSend+0xa2>
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <xQueueGenericSend+0xa4>
 800308a:	2300      	movs	r3, #0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10a      	bne.n	80030a6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	61fb      	str	r3, [r7, #28]
}
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80030a6:	f001 fe79 	bl	8004d9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <xQueueGenericSend+0xd4>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d129      	bne.n	8003110 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	68b9      	ldr	r1, [r7, #8]
 80030c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030c2:	f000 fa07 	bl	80034d4 <prvCopyDataToQueue>
 80030c6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d010      	beq.n	80030f2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	3324      	adds	r3, #36	; 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 ffbf 	bl	8004058 <xTaskRemoveFromEventList>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d013      	beq.n	8003108 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030e0:	4b3f      	ldr	r3, [pc, #252]	; (80031e0 <xQueueGenericSend+0x1f8>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	e00a      	b.n	8003108 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030f8:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <xQueueGenericSend+0x1f8>)
 80030fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	f3bf 8f4f 	dsb	sy
 8003104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003108:	f001 fe78 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 800310c:	2301      	movs	r3, #1
 800310e:	e063      	b.n	80031d8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003116:	f001 fe71 	bl	8004dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800311a:	2300      	movs	r3, #0
 800311c:	e05c      	b.n	80031d8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800311e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fff9 	bl	8004120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800312e:	2301      	movs	r3, #1
 8003130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003132:	f001 fe63 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003136:	f000 fd6b 	bl	8003c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800313a:	f001 fe2f 	bl	8004d9c <vPortEnterCritical>
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003144:	b25b      	sxtb	r3, r3
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	d103      	bne.n	8003154 <xQueueGenericSend+0x16c>
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315a:	b25b      	sxtb	r3, r3
 800315c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003160:	d103      	bne.n	800316a <xQueueGenericSend+0x182>
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800316a:	f001 fe47 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800316e:	1d3a      	adds	r2, r7, #4
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f000 ffe8 	bl	800414c <xTaskCheckForTimeOut>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d124      	bne.n	80031cc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003184:	f000 fa9e 	bl	80036c4 <prvIsQueueFull>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003190:	3310      	adds	r3, #16
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4611      	mov	r1, r2
 8003196:	4618      	mov	r0, r3
 8003198:	f000 ff0e 	bl	8003fb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800319c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319e:	f000 fa29 	bl	80035f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031a2:	f000 fd43 	bl	8003c2c <xTaskResumeAll>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f af7c 	bne.w	80030a6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80031ae:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <xQueueGenericSend+0x1f8>)
 80031b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	f3bf 8f6f 	isb	sy
 80031be:	e772      	b.n	80030a6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c2:	f000 fa17 	bl	80035f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031c6:	f000 fd31 	bl	8003c2c <xTaskResumeAll>
 80031ca:	e76c      	b.n	80030a6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031ce:	f000 fa11 	bl	80035f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d2:	f000 fd2b 	bl	8003c2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031d6:	2300      	movs	r3, #0
		}
	}
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3738      	adds	r7, #56	; 0x38
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	e000ed04 	.word	0xe000ed04

080031e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08e      	sub	sp, #56	; 0x38
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
 80031f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10a      	bne.n	8003212 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800320e:	bf00      	nop
 8003210:	e7fe      	b.n	8003210 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d103      	bne.n	8003220 <xQueueGenericSendFromISR+0x3c>
 8003218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <xQueueGenericSendFromISR+0x40>
 8003220:	2301      	movs	r3, #1
 8003222:	e000      	b.n	8003226 <xQueueGenericSendFromISR+0x42>
 8003224:	2300      	movs	r3, #0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10a      	bne.n	8003240 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	623b      	str	r3, [r7, #32]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d103      	bne.n	800324e <xQueueGenericSendFromISR+0x6a>
 8003246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <xQueueGenericSendFromISR+0x6e>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueGenericSendFromISR+0x70>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10a      	bne.n	800326e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61fb      	str	r3, [r7, #28]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800326e:	f001 fe57 	bl	8004f20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003272:	f3ef 8211 	mrs	r2, BASEPRI
 8003276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800327a:	f383 8811 	msr	BASEPRI, r3
 800327e:	f3bf 8f6f 	isb	sy
 8003282:	f3bf 8f4f 	dsb	sy
 8003286:	61ba      	str	r2, [r7, #24]
 8003288:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800328a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <xQueueGenericSendFromISR+0xbc>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d12c      	bne.n	80032fa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032b0:	f000 f910 	bl	80034d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032b4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d112      	bne.n	80032e4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d016      	beq.n	80032f4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	3324      	adds	r3, #36	; 0x24
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fec4 	bl	8004058 <xTaskRemoveFromEventList>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00e      	beq.n	80032f4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	e007      	b.n	80032f4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032e8:	3301      	adds	r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	b25a      	sxtb	r2, r3
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032f4:	2301      	movs	r3, #1
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80032f8:	e001      	b.n	80032fe <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
 80032fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003300:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003308:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800330a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800330c:	4618      	mov	r0, r3
 800330e:	3738      	adds	r7, #56	; 0x38
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003320:	2300      	movs	r3, #0
 8003322:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <xQueueReceive+0x30>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	f383 8811 	msr	BASEPRI, r3
 8003336:	f3bf 8f6f 	isb	sy
 800333a:	f3bf 8f4f 	dsb	sy
 800333e:	623b      	str	r3, [r7, #32]
}
 8003340:	bf00      	nop
 8003342:	e7fe      	b.n	8003342 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <xQueueReceive+0x3e>
 800334a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <xQueueReceive+0x42>
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <xQueueReceive+0x44>
 8003356:	2300      	movs	r3, #0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10a      	bne.n	8003372 <xQueueReceive+0x5e>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	61fb      	str	r3, [r7, #28]
}
 800336e:	bf00      	nop
 8003370:	e7fe      	b.n	8003370 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003372:	f001 f833 	bl	80043dc <xTaskGetSchedulerState>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <xQueueReceive+0x6e>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <xQueueReceive+0x72>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <xQueueReceive+0x74>
 8003386:	2300      	movs	r3, #0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <xQueueReceive+0x8e>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	61bb      	str	r3, [r7, #24]
}
 800339e:	bf00      	nop
 80033a0:	e7fe      	b.n	80033a0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033a2:	f001 fcfb 	bl	8004d9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d01f      	beq.n	80033f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033b2:	68b9      	ldr	r1, [r7, #8]
 80033b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033b6:	f000 f8f7 	bl	80035a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1e5a      	subs	r2, r3, #1
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00f      	beq.n	80033ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033cc:	3310      	adds	r3, #16
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fe42 	bl	8004058 <xTaskRemoveFromEventList>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d007      	beq.n	80033ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033da:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <xQueueReceive+0x1bc>)
 80033dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	f3bf 8f4f 	dsb	sy
 80033e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033ea:	f001 fd07 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e069      	b.n	80034c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d103      	bne.n	8003400 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033f8:	f001 fd00 	bl	8004dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033fc:	2300      	movs	r3, #0
 80033fe:	e062      	b.n	80034c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003406:	f107 0310 	add.w	r3, r7, #16
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fe88 	bl	8004120 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003414:	f001 fcf2 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003418:	f000 fbfa 	bl	8003c10 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800341c:	f001 fcbe 	bl	8004d9c <vPortEnterCritical>
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003426:	b25b      	sxtb	r3, r3
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d103      	bne.n	8003436 <xQueueReceive+0x122>
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	b25b      	sxtb	r3, r3
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d103      	bne.n	800344c <xQueueReceive+0x138>
 8003444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800344c:	f001 fcd6 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003450:	1d3a      	adds	r2, r7, #4
 8003452:	f107 0310 	add.w	r3, r7, #16
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f000 fe77 	bl	800414c <xTaskCheckForTimeOut>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d123      	bne.n	80034ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003466:	f000 f917 	bl	8003698 <prvIsQueueEmpty>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d017      	beq.n	80034a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003472:	3324      	adds	r3, #36	; 0x24
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	4611      	mov	r1, r2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 fd9d 	bl	8003fb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800347e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003480:	f000 f8b8 	bl	80035f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003484:	f000 fbd2 	bl	8003c2c <xTaskResumeAll>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d189      	bne.n	80033a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800348e:	4b10      	ldr	r3, [pc, #64]	; (80034d0 <xQueueReceive+0x1bc>)
 8003490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	e780      	b.n	80033a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80034a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a2:	f000 f8a7 	bl	80035f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034a6:	f000 fbc1 	bl	8003c2c <xTaskResumeAll>
 80034aa:	e77a      	b.n	80033a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80034ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034ae:	f000 f8a1 	bl	80035f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034b2:	f000 fbbb 	bl	8003c2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034b8:	f000 f8ee 	bl	8003698 <prvIsQueueEmpty>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f43f af6f 	beq.w	80033a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80034c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3730      	adds	r7, #48	; 0x30
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000ed04 	.word	0xe000ed04

080034d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10d      	bne.n	800350e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d14d      	bne.n	8003596 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 ff8a 	bl	8004418 <xTaskPriorityDisinherit>
 8003504:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	e043      	b.n	8003596 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d119      	bne.n	8003548 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6898      	ldr	r0, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	461a      	mov	r2, r3
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	f001 ff3e 	bl	80053a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	d32b      	bcc.n	8003596 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	e026      	b.n	8003596 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68d8      	ldr	r0, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	461a      	mov	r2, r3
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	f001 ff24 	bl	80053a0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	425b      	negs	r3, r3
 8003562:	441a      	add	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d207      	bcs.n	8003584 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	685a      	ldr	r2, [r3, #4]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	425b      	negs	r3, r3
 800357e:	441a      	add	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d105      	bne.n	8003596 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3b01      	subs	r3, #1
 8003594:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1c5a      	adds	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800359e:	697b      	ldr	r3, [r7, #20]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d018      	beq.n	80035ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68da      	ldr	r2, [r3, #12]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	441a      	add	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d303      	bcc.n	80035dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68d9      	ldr	r1, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	461a      	mov	r2, r3
 80035e6:	6838      	ldr	r0, [r7, #0]
 80035e8:	f001 feda 	bl	80053a0 <memcpy>
	}
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035fc:	f001 fbce 	bl	8004d9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003606:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003608:	e011      	b.n	800362e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3324      	adds	r3, #36	; 0x24
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fd1e 	bl	8004058 <xTaskRemoveFromEventList>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003622:	f000 fdf5 	bl	8004210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	3b01      	subs	r3, #1
 800362a:	b2db      	uxtb	r3, r3
 800362c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800362e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	dce9      	bgt.n	800360a <prvUnlockQueue+0x16>
 8003636:	e000      	b.n	800363a <prvUnlockQueue+0x46>
					break;
 8003638:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003642:	f001 fbdb 	bl	8004dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003646:	f001 fba9 	bl	8004d9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003650:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003652:	e011      	b.n	8003678 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d012      	beq.n	8003682 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	3310      	adds	r3, #16
 8003660:	4618      	mov	r0, r3
 8003662:	f000 fcf9 	bl	8004058 <xTaskRemoveFromEventList>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d001      	beq.n	8003670 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800366c:	f000 fdd0 	bl	8004210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	3b01      	subs	r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003678:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800367c:	2b00      	cmp	r3, #0
 800367e:	dce9      	bgt.n	8003654 <prvUnlockQueue+0x60>
 8003680:	e000      	b.n	8003684 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003682:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	22ff      	movs	r2, #255	; 0xff
 8003688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800368c:	f001 fbb6 	bl	8004dfc <vPortExitCritical>
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036a0:	f001 fb7c 	bl	8004d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80036ac:	2301      	movs	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e001      	b.n	80036b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80036b2:	2300      	movs	r3, #0
 80036b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036b6:	f001 fba1 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 80036ba:	68fb      	ldr	r3, [r7, #12]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036cc:	f001 fb66 	bl	8004d9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d102      	bne.n	80036e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036dc:	2301      	movs	r3, #1
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	e001      	b.n	80036e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036e2:	2300      	movs	r3, #0
 80036e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036e6:	f001 fb89 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	e014      	b.n	800372e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003704:	4a0e      	ldr	r2, [pc, #56]	; (8003740 <vQueueAddToRegistry+0x4c>)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10b      	bne.n	8003728 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003710:	490b      	ldr	r1, [pc, #44]	; (8003740 <vQueueAddToRegistry+0x4c>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	683a      	ldr	r2, [r7, #0]
 8003716:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800371a:	4a09      	ldr	r2, [pc, #36]	; (8003740 <vQueueAddToRegistry+0x4c>)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003726:	e006      	b.n	8003736 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b07      	cmp	r3, #7
 8003732:	d9e7      	bls.n	8003704 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003734:	bf00      	nop
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr
 8003740:	20000818 	.word	0x20000818

08003744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003754:	f001 fb22 	bl	8004d9c <vPortEnterCritical>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800375e:	b25b      	sxtb	r3, r3
 8003760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003764:	d103      	bne.n	800376e <vQueueWaitForMessageRestricted+0x2a>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003774:	b25b      	sxtb	r3, r3
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	d103      	bne.n	8003784 <vQueueWaitForMessageRestricted+0x40>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003784:	f001 fb3a 	bl	8004dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	2b00      	cmp	r3, #0
 800378e:	d106      	bne.n	800379e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	3324      	adds	r3, #36	; 0x24
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fc31 	bl	8004000 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff28 	bl	80035f4 <prvUnlockQueue>
	}
 80037a4:	bf00      	nop
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	623b      	str	r3, [r7, #32]
}
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	61fb      	str	r3, [r7, #28]
}
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037f2:	235c      	movs	r3, #92	; 0x5c
 80037f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b5c      	cmp	r3, #92	; 0x5c
 80037fa:	d00a      	beq.n	8003812 <xTaskCreateStatic+0x66>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	61bb      	str	r3, [r7, #24]
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01e      	beq.n	8003856 <xTaskCreateStatic+0xaa>
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	2b00      	cmp	r3, #0
 800381c:	d01b      	beq.n	8003856 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003826:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	2202      	movs	r2, #2
 800382c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003830:	2300      	movs	r3, #0
 8003832:	9303      	str	r3, [sp, #12]
 8003834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003836:	9302      	str	r3, [sp, #8]
 8003838:	f107 0314 	add.w	r3, r7, #20
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	68b9      	ldr	r1, [r7, #8]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f850 	bl	80038ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003850:	f000 f8d4 	bl	80039fc <prvAddNewTaskToReadyList>
 8003854:	e001      	b.n	800385a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800385a:	697b      	ldr	r3, [r7, #20]
	}
 800385c:	4618      	mov	r0, r3
 800385e:	3728      	adds	r7, #40	; 0x28
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	; 0x30
 8003868:	af04      	add	r7, sp, #16
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fb8f 	bl	8004f9c <pvPortMalloc>
 800387e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00e      	beq.n	80038a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003886:	205c      	movs	r0, #92	; 0x5c
 8003888:	f001 fb88 	bl	8004f9c <pvPortMalloc>
 800388c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	697a      	ldr	r2, [r7, #20]
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
 800389a:	e005      	b.n	80038a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f001 fc41 	bl	8005124 <vPortFree>
 80038a2:	e001      	b.n	80038a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d017      	beq.n	80038de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	2300      	movs	r3, #0
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	68b9      	ldr	r1, [r7, #8]
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f80e 	bl	80038ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038d2:	69f8      	ldr	r0, [r7, #28]
 80038d4:	f000 f892 	bl	80039fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d8:	2301      	movs	r3, #1
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	e002      	b.n	80038e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038de:	f04f 33ff 	mov.w	r3, #4294967295
 80038e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e4:	69bb      	ldr	r3, [r7, #24]
	}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3720      	adds	r7, #32
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ee:	b580      	push	{r7, lr}
 80038f0:	b088      	sub	sp, #32
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
 80038fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	461a      	mov	r2, r3
 8003906:	21a5      	movs	r1, #165	; 0xa5
 8003908:	f001 fd58 	bl	80053bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003916:	3b01      	subs	r3, #1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	f023 0307 	bic.w	r3, r3, #7
 8003924:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	617b      	str	r3, [r7, #20]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003946:	2300      	movs	r3, #0
 8003948:	61fb      	str	r3, [r7, #28]
 800394a:	e012      	b.n	8003972 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	7819      	ldrb	r1, [r3, #0]
 8003954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	4413      	add	r3, r2
 800395a:	3334      	adds	r3, #52	; 0x34
 800395c:	460a      	mov	r2, r1
 800395e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	4413      	add	r3, r2
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d006      	beq.n	800397a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3301      	adds	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	2b0f      	cmp	r3, #15
 8003976:	d9e9      	bls.n	800394c <prvInitialiseNewTask+0x5e>
 8003978:	e000      	b.n	800397c <prvInitialiseNewTask+0x8e>
		{
			break;
 800397a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003986:	2b37      	cmp	r3, #55	; 0x37
 8003988:	d901      	bls.n	800398e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800398a:	2337      	movs	r3, #55	; 0x37
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003992:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003996:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003998:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2200      	movs	r2, #0
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f98c 	bl	8002cc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	3318      	adds	r3, #24
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff f987 	bl	8002cc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2200      	movs	r2, #0
 80039ce:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	68f9      	ldr	r1, [r7, #12]
 80039dc:	69b8      	ldr	r0, [r7, #24]
 80039de:	f001 f8ef 	bl	8004bc0 <pxPortInitialiseStack>
 80039e2:	4602      	mov	r2, r0
 80039e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a04:	f001 f9ca 	bl	8004d9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a08:	4b2d      	ldr	r3, [pc, #180]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	4a2c      	ldr	r2, [pc, #176]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a12:	4b2c      	ldr	r3, [pc, #176]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d109      	bne.n	8003a2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a1a:	4a2a      	ldr	r2, [pc, #168]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <prvAddNewTaskToReadyList+0xc4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d110      	bne.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a28:	f000 fc16 	bl	8004258 <prvInitialiseTaskLists>
 8003a2c:	e00d      	b.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a2e:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <prvAddNewTaskToReadyList+0xcc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d802      	bhi.n	8003a4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a44:	4a1f      	ldr	r2, [pc, #124]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <prvAddNewTaskToReadyList+0xd0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	4a1e      	ldr	r2, [pc, #120]	; (8003acc <prvAddNewTaskToReadyList+0xd0>)
 8003a52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a54:	4b1d      	ldr	r3, [pc, #116]	; (8003acc <prvAddNewTaskToReadyList+0xd0>)
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <prvAddNewTaskToReadyList+0xd4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d903      	bls.n	8003a70 <prvAddNewTaskToReadyList+0x74>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <prvAddNewTaskToReadyList+0xd4>)
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4a15      	ldr	r2, [pc, #84]	; (8003ad4 <prvAddNewTaskToReadyList+0xd8>)
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4610      	mov	r0, r2
 8003a88:	f7ff f927 	bl	8002cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a8c:	f001 f9b6 	bl	8004dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a90:	4b0d      	ldr	r3, [pc, #52]	; (8003ac8 <prvAddNewTaskToReadyList+0xcc>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00e      	beq.n	8003ab6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <prvAddNewTaskToReadyList+0xc8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d207      	bcs.n	8003ab6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	; (8003ad8 <prvAddNewTaskToReadyList+0xdc>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000d2c 	.word	0x20000d2c
 8003ac4:	20000858 	.word	0x20000858
 8003ac8:	20000d38 	.word	0x20000d38
 8003acc:	20000d48 	.word	0x20000d48
 8003ad0:	20000d34 	.word	0x20000d34
 8003ad4:	2000085c 	.word	0x2000085c
 8003ad8:	e000ed04 	.word	0xe000ed04

08003adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d017      	beq.n	8003b1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <vTaskDelay+0x60>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <vTaskDelay+0x30>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	60bb      	str	r3, [r7, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	e7fe      	b.n	8003b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b0c:	f000 f880 	bl	8003c10 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b10:	2100      	movs	r1, #0
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fcee 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b18:	f000 f888 	bl	8003c2c <xTaskResumeAll>
 8003b1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b24:	4b06      	ldr	r3, [pc, #24]	; (8003b40 <vTaskDelay+0x64>)
 8003b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	f3bf 8f4f 	dsb	sy
 8003b30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000d54 	.word	0x20000d54
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b08a      	sub	sp, #40	; 0x28
 8003b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b52:	463a      	mov	r2, r7
 8003b54:	1d39      	adds	r1, r7, #4
 8003b56:	f107 0308 	add.w	r3, r7, #8
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7ff f860 	bl	8002c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b60:	6839      	ldr	r1, [r7, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	9202      	str	r2, [sp, #8]
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	460a      	mov	r2, r1
 8003b72:	4921      	ldr	r1, [pc, #132]	; (8003bf8 <vTaskStartScheduler+0xb4>)
 8003b74:	4821      	ldr	r0, [pc, #132]	; (8003bfc <vTaskStartScheduler+0xb8>)
 8003b76:	f7ff fe19 	bl	80037ac <xTaskCreateStatic>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4a20      	ldr	r2, [pc, #128]	; (8003c00 <vTaskStartScheduler+0xbc>)
 8003b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b80:	4b1f      	ldr	r3, [pc, #124]	; (8003c00 <vTaskStartScheduler+0xbc>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	617b      	str	r3, [r7, #20]
 8003b8c:	e001      	b.n	8003b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d102      	bne.n	8003b9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b98:	f000 fd00 	bl	800459c <xTimerCreateTimerTask>
 8003b9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d116      	bne.n	8003bd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	613b      	str	r3, [r7, #16]
}
 8003bb6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <vTaskStartScheduler+0xc0>)
 8003bba:	f04f 32ff 	mov.w	r2, #4294967295
 8003bbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bc0:	4b11      	ldr	r3, [pc, #68]	; (8003c08 <vTaskStartScheduler+0xc4>)
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bc6:	4b11      	ldr	r3, [pc, #68]	; (8003c0c <vTaskStartScheduler+0xc8>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bcc:	f001 f874 	bl	8004cb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003bd0:	e00e      	b.n	8003bf0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd8:	d10a      	bne.n	8003bf0 <vTaskStartScheduler+0xac>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60fb      	str	r3, [r7, #12]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <vTaskStartScheduler+0xaa>
}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08005cf8 	.word	0x08005cf8
 8003bfc:	08004229 	.word	0x08004229
 8003c00:	20000d50 	.word	0x20000d50
 8003c04:	20000d4c 	.word	0x20000d4c
 8003c08:	20000d38 	.word	0x20000d38
 8003c0c:	20000d30 	.word	0x20000d30

08003c10 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c10:	b480      	push	{r7}
 8003c12:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c14:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <vTaskSuspendAll+0x18>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	4a03      	ldr	r2, [pc, #12]	; (8003c28 <vTaskSuspendAll+0x18>)
 8003c1c:	6013      	str	r3, [r2, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bc80      	pop	{r7}
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	20000d54 	.word	0x20000d54

08003c2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c3a:	4b42      	ldr	r3, [pc, #264]	; (8003d44 <xTaskResumeAll+0x118>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10a      	bne.n	8003c58 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	603b      	str	r3, [r7, #0]
}
 8003c54:	bf00      	nop
 8003c56:	e7fe      	b.n	8003c56 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c58:	f001 f8a0 	bl	8004d9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c5c:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <xTaskResumeAll+0x118>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	4a38      	ldr	r2, [pc, #224]	; (8003d44 <xTaskResumeAll+0x118>)
 8003c64:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c66:	4b37      	ldr	r3, [pc, #220]	; (8003d44 <xTaskResumeAll+0x118>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d162      	bne.n	8003d34 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c6e:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <xTaskResumeAll+0x11c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d05e      	beq.n	8003d34 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c76:	e02f      	b.n	8003cd8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c78:	4b34      	ldr	r3, [pc, #208]	; (8003d4c <xTaskResumeAll+0x120>)
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3318      	adds	r3, #24
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7ff f883 	bl	8002d90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff f87e 	bl	8002d90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	4b2d      	ldr	r3, [pc, #180]	; (8003d50 <xTaskResumeAll+0x124>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d903      	bls.n	8003ca8 <xTaskResumeAll+0x7c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca4:	4a2a      	ldr	r2, [pc, #168]	; (8003d50 <xTaskResumeAll+0x124>)
 8003ca6:	6013      	str	r3, [r2, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4a27      	ldr	r2, [pc, #156]	; (8003d54 <xTaskResumeAll+0x128>)
 8003cb6:	441a      	add	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3304      	adds	r3, #4
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4610      	mov	r0, r2
 8003cc0:	f7ff f80b 	bl	8002cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	4b23      	ldr	r3, [pc, #140]	; (8003d58 <xTaskResumeAll+0x12c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d302      	bcc.n	8003cd8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cd2:	4b22      	ldr	r3, [pc, #136]	; (8003d5c <xTaskResumeAll+0x130>)
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd8:	4b1c      	ldr	r3, [pc, #112]	; (8003d4c <xTaskResumeAll+0x120>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1cb      	bne.n	8003c78 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ce6:	f000 fb55 	bl	8004394 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003cea:	4b1d      	ldr	r3, [pc, #116]	; (8003d60 <xTaskResumeAll+0x134>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d010      	beq.n	8003d18 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cf6:	f000 f845 	bl	8003d84 <xTaskIncrementTick>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d00:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <xTaskResumeAll+0x130>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f1      	bne.n	8003cf6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d12:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <xTaskResumeAll+0x134>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <xTaskResumeAll+0x130>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d009      	beq.n	8003d34 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d20:	2301      	movs	r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <xTaskResumeAll+0x138>)
 8003d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d34:	f001 f862 	bl	8004dfc <vPortExitCritical>

	return xAlreadyYielded;
 8003d38:	68bb      	ldr	r3, [r7, #8]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000d54 	.word	0x20000d54
 8003d48:	20000d2c 	.word	0x20000d2c
 8003d4c:	20000cec 	.word	0x20000cec
 8003d50:	20000d34 	.word	0x20000d34
 8003d54:	2000085c 	.word	0x2000085c
 8003d58:	20000858 	.word	0x20000858
 8003d5c:	20000d40 	.word	0x20000d40
 8003d60:	20000d3c 	.word	0x20000d3c
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d6e:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <xTaskGetTickCount+0x18>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d74:	687b      	ldr	r3, [r7, #4]
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bc80      	pop	{r7}
 8003d7e:	4770      	bx	lr
 8003d80:	20000d30 	.word	0x20000d30

08003d84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d8e:	4b51      	ldr	r3, [pc, #324]	; (8003ed4 <xTaskIncrementTick+0x150>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 808e 	bne.w	8003eb4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d98:	4b4f      	ldr	r3, [pc, #316]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003da0:	4a4d      	ldr	r2, [pc, #308]	; (8003ed8 <xTaskIncrementTick+0x154>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d120      	bne.n	8003dee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dac:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <xTaskIncrementTick+0x48>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	603b      	str	r3, [r7, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xTaskIncrementTick+0x46>
 8003dcc:	4b43      	ldr	r3, [pc, #268]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	4b43      	ldr	r3, [pc, #268]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a41      	ldr	r2, [pc, #260]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dd8:	6013      	str	r3, [r2, #0]
 8003dda:	4a41      	ldr	r2, [pc, #260]	; (8003ee0 <xTaskIncrementTick+0x15c>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b40      	ldr	r3, [pc, #256]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3301      	adds	r3, #1
 8003de6:	4a3f      	ldr	r2, [pc, #252]	; (8003ee4 <xTaskIncrementTick+0x160>)
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	f000 fad3 	bl	8004394 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d34e      	bcc.n	8003e96 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003df8:	4b38      	ldr	r3, [pc, #224]	; (8003edc <xTaskIncrementTick+0x158>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <xTaskIncrementTick+0x82>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <xTaskIncrementTick+0x84>
 8003e06:	2300      	movs	r3, #0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d004      	beq.n	8003e16 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0c:	4b36      	ldr	r3, [pc, #216]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e12:	601a      	str	r2, [r3, #0]
					break;
 8003e14:	e03f      	b.n	8003e96 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <xTaskIncrementTick+0x158>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d203      	bcs.n	8003e36 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e2e:	4a2e      	ldr	r2, [pc, #184]	; (8003ee8 <xTaskIncrementTick+0x164>)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6013      	str	r3, [r2, #0]
						break;
 8003e34:	e02f      	b.n	8003e96 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	3304      	adds	r3, #4
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe ffa8 	bl	8002d90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	3318      	adds	r3, #24
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe ff9f 	bl	8002d90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e56:	4b25      	ldr	r3, [pc, #148]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d903      	bls.n	8003e66 <xTaskIncrementTick+0xe2>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <xTaskIncrementTick+0x168>)
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4a1f      	ldr	r2, [pc, #124]	; (8003ef0 <xTaskIncrementTick+0x16c>)
 8003e74:	441a      	add	r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe ff2c 	bl	8002cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	4b1b      	ldr	r3, [pc, #108]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d3b3      	bcc.n	8003df8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003e90:	2301      	movs	r3, #1
 8003e92:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e94:	e7b0      	b.n	8003df8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e96:	4b17      	ldr	r3, [pc, #92]	; (8003ef4 <xTaskIncrementTick+0x170>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4914      	ldr	r1, [pc, #80]	; (8003ef0 <xTaskIncrementTick+0x16c>)
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d907      	bls.n	8003ebe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e004      	b.n	8003ebe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <xTaskIncrementTick+0x174>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3301      	adds	r3, #1
 8003eba:	4a0f      	ldr	r2, [pc, #60]	; (8003ef8 <xTaskIncrementTick+0x174>)
 8003ebc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003ebe:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <xTaskIncrementTick+0x178>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003eca:	697b      	ldr	r3, [r7, #20]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000d54 	.word	0x20000d54
 8003ed8:	20000d30 	.word	0x20000d30
 8003edc:	20000ce4 	.word	0x20000ce4
 8003ee0:	20000ce8 	.word	0x20000ce8
 8003ee4:	20000d44 	.word	0x20000d44
 8003ee8:	20000d4c 	.word	0x20000d4c
 8003eec:	20000d34 	.word	0x20000d34
 8003ef0:	2000085c 	.word	0x2000085c
 8003ef4:	20000858 	.word	0x20000858
 8003ef8:	20000d3c 	.word	0x20000d3c
 8003efc:	20000d40 	.word	0x20000d40

08003f00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f06:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <vTaskSwitchContext+0xa4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f0e:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <vTaskSwitchContext+0xa8>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f14:	e041      	b.n	8003f9a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <vTaskSwitchContext+0xa8>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <vTaskSwitchContext+0xac>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e010      	b.n	8003f46 <vTaskSwitchContext+0x46>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <vTaskSwitchContext+0x40>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	607b      	str	r3, [r7, #4]
}
 8003f3c:	bf00      	nop
 8003f3e:	e7fe      	b.n	8003f3e <vTaskSwitchContext+0x3e>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	491a      	ldr	r1, [pc, #104]	; (8003fb0 <vTaskSwitchContext+0xb0>)
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4413      	add	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0e4      	beq.n	8003f24 <vTaskSwitchContext+0x24>
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4413      	add	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <vTaskSwitchContext+0xb0>)
 8003f66:	4413      	add	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	605a      	str	r2, [r3, #4]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d104      	bne.n	8003f8a <vTaskSwitchContext+0x8a>
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	4a08      	ldr	r2, [pc, #32]	; (8003fb4 <vTaskSwitchContext+0xb4>)
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	4a05      	ldr	r2, [pc, #20]	; (8003fac <vTaskSwitchContext+0xac>)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6013      	str	r3, [r2, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	20000d54 	.word	0x20000d54
 8003fa8:	20000d40 	.word	0x20000d40
 8003fac:	20000d34 	.word	0x20000d34
 8003fb0:	2000085c 	.word	0x2000085c
 8003fb4:	20000858 	.word	0x20000858

08003fb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10a      	bne.n	8003fde <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fcc:	f383 8811 	msr	BASEPRI, r3
 8003fd0:	f3bf 8f6f 	isb	sy
 8003fd4:	f3bf 8f4f 	dsb	sy
 8003fd8:	60fb      	str	r3, [r7, #12]
}
 8003fda:	bf00      	nop
 8003fdc:	e7fe      	b.n	8003fdc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fde:	4b07      	ldr	r3, [pc, #28]	; (8003ffc <vTaskPlaceOnEventList+0x44>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7fe fe9a 	bl	8002d20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fec:	2101      	movs	r1, #1
 8003fee:	6838      	ldr	r0, [r7, #0]
 8003ff0:	f000 fa80 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
}
 8003ff4:	bf00      	nop
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20000858 	.word	0x20000858

08004000 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	617b      	str	r3, [r7, #20]
}
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <vTaskPlaceOnEventListRestricted+0x54>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3318      	adds	r3, #24
 800402e:	4619      	mov	r1, r3
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f7fe fe52 	bl	8002cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d002      	beq.n	8004042 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
 8004040:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	68b8      	ldr	r0, [r7, #8]
 8004046:	f000 fa55 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
	}
 800404a:	bf00      	nop
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000858 	.word	0x20000858

08004058 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60fb      	str	r3, [r7, #12]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	3318      	adds	r3, #24
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fe81 	bl	8002d90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <xTaskRemoveFromEventList+0xb0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d11d      	bne.n	80040d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	3304      	adds	r3, #4
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fe78 	bl	8002d90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <xTaskRemoveFromEventList+0xb4>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d903      	bls.n	80040b4 <xTaskRemoveFromEventList+0x5c>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <xTaskRemoveFromEventList+0xb4>)
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4a13      	ldr	r2, [pc, #76]	; (8004110 <xTaskRemoveFromEventList+0xb8>)
 80040c2:	441a      	add	r2, r3
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	3304      	adds	r3, #4
 80040c8:	4619      	mov	r1, r3
 80040ca:	4610      	mov	r0, r2
 80040cc:	f7fe fe05 	bl	8002cda <vListInsertEnd>
 80040d0:	e005      	b.n	80040de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3318      	adds	r3, #24
 80040d6:	4619      	mov	r1, r3
 80040d8:	480e      	ldr	r0, [pc, #56]	; (8004114 <xTaskRemoveFromEventList+0xbc>)
 80040da:	f7fe fdfe 	bl	8002cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <xTaskRemoveFromEventList+0xc0>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d905      	bls.n	80040f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	; (800411c <xTaskRemoveFromEventList+0xc4>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e001      	b.n	80040fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80040fc:	697b      	ldr	r3, [r7, #20]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3718      	adds	r7, #24
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000d54 	.word	0x20000d54
 800410c:	20000d34 	.word	0x20000d34
 8004110:	2000085c 	.word	0x2000085c
 8004114:	20000cec 	.word	0x20000cec
 8004118:	20000858 	.word	0x20000858
 800411c:	20000d40 	.word	0x20000d40

08004120 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <vTaskInternalSetTimeOutState+0x24>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <vTaskInternalSetTimeOutState+0x28>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	605a      	str	r2, [r3, #4]
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	20000d44 	.word	0x20000d44
 8004148:	20000d30 	.word	0x20000d30

0800414c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	613b      	str	r3, [r7, #16]
}
 800416e:	bf00      	nop
 8004170:	e7fe      	b.n	8004170 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417c:	f383 8811 	msr	BASEPRI, r3
 8004180:	f3bf 8f6f 	isb	sy
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	60fb      	str	r3, [r7, #12]
}
 800418a:	bf00      	nop
 800418c:	e7fe      	b.n	800418c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800418e:	f000 fe05 	bl	8004d9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <xTaskCheckForTimeOut+0xbc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d102      	bne.n	80041b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61fb      	str	r3, [r7, #28]
 80041b0:	e023      	b.n	80041fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	4b15      	ldr	r3, [pc, #84]	; (800420c <xTaskCheckForTimeOut+0xc0>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d007      	beq.n	80041ce <xTaskCheckForTimeOut+0x82>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041c8:	2301      	movs	r3, #1
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	e015      	b.n	80041fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d20b      	bcs.n	80041f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1ad2      	subs	r2, r2, r3
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff ff9b 	bl	8004120 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	61fb      	str	r3, [r7, #28]
 80041ee:	e004      	b.n	80041fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041fa:	f000 fdff 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 80041fe:	69fb      	ldr	r3, [r7, #28]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20000d30 	.word	0x20000d30
 800420c:	20000d44 	.word	0x20000d44

08004210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <vTaskMissedYield+0x14>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	bc80      	pop	{r7}
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000d40 	.word	0x20000d40

08004228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004230:	f000 f852 	bl	80042d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004234:	4b06      	ldr	r3, [pc, #24]	; (8004250 <prvIdleTask+0x28>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d9f9      	bls.n	8004230 <prvIdleTask+0x8>
			{
				taskYIELD();
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <prvIdleTask+0x2c>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800424c:	e7f0      	b.n	8004230 <prvIdleTask+0x8>
 800424e:	bf00      	nop
 8004250:	2000085c 	.word	0x2000085c
 8004254:	e000ed04 	.word	0xe000ed04

08004258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425e:	2300      	movs	r3, #0
 8004260:	607b      	str	r3, [r7, #4]
 8004262:	e00c      	b.n	800427e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <prvInitialiseTaskLists+0x60>)
 8004270:	4413      	add	r3, r2
 8004272:	4618      	mov	r0, r3
 8004274:	f7fe fd06 	bl	8002c84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3301      	adds	r3, #1
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b37      	cmp	r3, #55	; 0x37
 8004282:	d9ef      	bls.n	8004264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004284:	480d      	ldr	r0, [pc, #52]	; (80042bc <prvInitialiseTaskLists+0x64>)
 8004286:	f7fe fcfd 	bl	8002c84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800428a:	480d      	ldr	r0, [pc, #52]	; (80042c0 <prvInitialiseTaskLists+0x68>)
 800428c:	f7fe fcfa 	bl	8002c84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004290:	480c      	ldr	r0, [pc, #48]	; (80042c4 <prvInitialiseTaskLists+0x6c>)
 8004292:	f7fe fcf7 	bl	8002c84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004296:	480c      	ldr	r0, [pc, #48]	; (80042c8 <prvInitialiseTaskLists+0x70>)
 8004298:	f7fe fcf4 	bl	8002c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800429c:	480b      	ldr	r0, [pc, #44]	; (80042cc <prvInitialiseTaskLists+0x74>)
 800429e:	f7fe fcf1 	bl	8002c84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042a2:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <prvInitialiseTaskLists+0x78>)
 80042a4:	4a05      	ldr	r2, [pc, #20]	; (80042bc <prvInitialiseTaskLists+0x64>)
 80042a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a8:	4b0a      	ldr	r3, [pc, #40]	; (80042d4 <prvInitialiseTaskLists+0x7c>)
 80042aa:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <prvInitialiseTaskLists+0x68>)
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	2000085c 	.word	0x2000085c
 80042bc:	20000cbc 	.word	0x20000cbc
 80042c0:	20000cd0 	.word	0x20000cd0
 80042c4:	20000cec 	.word	0x20000cec
 80042c8:	20000d00 	.word	0x20000d00
 80042cc:	20000d18 	.word	0x20000d18
 80042d0:	20000ce4 	.word	0x20000ce4
 80042d4:	20000ce8 	.word	0x20000ce8

080042d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042de:	e019      	b.n	8004314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042e0:	f000 fd5c 	bl	8004d9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80042e4:	4b10      	ldr	r3, [pc, #64]	; (8004328 <prvCheckTasksWaitingTermination+0x50>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fd4d 	bl	8002d90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042f6:	4b0d      	ldr	r3, [pc, #52]	; (800432c <prvCheckTasksWaitingTermination+0x54>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4a0b      	ldr	r2, [pc, #44]	; (800432c <prvCheckTasksWaitingTermination+0x54>)
 80042fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <prvCheckTasksWaitingTermination+0x58>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3b01      	subs	r3, #1
 8004306:	4a0a      	ldr	r2, [pc, #40]	; (8004330 <prvCheckTasksWaitingTermination+0x58>)
 8004308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800430a:	f000 fd77 	bl	8004dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f810 	bl	8004334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004314:	4b06      	ldr	r3, [pc, #24]	; (8004330 <prvCheckTasksWaitingTermination+0x58>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e1      	bne.n	80042e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000d00 	.word	0x20000d00
 800432c:	20000d2c 	.word	0x20000d2c
 8004330:	20000d14 	.word	0x20000d14

08004334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	4618      	mov	r0, r3
 800434c:	f000 feea 	bl	8005124 <vPortFree>
				vPortFree( pxTCB );
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fee7 	bl	8005124 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004356:	e018      	b.n	800438a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800435e:	2b01      	cmp	r3, #1
 8004360:	d103      	bne.n	800436a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fede 	bl	8005124 <vPortFree>
	}
 8004368:	e00f      	b.n	800438a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004370:	2b02      	cmp	r3, #2
 8004372:	d00a      	beq.n	800438a <prvDeleteTCB+0x56>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <prvDeleteTCB+0x54>
	}
 800438a:	bf00      	nop
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439a:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <prvResetNextTaskUnblockTime+0x40>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <prvResetNextTaskUnblockTime+0x14>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e000      	b.n	80043aa <prvResetNextTaskUnblockTime+0x16>
 80043a8:	2300      	movs	r3, #0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d004      	beq.n	80043b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043ae:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <prvResetNextTaskUnblockTime+0x44>)
 80043b0:	f04f 32ff 	mov.w	r2, #4294967295
 80043b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043b6:	e008      	b.n	80043ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <prvResetNextTaskUnblockTime+0x40>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4a04      	ldr	r2, [pc, #16]	; (80043d8 <prvResetNextTaskUnblockTime+0x44>)
 80043c8:	6013      	str	r3, [r2, #0]
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr
 80043d4:	20000ce4 	.word	0x20000ce4
 80043d8:	20000d4c 	.word	0x20000d4c

080043dc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043e2:	4b0b      	ldr	r3, [pc, #44]	; (8004410 <xTaskGetSchedulerState+0x34>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043ea:	2301      	movs	r3, #1
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	e008      	b.n	8004402 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f0:	4b08      	ldr	r3, [pc, #32]	; (8004414 <xTaskGetSchedulerState+0x38>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d102      	bne.n	80043fe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043f8:	2302      	movs	r3, #2
 80043fa:	607b      	str	r3, [r7, #4]
 80043fc:	e001      	b.n	8004402 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004402:	687b      	ldr	r3, [r7, #4]
	}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop
 8004410:	20000d38 	.word	0x20000d38
 8004414:	20000d54 	.word	0x20000d54

08004418 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004424:	2300      	movs	r3, #0
 8004426:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d056      	beq.n	80044dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800442e:	4b2e      	ldr	r3, [pc, #184]	; (80044e8 <xTaskPriorityDisinherit+0xd0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	429a      	cmp	r2, r3
 8004436:	d00a      	beq.n	800444e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443c:	f383 8811 	msr	BASEPRI, r3
 8004440:	f3bf 8f6f 	isb	sy
 8004444:	f3bf 8f4f 	dsb	sy
 8004448:	60fb      	str	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	e7fe      	b.n	800444c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445a:	f383 8811 	msr	BASEPRI, r3
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	60bb      	str	r3, [r7, #8]
}
 8004468:	bf00      	nop
 800446a:	e7fe      	b.n	800446a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447e:	429a      	cmp	r2, r3
 8004480:	d02c      	beq.n	80044dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	2b00      	cmp	r3, #0
 8004488:	d128      	bne.n	80044dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fc7e 	bl	8002d90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ac:	4b0f      	ldr	r3, [pc, #60]	; (80044ec <xTaskPriorityDisinherit+0xd4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <xTaskPriorityDisinherit+0xa4>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4a0c      	ldr	r2, [pc, #48]	; (80044ec <xTaskPriorityDisinherit+0xd4>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a09      	ldr	r2, [pc, #36]	; (80044f0 <xTaskPriorityDisinherit+0xd8>)
 80044ca:	441a      	add	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f7fe fc01 	bl	8002cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044dc:	697b      	ldr	r3, [r7, #20]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000858 	.word	0x20000858
 80044ec:	20000d34 	.word	0x20000d34
 80044f0:	2000085c 	.word	0x2000085c

080044f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044fe:	4b21      	ldr	r3, [pc, #132]	; (8004584 <prvAddCurrentTaskToDelayedList+0x90>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004504:	4b20      	ldr	r3, [pc, #128]	; (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fc40 	bl	8002d90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d10a      	bne.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451e:	4b1a      	ldr	r3, [pc, #104]	; (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4819      	ldr	r0, [pc, #100]	; (800458c <prvAddCurrentTaskToDelayedList+0x98>)
 8004528:	f7fe fbd7 	bl	8002cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800452c:	e026      	b.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004536:	4b14      	ldr	r3, [pc, #80]	; (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	d209      	bcs.n	800455a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7fe fbe4 	bl	8002d20 <vListInsert>
}
 8004558:	e010      	b.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800455a:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f7fe fbda 	bl	8002d20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d202      	bcs.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000d30 	.word	0x20000d30
 8004588:	20000858 	.word	0x20000858
 800458c:	20000d18 	.word	0x20000d18
 8004590:	20000ce8 	.word	0x20000ce8
 8004594:	20000ce4 	.word	0x20000ce4
 8004598:	20000d4c 	.word	0x20000d4c

0800459c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	; 0x28
 80045a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045a6:	f000 facb 	bl	8004b40 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045aa:	4b1c      	ldr	r3, [pc, #112]	; (800461c <xTimerCreateTimerTask+0x80>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d021      	beq.n	80045f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ba:	1d3a      	adds	r2, r7, #4
 80045bc:	f107 0108 	add.w	r1, r7, #8
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fb43 	bl	8002c50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	9202      	str	r2, [sp, #8]
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	2302      	movs	r3, #2
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	460a      	mov	r2, r1
 80045dc:	4910      	ldr	r1, [pc, #64]	; (8004620 <xTimerCreateTimerTask+0x84>)
 80045de:	4811      	ldr	r0, [pc, #68]	; (8004624 <xTimerCreateTimerTask+0x88>)
 80045e0:	f7ff f8e4 	bl	80037ac <xTaskCreateStatic>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <xTimerCreateTimerTask+0x8c>)
 80045e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ea:	4b0f      	ldr	r3, [pc, #60]	; (8004628 <xTimerCreateTimerTask+0x8c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	613b      	str	r3, [r7, #16]
}
 800460e:	bf00      	nop
 8004610:	e7fe      	b.n	8004610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004612:	697b      	ldr	r3, [r7, #20]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	20000d88 	.word	0x20000d88
 8004620:	08005d00 	.word	0x08005d00
 8004624:	08004749 	.word	0x08004749
 8004628:	20000d8c 	.word	0x20000d8c

0800462c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800463a:	2300      	movs	r3, #0
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	623b      	str	r3, [r7, #32]
}
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800465a:	4b1a      	ldr	r3, [pc, #104]	; (80046c4 <xTimerGenericCommand+0x98>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d02a      	beq.n	80046b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b05      	cmp	r3, #5
 8004672:	dc18      	bgt.n	80046a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004674:	f7ff feb2 	bl	80043dc <xTaskGetSchedulerState>
 8004678:	4603      	mov	r3, r0
 800467a:	2b02      	cmp	r3, #2
 800467c:	d109      	bne.n	8004692 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800467e:	4b11      	ldr	r3, [pc, #68]	; (80046c4 <xTimerGenericCommand+0x98>)
 8004680:	6818      	ldr	r0, [r3, #0]
 8004682:	f107 0110 	add.w	r1, r7, #16
 8004686:	2300      	movs	r3, #0
 8004688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468a:	f7fe fcad 	bl	8002fe8 <xQueueGenericSend>
 800468e:	6278      	str	r0, [r7, #36]	; 0x24
 8004690:	e012      	b.n	80046b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <xTimerGenericCommand+0x98>)
 8004694:	6818      	ldr	r0, [r3, #0]
 8004696:	f107 0110 	add.w	r1, r7, #16
 800469a:	2300      	movs	r3, #0
 800469c:	2200      	movs	r2, #0
 800469e:	f7fe fca3 	bl	8002fe8 <xQueueGenericSend>
 80046a2:	6278      	str	r0, [r7, #36]	; 0x24
 80046a4:	e008      	b.n	80046b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046a6:	4b07      	ldr	r3, [pc, #28]	; (80046c4 <xTimerGenericCommand+0x98>)
 80046a8:	6818      	ldr	r0, [r3, #0]
 80046aa:	f107 0110 	add.w	r1, r7, #16
 80046ae:	2300      	movs	r3, #0
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	f7fe fd97 	bl	80031e4 <xQueueGenericSendFromISR>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20000d88 	.word	0x20000d88

080046c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80046d2:	4b1c      	ldr	r3, [pc, #112]	; (8004744 <prvProcessExpiredTimer+0x7c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	3304      	adds	r3, #4
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fe fb55 	bl	8002d90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d122      	bne.n	8004734 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	18d1      	adds	r1, r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f000 f8c8 	bl	8004890 <prvInsertTimerInActiveList>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d016      	beq.n	8004734 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	2100      	movs	r1, #0
 8004710:	6978      	ldr	r0, [r7, #20]
 8004712:	f7ff ff8b 	bl	800462c <xTimerGenericCommand>
 8004716:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800471e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004722:	f383 8811 	msr	BASEPRI, r3
 8004726:	f3bf 8f6f 	isb	sy
 800472a:	f3bf 8f4f 	dsb	sy
 800472e:	60fb      	str	r3, [r7, #12]
}
 8004730:	bf00      	nop
 8004732:	e7fe      	b.n	8004732 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	6978      	ldr	r0, [r7, #20]
 800473a:	4798      	blx	r3
}
 800473c:	bf00      	nop
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20000d80 	.word	0x20000d80

08004748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004750:	f107 0308 	add.w	r3, r7, #8
 8004754:	4618      	mov	r0, r3
 8004756:	f000 f857 	bl	8004808 <prvGetNextExpireTime>
 800475a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4619      	mov	r1, r3
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f803 	bl	800476c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004766:	f000 f8d5 	bl	8004914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800476a:	e7f1      	b.n	8004750 <prvTimerTask+0x8>

0800476c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004776:	f7ff fa4b 	bl	8003c10 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800477a:	f107 0308 	add.w	r3, r7, #8
 800477e:	4618      	mov	r0, r3
 8004780:	f000 f866 	bl	8004850 <prvSampleTimeNow>
 8004784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d130      	bne.n	80047ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10a      	bne.n	80047a8 <prvProcessTimerOrBlockTask+0x3c>
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	429a      	cmp	r2, r3
 8004798:	d806      	bhi.n	80047a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800479a:	f7ff fa47 	bl	8003c2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800479e:	68f9      	ldr	r1, [r7, #12]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff91 	bl	80046c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047a6:	e024      	b.n	80047f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047ae:	4b13      	ldr	r3, [pc, #76]	; (80047fc <prvProcessTimerOrBlockTask+0x90>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	bf0c      	ite	eq
 80047b8:	2301      	moveq	r3, #1
 80047ba:	2300      	movne	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <prvProcessTimerOrBlockTask+0x94>)
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	4619      	mov	r1, r3
 80047ce:	f7fe ffb9 	bl	8003744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047d2:	f7ff fa2b 	bl	8003c2c <xTaskResumeAll>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <prvProcessTimerOrBlockTask+0x98>)
 80047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	f3bf 8f4f 	dsb	sy
 80047e8:	f3bf 8f6f 	isb	sy
}
 80047ec:	e001      	b.n	80047f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80047ee:	f7ff fa1d 	bl	8003c2c <xTaskResumeAll>
}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000d84 	.word	0x20000d84
 8004800:	20000d88 	.word	0x20000d88
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <prvGetNextExpireTime+0x44>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf0c      	ite	eq
 800481a:	2301      	moveq	r3, #1
 800481c:	2300      	movne	r3, #0
 800481e:	b2db      	uxtb	r3, r3
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800482e:	4b07      	ldr	r3, [pc, #28]	; (800484c <prvGetNextExpireTime+0x44>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e001      	b.n	800483e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800483a:	2300      	movs	r3, #0
 800483c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800483e:	68fb      	ldr	r3, [r7, #12]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000d80 	.word	0x20000d80

08004850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004858:	f7ff fa86 	bl	8003d68 <xTaskGetTickCount>
 800485c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <prvSampleTimeNow+0x3c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	429a      	cmp	r2, r3
 8004866:	d205      	bcs.n	8004874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004868:	f000 f908 	bl	8004a7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]
 8004872:	e002      	b.n	800487a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800487a:	4a04      	ldr	r2, [pc, #16]	; (800488c <prvSampleTimeNow+0x3c>)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004880:	68fb      	ldr	r3, [r7, #12]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000d90 	.word	0x20000d90

08004890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d812      	bhi.n	80048dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d302      	bcc.n	80048ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048c4:	2301      	movs	r3, #1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	e01b      	b.n	8004902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <prvInsertTimerInActiveList+0x7c>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7fe fa23 	bl	8002d20 <vListInsert>
 80048da:	e012      	b.n	8004902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d206      	bcs.n	80048f2 <prvInsertTimerInActiveList+0x62>
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d302      	bcc.n	80048f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80048ec:	2301      	movs	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e007      	b.n	8004902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80048f2:	4b07      	ldr	r3, [pc, #28]	; (8004910 <prvInsertTimerInActiveList+0x80>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	3304      	adds	r3, #4
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7fe fa0f 	bl	8002d20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004902:	697b      	ldr	r3, [r7, #20]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3718      	adds	r7, #24
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	20000d84 	.word	0x20000d84
 8004910:	20000d80 	.word	0x20000d80

08004914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	; 0x38
 8004918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800491a:	e09d      	b.n	8004a58 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da18      	bge.n	8004954 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004922:	1d3b      	adds	r3, r7, #4
 8004924:	3304      	adds	r3, #4
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61fb      	str	r3, [r7, #28]
}
 8004940:	bf00      	nop
 8004942:	e7fe      	b.n	8004942 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494a:	6850      	ldr	r0, [r2, #4]
 800494c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494e:	6892      	ldr	r2, [r2, #8]
 8004950:	4611      	mov	r1, r2
 8004952:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	db7d      	blt.n	8004a56 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d004      	beq.n	8004970 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004968:	3304      	adds	r3, #4
 800496a:	4618      	mov	r0, r3
 800496c:	f7fe fa10 	bl	8002d90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004970:	463b      	mov	r3, r7
 8004972:	4618      	mov	r0, r3
 8004974:	f7ff ff6c 	bl	8004850 <prvSampleTimeNow>
 8004978:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b09      	cmp	r3, #9
 800497e:	d86b      	bhi.n	8004a58 <prvProcessReceivedCommands+0x144>
 8004980:	a201      	add	r2, pc, #4	; (adr r2, 8004988 <prvProcessReceivedCommands+0x74>)
 8004982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004986:	bf00      	nop
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b1 	.word	0x080049b1
 8004990:	080049b1 	.word	0x080049b1
 8004994:	08004a59 	.word	0x08004a59
 8004998:	08004a0d 	.word	0x08004a0d
 800499c:	08004a45 	.word	0x08004a45
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049b1 	.word	0x080049b1
 80049a8:	08004a59 	.word	0x08004a59
 80049ac:	08004a0d 	.word	0x08004a0d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049b0:	68ba      	ldr	r2, [r7, #8]
 80049b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	18d1      	adds	r1, r2, r3
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049be:	f7ff ff67 	bl	8004890 <prvInsertTimerInActiveList>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d047      	beq.n	8004a58 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d13f      	bne.n	8004a58 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	441a      	add	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2300      	movs	r3, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049ea:	f7ff fe1f 	bl	800462c <xTimerGenericCommand>
 80049ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d130      	bne.n	8004a58 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61bb      	str	r3, [r7, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	e7fe      	b.n	8004a0a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10a      	bne.n	8004a30 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	617b      	str	r3, [r7, #20]
}
 8004a2c:	bf00      	nop
 8004a2e:	e7fe      	b.n	8004a2e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	699a      	ldr	r2, [r3, #24]
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	18d1      	adds	r1, r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3e:	f7ff ff27 	bl	8004890 <prvInsertTimerInActiveList>
					break;
 8004a42:	e009      	b.n	8004a58 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d104      	bne.n	8004a58 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a50:	f000 fb68 	bl	8005124 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a54:	e000      	b.n	8004a58 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a58:	4b07      	ldr	r3, [pc, #28]	; (8004a78 <prvProcessReceivedCommands+0x164>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	1d39      	adds	r1, r7, #4
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe fc57 	bl	8003314 <xQueueReceive>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f47f af57 	bne.w	800491c <prvProcessReceivedCommands+0x8>
	}
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	3730      	adds	r7, #48	; 0x30
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	20000d88 	.word	0x20000d88

08004a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a82:	e045      	b.n	8004b10 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a84:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a8e:	4b2a      	ldr	r3, [pc, #168]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe f977 	bl	8002d90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d12e      	bne.n	8004b10 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d90e      	bls.n	8004ae2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f7fe f920 	bl	8002d20 <vListInsert>
 8004ae0:	e016      	b.n	8004b10 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	2100      	movs	r1, #0
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f7ff fd9d 	bl	800462c <xTimerGenericCommand>
 8004af2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	603b      	str	r3, [r7, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1b4      	bne.n	8004a84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b1a:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b20:	4b06      	ldr	r3, [pc, #24]	; (8004b3c <prvSwitchTimerLists+0xc0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <prvSwitchTimerLists+0xbc>)
 8004b26:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b28:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <prvSwitchTimerLists+0xc0>)
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	6013      	str	r3, [r2, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	20000d80 	.word	0x20000d80
 8004b3c:	20000d84 	.word	0x20000d84

08004b40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b46:	f000 f929 	bl	8004d9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b4a:	4b15      	ldr	r3, [pc, #84]	; (8004ba0 <prvCheckForValidListAndQueue+0x60>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d120      	bne.n	8004b94 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b52:	4814      	ldr	r0, [pc, #80]	; (8004ba4 <prvCheckForValidListAndQueue+0x64>)
 8004b54:	f7fe f896 	bl	8002c84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b58:	4813      	ldr	r0, [pc, #76]	; (8004ba8 <prvCheckForValidListAndQueue+0x68>)
 8004b5a:	f7fe f893 	bl	8002c84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b5e:	4b13      	ldr	r3, [pc, #76]	; (8004bac <prvCheckForValidListAndQueue+0x6c>)
 8004b60:	4a10      	ldr	r2, [pc, #64]	; (8004ba4 <prvCheckForValidListAndQueue+0x64>)
 8004b62:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b64:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <prvCheckForValidListAndQueue+0x70>)
 8004b66:	4a10      	ldr	r2, [pc, #64]	; (8004ba8 <prvCheckForValidListAndQueue+0x68>)
 8004b68:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4b11      	ldr	r3, [pc, #68]	; (8004bb4 <prvCheckForValidListAndQueue+0x74>)
 8004b70:	4a11      	ldr	r2, [pc, #68]	; (8004bb8 <prvCheckForValidListAndQueue+0x78>)
 8004b72:	2110      	movs	r1, #16
 8004b74:	200a      	movs	r0, #10
 8004b76:	f7fe f99d 	bl	8002eb4 <xQueueGenericCreateStatic>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4a08      	ldr	r2, [pc, #32]	; (8004ba0 <prvCheckForValidListAndQueue+0x60>)
 8004b7e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <prvCheckForValidListAndQueue+0x60>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <prvCheckForValidListAndQueue+0x60>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	490b      	ldr	r1, [pc, #44]	; (8004bbc <prvCheckForValidListAndQueue+0x7c>)
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe fdb0 	bl	80036f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b94:	f000 f932 	bl	8004dfc <vPortExitCritical>
}
 8004b98:	bf00      	nop
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	20000d88 	.word	0x20000d88
 8004ba4:	20000d58 	.word	0x20000d58
 8004ba8:	20000d6c 	.word	0x20000d6c
 8004bac:	20000d80 	.word	0x20000d80
 8004bb0:	20000d84 	.word	0x20000d84
 8004bb4:	20000e34 	.word	0x20000e34
 8004bb8:	20000d94 	.word	0x20000d94
 8004bbc:	08005d08 	.word	0x08005d08

08004bc0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3b04      	subs	r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004bd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	3b04      	subs	r3, #4
 8004bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bf0:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <pxPortInitialiseStack+0x54>)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b14      	subs	r3, #20
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b20      	subs	r3, #32
 8004c06:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c08:	68fb      	ldr	r3, [r7, #12]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr
 8004c14:	08004c19 	.word	0x08004c19

08004c18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <prvTaskExitError+0x54>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d00a      	beq.n	8004c42 <prvTaskExitError+0x2a>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60fb      	str	r3, [r7, #12]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <prvTaskExitError+0x28>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	f383 8811 	msr	BASEPRI, r3
 8004c4a:	f3bf 8f6f 	isb	sy
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	60bb      	str	r3, [r7, #8]
}
 8004c54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c56:	bf00      	nop
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0fc      	beq.n	8004c58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c5e:	bf00      	nop
 8004c60:	bf00      	nop
 8004c62:	3714      	adds	r7, #20
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bc80      	pop	{r7}
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	2000000c 	.word	0x2000000c

08004c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <pxCurrentTCBConst2>)
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	6808      	ldr	r0, [r1, #0]
 8004c76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004c7a:	f380 8809 	msr	PSP, r0
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f380 8811 	msr	BASEPRI, r0
 8004c8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004c8e:	4770      	bx	lr

08004c90 <pxCurrentTCBConst2>:
 8004c90:	20000858 	.word	0x20000858
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop

08004c98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004c98:	4806      	ldr	r0, [pc, #24]	; (8004cb4 <prvPortStartFirstTask+0x1c>)
 8004c9a:	6800      	ldr	r0, [r0, #0]
 8004c9c:	6800      	ldr	r0, [r0, #0]
 8004c9e:	f380 8808 	msr	MSP, r0
 8004ca2:	b662      	cpsie	i
 8004ca4:	b661      	cpsie	f
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	df00      	svc	0
 8004cb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed08 	.word	0xe000ed08

08004cb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cbe:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <xPortStartScheduler+0xd0>)
 8004cc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	22ff      	movs	r2, #255	; 0xff
 8004cce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ce0:	b2da      	uxtb	r2, r3
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <xPortStartScheduler+0xd4>)
 8004ce4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004ce6:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004ce8:	2207      	movs	r2, #7
 8004cea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cec:	e009      	b.n	8004d02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004cee:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004cf6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cf8:	78fb      	ldrb	r3, [r7, #3]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	005b      	lsls	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d02:	78fb      	ldrb	r3, [r7, #3]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0a:	2b80      	cmp	r3, #128	; 0x80
 8004d0c:	d0ef      	beq.n	8004cee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d0e:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f1c3 0307 	rsb	r3, r3, #7
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d00a      	beq.n	8004d30 <xPortStartScheduler+0x78>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60bb      	str	r3, [r7, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d30:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	021b      	lsls	r3, r3, #8
 8004d36:	4a16      	ldr	r2, [pc, #88]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004d38:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d3a:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <xPortStartScheduler+0xd8>)
 8004d44:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d4e:	4b11      	ldr	r3, [pc, #68]	; (8004d94 <xPortStartScheduler+0xdc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a10      	ldr	r2, [pc, #64]	; (8004d94 <xPortStartScheduler+0xdc>)
 8004d54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d5a:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <xPortStartScheduler+0xdc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a0d      	ldr	r2, [pc, #52]	; (8004d94 <xPortStartScheduler+0xdc>)
 8004d60:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d64:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d66:	f000 f8b9 	bl	8004edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <xPortStartScheduler+0xe0>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d70:	f7ff ff92 	bl	8004c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d74:	f7ff f8c4 	bl	8003f00 <vTaskSwitchContext>
	prvTaskExitError();
 8004d78:	f7ff ff4e 	bl	8004c18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	e000e400 	.word	0xe000e400
 8004d8c:	20000e84 	.word	0x20000e84
 8004d90:	20000e88 	.word	0x20000e88
 8004d94:	e000ed20 	.word	0xe000ed20
 8004d98:	2000000c 	.word	0x2000000c

08004d9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	607b      	str	r3, [r7, #4]
}
 8004db4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004db6:	4b0f      	ldr	r3, [pc, #60]	; (8004df4 <vPortEnterCritical+0x58>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <vPortEnterCritical+0x58>)
 8004dbe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dc0:	4b0c      	ldr	r3, [pc, #48]	; (8004df4 <vPortEnterCritical+0x58>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d10f      	bne.n	8004de8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <vPortEnterCritical+0x5c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	603b      	str	r3, [r7, #0]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vPortEnterCritical+0x4a>
	}
}
 8004de8:	bf00      	nop
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e02:	4b11      	ldr	r3, [pc, #68]	; (8004e48 <vPortExitCritical+0x4c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10a      	bne.n	8004e20 <vPortExitCritical+0x24>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	607b      	str	r3, [r7, #4]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e20:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <vPortExitCritical+0x4c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	4a08      	ldr	r2, [pc, #32]	; (8004e48 <vPortExitCritical+0x4c>)
 8004e28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <vPortExitCritical+0x4c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <vPortExitCritical+0x42>
 8004e32:	2300      	movs	r3, #0
 8004e34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	f383 8811 	msr	BASEPRI, r3
}
 8004e3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e3e:	bf00      	nop
 8004e40:	370c      	adds	r7, #12
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr
 8004e48:	2000000c 	.word	0x2000000c
 8004e4c:	00000000 	.word	0x00000000

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b0d      	ldr	r3, [pc, #52]	; (8004e90 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e60:	6010      	str	r0, [r2, #0]
 8004e62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e6a:	f380 8811 	msr	BASEPRI, r0
 8004e6e:	f7ff f847 	bl	8003f00 <vTaskSwitchContext>
 8004e72:	f04f 0000 	mov.w	r0, #0
 8004e76:	f380 8811 	msr	BASEPRI, r0
 8004e7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e86:	f380 8809 	msr	PSP, r0
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	4770      	bx	lr

08004e90 <pxCurrentTCBConst>:
 8004e90:	20000858 	.word	0x20000858
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop

08004e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	607b      	str	r3, [r7, #4]
}
 8004eb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004eb2:	f7fe ff67 	bl	8003d84 <xTaskIncrementTick>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ebc:	4b06      	ldr	r3, [pc, #24]	; (8004ed8 <SysTick_Handler+0x40>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	f383 8811 	msr	BASEPRI, r3
}
 8004ece:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <vPortSetupTimerInterrupt+0x30>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ee6:	4b0a      	ldr	r3, [pc, #40]	; (8004f10 <vPortSetupTimerInterrupt+0x34>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <vPortSetupTimerInterrupt+0x38>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a09      	ldr	r2, [pc, #36]	; (8004f18 <vPortSetupTimerInterrupt+0x3c>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	099b      	lsrs	r3, r3, #6
 8004ef8:	4a08      	ldr	r2, [pc, #32]	; (8004f1c <vPortSetupTimerInterrupt+0x40>)
 8004efa:	3b01      	subs	r3, #1
 8004efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004efe:	4b03      	ldr	r3, [pc, #12]	; (8004f0c <vPortSetupTimerInterrupt+0x30>)
 8004f00:	2207      	movs	r2, #7
 8004f02:	601a      	str	r2, [r3, #0]
}
 8004f04:	bf00      	nop
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bc80      	pop	{r7}
 8004f0a:	4770      	bx	lr
 8004f0c:	e000e010 	.word	0xe000e010
 8004f10:	e000e018 	.word	0xe000e018
 8004f14:	20000000 	.word	0x20000000
 8004f18:	10624dd3 	.word	0x10624dd3
 8004f1c:	e000e014 	.word	0xe000e014

08004f20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f26:	f3ef 8305 	mrs	r3, IPSR
 8004f2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b0f      	cmp	r3, #15
 8004f30:	d914      	bls.n	8004f5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f32:	4a16      	ldr	r2, [pc, #88]	; (8004f8c <vPortValidateInterruptPriority+0x6c>)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f3c:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <vPortValidateInterruptPriority+0x70>)
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	7afa      	ldrb	r2, [r7, #11]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d20a      	bcs.n	8004f5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	607b      	str	r3, [r7, #4]
}
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f5c:	4b0d      	ldr	r3, [pc, #52]	; (8004f94 <vPortValidateInterruptPriority+0x74>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f64:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <vPortValidateInterruptPriority+0x78>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d90a      	bls.n	8004f82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	603b      	str	r3, [r7, #0]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <vPortValidateInterruptPriority+0x60>
	}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr
 8004f8c:	e000e3f0 	.word	0xe000e3f0
 8004f90:	20000e84 	.word	0x20000e84
 8004f94:	e000ed0c 	.word	0xe000ed0c
 8004f98:	20000e88 	.word	0x20000e88

08004f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fa8:	f7fe fe32 	bl	8003c10 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fac:	4b58      	ldr	r3, [pc, #352]	; (8005110 <pvPortMalloc+0x174>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fb4:	f000 f910 	bl	80051d8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fb8:	4b56      	ldr	r3, [pc, #344]	; (8005114 <pvPortMalloc+0x178>)
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f040 808e 	bne.w	80050e2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01d      	beq.n	8005008 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fcc:	2208      	movs	r2, #8
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d014      	beq.n	8005008 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f023 0307 	bic.w	r3, r3, #7
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00a      	beq.n	8005008 <pvPortMalloc+0x6c>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	617b      	str	r3, [r7, #20]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d069      	beq.n	80050e2 <pvPortMalloc+0x146>
 800500e:	4b42      	ldr	r3, [pc, #264]	; (8005118 <pvPortMalloc+0x17c>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	429a      	cmp	r2, r3
 8005016:	d864      	bhi.n	80050e2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005018:	4b40      	ldr	r3, [pc, #256]	; (800511c <pvPortMalloc+0x180>)
 800501a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800501c:	4b3f      	ldr	r3, [pc, #252]	; (800511c <pvPortMalloc+0x180>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005022:	e004      	b.n	800502e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005026:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	429a      	cmp	r2, r3
 8005036:	d903      	bls.n	8005040 <pvPortMalloc+0xa4>
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1f1      	bne.n	8005024 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005040:	4b33      	ldr	r3, [pc, #204]	; (8005110 <pvPortMalloc+0x174>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005046:	429a      	cmp	r2, r3
 8005048:	d04b      	beq.n	80050e2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2208      	movs	r2, #8
 8005050:	4413      	add	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	1ad2      	subs	r2, r2, r3
 8005064:	2308      	movs	r3, #8
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	429a      	cmp	r2, r3
 800506a:	d91f      	bls.n	80050ac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4413      	add	r3, r2
 8005072:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <pvPortMalloc+0xf8>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	613b      	str	r3, [r7, #16]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050a6:	69b8      	ldr	r0, [r7, #24]
 80050a8:	f000 f8f8 	bl	800529c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050ac:	4b1a      	ldr	r3, [pc, #104]	; (8005118 <pvPortMalloc+0x17c>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	4a18      	ldr	r2, [pc, #96]	; (8005118 <pvPortMalloc+0x17c>)
 80050b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050ba:	4b17      	ldr	r3, [pc, #92]	; (8005118 <pvPortMalloc+0x17c>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <pvPortMalloc+0x184>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d203      	bcs.n	80050ce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050c6:	4b14      	ldr	r3, [pc, #80]	; (8005118 <pvPortMalloc+0x17c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	; (8005120 <pvPortMalloc+0x184>)
 80050cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	4b10      	ldr	r3, [pc, #64]	; (8005114 <pvPortMalloc+0x178>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	431a      	orrs	r2, r3
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050e2:	f7fe fda3 	bl	8003c2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <pvPortMalloc+0x16a>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60fb      	str	r3, [r7, #12]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <pvPortMalloc+0x168>
	return pvReturn;
 8005106:	69fb      	ldr	r3, [r7, #28]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3728      	adds	r7, #40	; 0x28
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20001a94 	.word	0x20001a94
 8005114:	20001aa0 	.word	0x20001aa0
 8005118:	20001a98 	.word	0x20001a98
 800511c:	20001a8c 	.word	0x20001a8c
 8005120:	20001a9c 	.word	0x20001a9c

08005124 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d048      	beq.n	80051c8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005136:	2308      	movs	r3, #8
 8005138:	425b      	negs	r3, r3
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	4413      	add	r3, r2
 800513e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685a      	ldr	r2, [r3, #4]
 8005148:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <vPortFree+0xac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4013      	ands	r3, r2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10a      	bne.n	8005168 <vPortFree+0x44>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	60fb      	str	r3, [r7, #12]
}
 8005164:	bf00      	nop
 8005166:	e7fe      	b.n	8005166 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <vPortFree+0x62>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60bb      	str	r3, [r7, #8]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <vPortFree+0xac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d019      	beq.n	80051c8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d115      	bne.n	80051c8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <vPortFree+0xac>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	401a      	ands	r2, r3
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051ac:	f7fe fd30 	bl	8003c10 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <vPortFree+0xb0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4413      	add	r3, r2
 80051ba:	4a06      	ldr	r2, [pc, #24]	; (80051d4 <vPortFree+0xb0>)
 80051bc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051be:	6938      	ldr	r0, [r7, #16]
 80051c0:	f000 f86c 	bl	800529c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80051c4:	f7fe fd32 	bl	8003c2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051c8:	bf00      	nop
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	20001aa0 	.word	0x20001aa0
 80051d4:	20001a98 	.word	0x20001a98

080051d8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051de:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051e2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80051e4:	4b27      	ldr	r3, [pc, #156]	; (8005284 <prvHeapInit+0xac>)
 80051e6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0307 	and.w	r3, r3, #7
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00c      	beq.n	800520c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	3307      	adds	r3, #7
 80051f6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 0307 	bic.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	4a1f      	ldr	r2, [pc, #124]	; (8005284 <prvHeapInit+0xac>)
 8005208:	4413      	add	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005210:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <prvHeapInit+0xb0>)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005216:	4b1c      	ldr	r3, [pc, #112]	; (8005288 <prvHeapInit+0xb0>)
 8005218:	2200      	movs	r2, #0
 800521a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	4413      	add	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005224:	2208      	movs	r2, #8
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f023 0307 	bic.w	r3, r3, #7
 8005232:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	4a15      	ldr	r2, [pc, #84]	; (800528c <prvHeapInit+0xb4>)
 8005238:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800523a:	4b14      	ldr	r3, [pc, #80]	; (800528c <prvHeapInit+0xb4>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2200      	movs	r2, #0
 8005240:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005242:	4b12      	ldr	r3, [pc, #72]	; (800528c <prvHeapInit+0xb4>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	1ad2      	subs	r2, r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <prvHeapInit+0xb4>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	4a0a      	ldr	r2, [pc, #40]	; (8005290 <prvHeapInit+0xb8>)
 8005266:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a09      	ldr	r2, [pc, #36]	; (8005294 <prvHeapInit+0xbc>)
 800526e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005270:	4b09      	ldr	r3, [pc, #36]	; (8005298 <prvHeapInit+0xc0>)
 8005272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005276:	601a      	str	r2, [r3, #0]
}
 8005278:	bf00      	nop
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bc80      	pop	{r7}
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000e8c 	.word	0x20000e8c
 8005288:	20001a8c 	.word	0x20001a8c
 800528c:	20001a94 	.word	0x20001a94
 8005290:	20001a9c 	.word	0x20001a9c
 8005294:	20001a98 	.word	0x20001a98
 8005298:	20001aa0 	.word	0x20001aa0

0800529c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052a4:	4b27      	ldr	r3, [pc, #156]	; (8005344 <prvInsertBlockIntoFreeList+0xa8>)
 80052a6:	60fb      	str	r3, [r7, #12]
 80052a8:	e002      	b.n	80052b0 <prvInsertBlockIntoFreeList+0x14>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	60fb      	str	r3, [r7, #12]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d8f7      	bhi.n	80052aa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	4413      	add	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d108      	bne.n	80052de <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	441a      	add	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d118      	bne.n	8005324 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	4b14      	ldr	r3, [pc, #80]	; (8005348 <prvInsertBlockIntoFreeList+0xac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d00d      	beq.n	800531a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	441a      	add	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e008      	b.n	800532c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800531a:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <prvInsertBlockIntoFreeList+0xac>)
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e003      	b.n	800532c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d002      	beq.n	800533a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800533a:	bf00      	nop
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr
 8005344:	20001a8c 	.word	0x20001a8c
 8005348:	20001a94 	.word	0x20001a94

0800534c <__errno>:
 800534c:	4b01      	ldr	r3, [pc, #4]	; (8005354 <__errno+0x8>)
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000010 	.word	0x20000010

08005358 <__libc_init_array>:
 8005358:	b570      	push	{r4, r5, r6, lr}
 800535a:	2600      	movs	r6, #0
 800535c:	4d0c      	ldr	r5, [pc, #48]	; (8005390 <__libc_init_array+0x38>)
 800535e:	4c0d      	ldr	r4, [pc, #52]	; (8005394 <__libc_init_array+0x3c>)
 8005360:	1b64      	subs	r4, r4, r5
 8005362:	10a4      	asrs	r4, r4, #2
 8005364:	42a6      	cmp	r6, r4
 8005366:	d109      	bne.n	800537c <__libc_init_array+0x24>
 8005368:	f000 fc9c 	bl	8005ca4 <_init>
 800536c:	2600      	movs	r6, #0
 800536e:	4d0a      	ldr	r5, [pc, #40]	; (8005398 <__libc_init_array+0x40>)
 8005370:	4c0a      	ldr	r4, [pc, #40]	; (800539c <__libc_init_array+0x44>)
 8005372:	1b64      	subs	r4, r4, r5
 8005374:	10a4      	asrs	r4, r4, #2
 8005376:	42a6      	cmp	r6, r4
 8005378:	d105      	bne.n	8005386 <__libc_init_array+0x2e>
 800537a:	bd70      	pop	{r4, r5, r6, pc}
 800537c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005380:	4798      	blx	r3
 8005382:	3601      	adds	r6, #1
 8005384:	e7ee      	b.n	8005364 <__libc_init_array+0xc>
 8005386:	f855 3b04 	ldr.w	r3, [r5], #4
 800538a:	4798      	blx	r3
 800538c:	3601      	adds	r6, #1
 800538e:	e7f2      	b.n	8005376 <__libc_init_array+0x1e>
 8005390:	08005da4 	.word	0x08005da4
 8005394:	08005da4 	.word	0x08005da4
 8005398:	08005da4 	.word	0x08005da4
 800539c:	08005da8 	.word	0x08005da8

080053a0 <memcpy>:
 80053a0:	440a      	add	r2, r1
 80053a2:	4291      	cmp	r1, r2
 80053a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	4770      	bx	lr
 80053ac:	b510      	push	{r4, lr}
 80053ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b2:	4291      	cmp	r1, r2
 80053b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b8:	d1f9      	bne.n	80053ae <memcpy+0xe>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <memset>:
 80053bc:	4603      	mov	r3, r0
 80053be:	4402      	add	r2, r0
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d100      	bne.n	80053c6 <memset+0xa>
 80053c4:	4770      	bx	lr
 80053c6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ca:	e7f9      	b.n	80053c0 <memset+0x4>

080053cc <siprintf>:
 80053cc:	b40e      	push	{r1, r2, r3}
 80053ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053d2:	b500      	push	{lr}
 80053d4:	b09c      	sub	sp, #112	; 0x70
 80053d6:	ab1d      	add	r3, sp, #116	; 0x74
 80053d8:	9002      	str	r0, [sp, #8]
 80053da:	9006      	str	r0, [sp, #24]
 80053dc:	9107      	str	r1, [sp, #28]
 80053de:	9104      	str	r1, [sp, #16]
 80053e0:	4808      	ldr	r0, [pc, #32]	; (8005404 <siprintf+0x38>)
 80053e2:	4909      	ldr	r1, [pc, #36]	; (8005408 <siprintf+0x3c>)
 80053e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	6800      	ldr	r0, [r0, #0]
 80053ec:	a902      	add	r1, sp, #8
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	f000 f868 	bl	80054c4 <_svfiprintf_r>
 80053f4:	2200      	movs	r2, #0
 80053f6:	9b02      	ldr	r3, [sp, #8]
 80053f8:	701a      	strb	r2, [r3, #0]
 80053fa:	b01c      	add	sp, #112	; 0x70
 80053fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005400:	b003      	add	sp, #12
 8005402:	4770      	bx	lr
 8005404:	20000010 	.word	0x20000010
 8005408:	ffff0208 	.word	0xffff0208

0800540c <__ssputs_r>:
 800540c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005410:	688e      	ldr	r6, [r1, #8]
 8005412:	4682      	mov	sl, r0
 8005414:	429e      	cmp	r6, r3
 8005416:	460c      	mov	r4, r1
 8005418:	4690      	mov	r8, r2
 800541a:	461f      	mov	r7, r3
 800541c:	d838      	bhi.n	8005490 <__ssputs_r+0x84>
 800541e:	898a      	ldrh	r2, [r1, #12]
 8005420:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005424:	d032      	beq.n	800548c <__ssputs_r+0x80>
 8005426:	6825      	ldr	r5, [r4, #0]
 8005428:	6909      	ldr	r1, [r1, #16]
 800542a:	3301      	adds	r3, #1
 800542c:	eba5 0901 	sub.w	r9, r5, r1
 8005430:	6965      	ldr	r5, [r4, #20]
 8005432:	444b      	add	r3, r9
 8005434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800543c:	106d      	asrs	r5, r5, #1
 800543e:	429d      	cmp	r5, r3
 8005440:	bf38      	it	cc
 8005442:	461d      	movcc	r5, r3
 8005444:	0553      	lsls	r3, r2, #21
 8005446:	d531      	bpl.n	80054ac <__ssputs_r+0xa0>
 8005448:	4629      	mov	r1, r5
 800544a:	f000 fb61 	bl	8005b10 <_malloc_r>
 800544e:	4606      	mov	r6, r0
 8005450:	b950      	cbnz	r0, 8005468 <__ssputs_r+0x5c>
 8005452:	230c      	movs	r3, #12
 8005454:	f04f 30ff 	mov.w	r0, #4294967295
 8005458:	f8ca 3000 	str.w	r3, [sl]
 800545c:	89a3      	ldrh	r3, [r4, #12]
 800545e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005462:	81a3      	strh	r3, [r4, #12]
 8005464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005468:	464a      	mov	r2, r9
 800546a:	6921      	ldr	r1, [r4, #16]
 800546c:	f7ff ff98 	bl	80053a0 <memcpy>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	6126      	str	r6, [r4, #16]
 800547e:	444e      	add	r6, r9
 8005480:	6026      	str	r6, [r4, #0]
 8005482:	463e      	mov	r6, r7
 8005484:	6165      	str	r5, [r4, #20]
 8005486:	eba5 0509 	sub.w	r5, r5, r9
 800548a:	60a5      	str	r5, [r4, #8]
 800548c:	42be      	cmp	r6, r7
 800548e:	d900      	bls.n	8005492 <__ssputs_r+0x86>
 8005490:	463e      	mov	r6, r7
 8005492:	4632      	mov	r2, r6
 8005494:	4641      	mov	r1, r8
 8005496:	6820      	ldr	r0, [r4, #0]
 8005498:	f000 fab8 	bl	8005a0c <memmove>
 800549c:	68a3      	ldr	r3, [r4, #8]
 800549e:	2000      	movs	r0, #0
 80054a0:	1b9b      	subs	r3, r3, r6
 80054a2:	60a3      	str	r3, [r4, #8]
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	4433      	add	r3, r6
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	e7db      	b.n	8005464 <__ssputs_r+0x58>
 80054ac:	462a      	mov	r2, r5
 80054ae:	f000 fba3 	bl	8005bf8 <_realloc_r>
 80054b2:	4606      	mov	r6, r0
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d1e1      	bne.n	800547c <__ssputs_r+0x70>
 80054b8:	4650      	mov	r0, sl
 80054ba:	6921      	ldr	r1, [r4, #16]
 80054bc:	f000 fac0 	bl	8005a40 <_free_r>
 80054c0:	e7c7      	b.n	8005452 <__ssputs_r+0x46>
	...

080054c4 <_svfiprintf_r>:
 80054c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c8:	4698      	mov	r8, r3
 80054ca:	898b      	ldrh	r3, [r1, #12]
 80054cc:	4607      	mov	r7, r0
 80054ce:	061b      	lsls	r3, r3, #24
 80054d0:	460d      	mov	r5, r1
 80054d2:	4614      	mov	r4, r2
 80054d4:	b09d      	sub	sp, #116	; 0x74
 80054d6:	d50e      	bpl.n	80054f6 <_svfiprintf_r+0x32>
 80054d8:	690b      	ldr	r3, [r1, #16]
 80054da:	b963      	cbnz	r3, 80054f6 <_svfiprintf_r+0x32>
 80054dc:	2140      	movs	r1, #64	; 0x40
 80054de:	f000 fb17 	bl	8005b10 <_malloc_r>
 80054e2:	6028      	str	r0, [r5, #0]
 80054e4:	6128      	str	r0, [r5, #16]
 80054e6:	b920      	cbnz	r0, 80054f2 <_svfiprintf_r+0x2e>
 80054e8:	230c      	movs	r3, #12
 80054ea:	603b      	str	r3, [r7, #0]
 80054ec:	f04f 30ff 	mov.w	r0, #4294967295
 80054f0:	e0d1      	b.n	8005696 <_svfiprintf_r+0x1d2>
 80054f2:	2340      	movs	r3, #64	; 0x40
 80054f4:	616b      	str	r3, [r5, #20]
 80054f6:	2300      	movs	r3, #0
 80054f8:	9309      	str	r3, [sp, #36]	; 0x24
 80054fa:	2320      	movs	r3, #32
 80054fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005500:	2330      	movs	r3, #48	; 0x30
 8005502:	f04f 0901 	mov.w	r9, #1
 8005506:	f8cd 800c 	str.w	r8, [sp, #12]
 800550a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80056b0 <_svfiprintf_r+0x1ec>
 800550e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005512:	4623      	mov	r3, r4
 8005514:	469a      	mov	sl, r3
 8005516:	f813 2b01 	ldrb.w	r2, [r3], #1
 800551a:	b10a      	cbz	r2, 8005520 <_svfiprintf_r+0x5c>
 800551c:	2a25      	cmp	r2, #37	; 0x25
 800551e:	d1f9      	bne.n	8005514 <_svfiprintf_r+0x50>
 8005520:	ebba 0b04 	subs.w	fp, sl, r4
 8005524:	d00b      	beq.n	800553e <_svfiprintf_r+0x7a>
 8005526:	465b      	mov	r3, fp
 8005528:	4622      	mov	r2, r4
 800552a:	4629      	mov	r1, r5
 800552c:	4638      	mov	r0, r7
 800552e:	f7ff ff6d 	bl	800540c <__ssputs_r>
 8005532:	3001      	adds	r0, #1
 8005534:	f000 80aa 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005538:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800553a:	445a      	add	r2, fp
 800553c:	9209      	str	r2, [sp, #36]	; 0x24
 800553e:	f89a 3000 	ldrb.w	r3, [sl]
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80a2 	beq.w	800568c <_svfiprintf_r+0x1c8>
 8005548:	2300      	movs	r3, #0
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005552:	f10a 0a01 	add.w	sl, sl, #1
 8005556:	9304      	str	r3, [sp, #16]
 8005558:	9307      	str	r3, [sp, #28]
 800555a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800555e:	931a      	str	r3, [sp, #104]	; 0x68
 8005560:	4654      	mov	r4, sl
 8005562:	2205      	movs	r2, #5
 8005564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005568:	4851      	ldr	r0, [pc, #324]	; (80056b0 <_svfiprintf_r+0x1ec>)
 800556a:	f000 fa41 	bl	80059f0 <memchr>
 800556e:	9a04      	ldr	r2, [sp, #16]
 8005570:	b9d8      	cbnz	r0, 80055aa <_svfiprintf_r+0xe6>
 8005572:	06d0      	lsls	r0, r2, #27
 8005574:	bf44      	itt	mi
 8005576:	2320      	movmi	r3, #32
 8005578:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800557c:	0711      	lsls	r1, r2, #28
 800557e:	bf44      	itt	mi
 8005580:	232b      	movmi	r3, #43	; 0x2b
 8005582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005586:	f89a 3000 	ldrb.w	r3, [sl]
 800558a:	2b2a      	cmp	r3, #42	; 0x2a
 800558c:	d015      	beq.n	80055ba <_svfiprintf_r+0xf6>
 800558e:	4654      	mov	r4, sl
 8005590:	2000      	movs	r0, #0
 8005592:	f04f 0c0a 	mov.w	ip, #10
 8005596:	9a07      	ldr	r2, [sp, #28]
 8005598:	4621      	mov	r1, r4
 800559a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800559e:	3b30      	subs	r3, #48	; 0x30
 80055a0:	2b09      	cmp	r3, #9
 80055a2:	d94e      	bls.n	8005642 <_svfiprintf_r+0x17e>
 80055a4:	b1b0      	cbz	r0, 80055d4 <_svfiprintf_r+0x110>
 80055a6:	9207      	str	r2, [sp, #28]
 80055a8:	e014      	b.n	80055d4 <_svfiprintf_r+0x110>
 80055aa:	eba0 0308 	sub.w	r3, r0, r8
 80055ae:	fa09 f303 	lsl.w	r3, r9, r3
 80055b2:	4313      	orrs	r3, r2
 80055b4:	46a2      	mov	sl, r4
 80055b6:	9304      	str	r3, [sp, #16]
 80055b8:	e7d2      	b.n	8005560 <_svfiprintf_r+0x9c>
 80055ba:	9b03      	ldr	r3, [sp, #12]
 80055bc:	1d19      	adds	r1, r3, #4
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	9103      	str	r1, [sp, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bfbb      	ittet	lt
 80055c6:	425b      	neglt	r3, r3
 80055c8:	f042 0202 	orrlt.w	r2, r2, #2
 80055cc:	9307      	strge	r3, [sp, #28]
 80055ce:	9307      	strlt	r3, [sp, #28]
 80055d0:	bfb8      	it	lt
 80055d2:	9204      	strlt	r2, [sp, #16]
 80055d4:	7823      	ldrb	r3, [r4, #0]
 80055d6:	2b2e      	cmp	r3, #46	; 0x2e
 80055d8:	d10c      	bne.n	80055f4 <_svfiprintf_r+0x130>
 80055da:	7863      	ldrb	r3, [r4, #1]
 80055dc:	2b2a      	cmp	r3, #42	; 0x2a
 80055de:	d135      	bne.n	800564c <_svfiprintf_r+0x188>
 80055e0:	9b03      	ldr	r3, [sp, #12]
 80055e2:	3402      	adds	r4, #2
 80055e4:	1d1a      	adds	r2, r3, #4
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	9203      	str	r2, [sp, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfb8      	it	lt
 80055ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80056b4 <_svfiprintf_r+0x1f0>
 80055f8:	2203      	movs	r2, #3
 80055fa:	4650      	mov	r0, sl
 80055fc:	7821      	ldrb	r1, [r4, #0]
 80055fe:	f000 f9f7 	bl	80059f0 <memchr>
 8005602:	b140      	cbz	r0, 8005616 <_svfiprintf_r+0x152>
 8005604:	2340      	movs	r3, #64	; 0x40
 8005606:	eba0 000a 	sub.w	r0, r0, sl
 800560a:	fa03 f000 	lsl.w	r0, r3, r0
 800560e:	9b04      	ldr	r3, [sp, #16]
 8005610:	3401      	adds	r4, #1
 8005612:	4303      	orrs	r3, r0
 8005614:	9304      	str	r3, [sp, #16]
 8005616:	f814 1b01 	ldrb.w	r1, [r4], #1
 800561a:	2206      	movs	r2, #6
 800561c:	4826      	ldr	r0, [pc, #152]	; (80056b8 <_svfiprintf_r+0x1f4>)
 800561e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005622:	f000 f9e5 	bl	80059f0 <memchr>
 8005626:	2800      	cmp	r0, #0
 8005628:	d038      	beq.n	800569c <_svfiprintf_r+0x1d8>
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <_svfiprintf_r+0x1f8>)
 800562c:	bb1b      	cbnz	r3, 8005676 <_svfiprintf_r+0x1b2>
 800562e:	9b03      	ldr	r3, [sp, #12]
 8005630:	3307      	adds	r3, #7
 8005632:	f023 0307 	bic.w	r3, r3, #7
 8005636:	3308      	adds	r3, #8
 8005638:	9303      	str	r3, [sp, #12]
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	4433      	add	r3, r6
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	e767      	b.n	8005512 <_svfiprintf_r+0x4e>
 8005642:	460c      	mov	r4, r1
 8005644:	2001      	movs	r0, #1
 8005646:	fb0c 3202 	mla	r2, ip, r2, r3
 800564a:	e7a5      	b.n	8005598 <_svfiprintf_r+0xd4>
 800564c:	2300      	movs	r3, #0
 800564e:	f04f 0c0a 	mov.w	ip, #10
 8005652:	4619      	mov	r1, r3
 8005654:	3401      	adds	r4, #1
 8005656:	9305      	str	r3, [sp, #20]
 8005658:	4620      	mov	r0, r4
 800565a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800565e:	3a30      	subs	r2, #48	; 0x30
 8005660:	2a09      	cmp	r2, #9
 8005662:	d903      	bls.n	800566c <_svfiprintf_r+0x1a8>
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0c5      	beq.n	80055f4 <_svfiprintf_r+0x130>
 8005668:	9105      	str	r1, [sp, #20]
 800566a:	e7c3      	b.n	80055f4 <_svfiprintf_r+0x130>
 800566c:	4604      	mov	r4, r0
 800566e:	2301      	movs	r3, #1
 8005670:	fb0c 2101 	mla	r1, ip, r1, r2
 8005674:	e7f0      	b.n	8005658 <_svfiprintf_r+0x194>
 8005676:	ab03      	add	r3, sp, #12
 8005678:	9300      	str	r3, [sp, #0]
 800567a:	462a      	mov	r2, r5
 800567c:	4638      	mov	r0, r7
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <_svfiprintf_r+0x1fc>)
 8005680:	a904      	add	r1, sp, #16
 8005682:	f3af 8000 	nop.w
 8005686:	1c42      	adds	r2, r0, #1
 8005688:	4606      	mov	r6, r0
 800568a:	d1d6      	bne.n	800563a <_svfiprintf_r+0x176>
 800568c:	89ab      	ldrh	r3, [r5, #12]
 800568e:	065b      	lsls	r3, r3, #25
 8005690:	f53f af2c 	bmi.w	80054ec <_svfiprintf_r+0x28>
 8005694:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005696:	b01d      	add	sp, #116	; 0x74
 8005698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569c:	ab03      	add	r3, sp, #12
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	462a      	mov	r2, r5
 80056a2:	4638      	mov	r0, r7
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <_svfiprintf_r+0x1fc>)
 80056a6:	a904      	add	r1, sp, #16
 80056a8:	f000 f87c 	bl	80057a4 <_printf_i>
 80056ac:	e7eb      	b.n	8005686 <_svfiprintf_r+0x1c2>
 80056ae:	bf00      	nop
 80056b0:	08005d70 	.word	0x08005d70
 80056b4:	08005d76 	.word	0x08005d76
 80056b8:	08005d7a 	.word	0x08005d7a
 80056bc:	00000000 	.word	0x00000000
 80056c0:	0800540d 	.word	0x0800540d

080056c4 <_printf_common>:
 80056c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056c8:	4616      	mov	r6, r2
 80056ca:	4699      	mov	r9, r3
 80056cc:	688a      	ldr	r2, [r1, #8]
 80056ce:	690b      	ldr	r3, [r1, #16]
 80056d0:	4607      	mov	r7, r0
 80056d2:	4293      	cmp	r3, r2
 80056d4:	bfb8      	it	lt
 80056d6:	4613      	movlt	r3, r2
 80056d8:	6033      	str	r3, [r6, #0]
 80056da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056de:	460c      	mov	r4, r1
 80056e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056e4:	b10a      	cbz	r2, 80056ea <_printf_common+0x26>
 80056e6:	3301      	adds	r3, #1
 80056e8:	6033      	str	r3, [r6, #0]
 80056ea:	6823      	ldr	r3, [r4, #0]
 80056ec:	0699      	lsls	r1, r3, #26
 80056ee:	bf42      	ittt	mi
 80056f0:	6833      	ldrmi	r3, [r6, #0]
 80056f2:	3302      	addmi	r3, #2
 80056f4:	6033      	strmi	r3, [r6, #0]
 80056f6:	6825      	ldr	r5, [r4, #0]
 80056f8:	f015 0506 	ands.w	r5, r5, #6
 80056fc:	d106      	bne.n	800570c <_printf_common+0x48>
 80056fe:	f104 0a19 	add.w	sl, r4, #25
 8005702:	68e3      	ldr	r3, [r4, #12]
 8005704:	6832      	ldr	r2, [r6, #0]
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	42ab      	cmp	r3, r5
 800570a:	dc28      	bgt.n	800575e <_printf_common+0x9a>
 800570c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005710:	1e13      	subs	r3, r2, #0
 8005712:	6822      	ldr	r2, [r4, #0]
 8005714:	bf18      	it	ne
 8005716:	2301      	movne	r3, #1
 8005718:	0692      	lsls	r2, r2, #26
 800571a:	d42d      	bmi.n	8005778 <_printf_common+0xb4>
 800571c:	4649      	mov	r1, r9
 800571e:	4638      	mov	r0, r7
 8005720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005724:	47c0      	blx	r8
 8005726:	3001      	adds	r0, #1
 8005728:	d020      	beq.n	800576c <_printf_common+0xa8>
 800572a:	6823      	ldr	r3, [r4, #0]
 800572c:	68e5      	ldr	r5, [r4, #12]
 800572e:	f003 0306 	and.w	r3, r3, #6
 8005732:	2b04      	cmp	r3, #4
 8005734:	bf18      	it	ne
 8005736:	2500      	movne	r5, #0
 8005738:	6832      	ldr	r2, [r6, #0]
 800573a:	f04f 0600 	mov.w	r6, #0
 800573e:	68a3      	ldr	r3, [r4, #8]
 8005740:	bf08      	it	eq
 8005742:	1aad      	subeq	r5, r5, r2
 8005744:	6922      	ldr	r2, [r4, #16]
 8005746:	bf08      	it	eq
 8005748:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800574c:	4293      	cmp	r3, r2
 800574e:	bfc4      	itt	gt
 8005750:	1a9b      	subgt	r3, r3, r2
 8005752:	18ed      	addgt	r5, r5, r3
 8005754:	341a      	adds	r4, #26
 8005756:	42b5      	cmp	r5, r6
 8005758:	d11a      	bne.n	8005790 <_printf_common+0xcc>
 800575a:	2000      	movs	r0, #0
 800575c:	e008      	b.n	8005770 <_printf_common+0xac>
 800575e:	2301      	movs	r3, #1
 8005760:	4652      	mov	r2, sl
 8005762:	4649      	mov	r1, r9
 8005764:	4638      	mov	r0, r7
 8005766:	47c0      	blx	r8
 8005768:	3001      	adds	r0, #1
 800576a:	d103      	bne.n	8005774 <_printf_common+0xb0>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005774:	3501      	adds	r5, #1
 8005776:	e7c4      	b.n	8005702 <_printf_common+0x3e>
 8005778:	2030      	movs	r0, #48	; 0x30
 800577a:	18e1      	adds	r1, r4, r3
 800577c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005780:	1c5a      	adds	r2, r3, #1
 8005782:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005786:	4422      	add	r2, r4
 8005788:	3302      	adds	r3, #2
 800578a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800578e:	e7c5      	b.n	800571c <_printf_common+0x58>
 8005790:	2301      	movs	r3, #1
 8005792:	4622      	mov	r2, r4
 8005794:	4649      	mov	r1, r9
 8005796:	4638      	mov	r0, r7
 8005798:	47c0      	blx	r8
 800579a:	3001      	adds	r0, #1
 800579c:	d0e6      	beq.n	800576c <_printf_common+0xa8>
 800579e:	3601      	adds	r6, #1
 80057a0:	e7d9      	b.n	8005756 <_printf_common+0x92>
	...

080057a4 <_printf_i>:
 80057a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	7e0f      	ldrb	r7, [r1, #24]
 80057aa:	4691      	mov	r9, r2
 80057ac:	2f78      	cmp	r7, #120	; 0x78
 80057ae:	4680      	mov	r8, r0
 80057b0:	460c      	mov	r4, r1
 80057b2:	469a      	mov	sl, r3
 80057b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ba:	d807      	bhi.n	80057cc <_printf_i+0x28>
 80057bc:	2f62      	cmp	r7, #98	; 0x62
 80057be:	d80a      	bhi.n	80057d6 <_printf_i+0x32>
 80057c0:	2f00      	cmp	r7, #0
 80057c2:	f000 80d9 	beq.w	8005978 <_printf_i+0x1d4>
 80057c6:	2f58      	cmp	r7, #88	; 0x58
 80057c8:	f000 80a4 	beq.w	8005914 <_printf_i+0x170>
 80057cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80057d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80057d4:	e03a      	b.n	800584c <_printf_i+0xa8>
 80057d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057da:	2b15      	cmp	r3, #21
 80057dc:	d8f6      	bhi.n	80057cc <_printf_i+0x28>
 80057de:	a101      	add	r1, pc, #4	; (adr r1, 80057e4 <_printf_i+0x40>)
 80057e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057e4:	0800583d 	.word	0x0800583d
 80057e8:	08005851 	.word	0x08005851
 80057ec:	080057cd 	.word	0x080057cd
 80057f0:	080057cd 	.word	0x080057cd
 80057f4:	080057cd 	.word	0x080057cd
 80057f8:	080057cd 	.word	0x080057cd
 80057fc:	08005851 	.word	0x08005851
 8005800:	080057cd 	.word	0x080057cd
 8005804:	080057cd 	.word	0x080057cd
 8005808:	080057cd 	.word	0x080057cd
 800580c:	080057cd 	.word	0x080057cd
 8005810:	0800595f 	.word	0x0800595f
 8005814:	08005881 	.word	0x08005881
 8005818:	08005941 	.word	0x08005941
 800581c:	080057cd 	.word	0x080057cd
 8005820:	080057cd 	.word	0x080057cd
 8005824:	08005981 	.word	0x08005981
 8005828:	080057cd 	.word	0x080057cd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057cd 	.word	0x080057cd
 8005834:	080057cd 	.word	0x080057cd
 8005838:	08005949 	.word	0x08005949
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	1d1a      	adds	r2, r3, #4
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	602a      	str	r2, [r5, #0]
 8005844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800584c:	2301      	movs	r3, #1
 800584e:	e0a4      	b.n	800599a <_printf_i+0x1f6>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	6829      	ldr	r1, [r5, #0]
 8005854:	0606      	lsls	r6, r0, #24
 8005856:	f101 0304 	add.w	r3, r1, #4
 800585a:	d50a      	bpl.n	8005872 <_printf_i+0xce>
 800585c:	680e      	ldr	r6, [r1, #0]
 800585e:	602b      	str	r3, [r5, #0]
 8005860:	2e00      	cmp	r6, #0
 8005862:	da03      	bge.n	800586c <_printf_i+0xc8>
 8005864:	232d      	movs	r3, #45	; 0x2d
 8005866:	4276      	negs	r6, r6
 8005868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800586c:	230a      	movs	r3, #10
 800586e:	485e      	ldr	r0, [pc, #376]	; (80059e8 <_printf_i+0x244>)
 8005870:	e019      	b.n	80058a6 <_printf_i+0x102>
 8005872:	680e      	ldr	r6, [r1, #0]
 8005874:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	bf18      	it	ne
 800587c:	b236      	sxthne	r6, r6
 800587e:	e7ef      	b.n	8005860 <_printf_i+0xbc>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	1d19      	adds	r1, r3, #4
 8005886:	6029      	str	r1, [r5, #0]
 8005888:	0601      	lsls	r1, r0, #24
 800588a:	d501      	bpl.n	8005890 <_printf_i+0xec>
 800588c:	681e      	ldr	r6, [r3, #0]
 800588e:	e002      	b.n	8005896 <_printf_i+0xf2>
 8005890:	0646      	lsls	r6, r0, #25
 8005892:	d5fb      	bpl.n	800588c <_printf_i+0xe8>
 8005894:	881e      	ldrh	r6, [r3, #0]
 8005896:	2f6f      	cmp	r7, #111	; 0x6f
 8005898:	bf0c      	ite	eq
 800589a:	2308      	moveq	r3, #8
 800589c:	230a      	movne	r3, #10
 800589e:	4852      	ldr	r0, [pc, #328]	; (80059e8 <_printf_i+0x244>)
 80058a0:	2100      	movs	r1, #0
 80058a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058a6:	6865      	ldr	r5, [r4, #4]
 80058a8:	2d00      	cmp	r5, #0
 80058aa:	bfa8      	it	ge
 80058ac:	6821      	ldrge	r1, [r4, #0]
 80058ae:	60a5      	str	r5, [r4, #8]
 80058b0:	bfa4      	itt	ge
 80058b2:	f021 0104 	bicge.w	r1, r1, #4
 80058b6:	6021      	strge	r1, [r4, #0]
 80058b8:	b90e      	cbnz	r6, 80058be <_printf_i+0x11a>
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	d04d      	beq.n	800595a <_printf_i+0x1b6>
 80058be:	4615      	mov	r5, r2
 80058c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80058c4:	fb03 6711 	mls	r7, r3, r1, r6
 80058c8:	5dc7      	ldrb	r7, [r0, r7]
 80058ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058ce:	4637      	mov	r7, r6
 80058d0:	42bb      	cmp	r3, r7
 80058d2:	460e      	mov	r6, r1
 80058d4:	d9f4      	bls.n	80058c0 <_printf_i+0x11c>
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d10b      	bne.n	80058f2 <_printf_i+0x14e>
 80058da:	6823      	ldr	r3, [r4, #0]
 80058dc:	07de      	lsls	r6, r3, #31
 80058de:	d508      	bpl.n	80058f2 <_printf_i+0x14e>
 80058e0:	6923      	ldr	r3, [r4, #16]
 80058e2:	6861      	ldr	r1, [r4, #4]
 80058e4:	4299      	cmp	r1, r3
 80058e6:	bfde      	ittt	le
 80058e8:	2330      	movle	r3, #48	; 0x30
 80058ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058f2:	1b52      	subs	r2, r2, r5
 80058f4:	6122      	str	r2, [r4, #16]
 80058f6:	464b      	mov	r3, r9
 80058f8:	4621      	mov	r1, r4
 80058fa:	4640      	mov	r0, r8
 80058fc:	f8cd a000 	str.w	sl, [sp]
 8005900:	aa03      	add	r2, sp, #12
 8005902:	f7ff fedf 	bl	80056c4 <_printf_common>
 8005906:	3001      	adds	r0, #1
 8005908:	d14c      	bne.n	80059a4 <_printf_i+0x200>
 800590a:	f04f 30ff 	mov.w	r0, #4294967295
 800590e:	b004      	add	sp, #16
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	4834      	ldr	r0, [pc, #208]	; (80059e8 <_printf_i+0x244>)
 8005916:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800591a:	6829      	ldr	r1, [r5, #0]
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005922:	6029      	str	r1, [r5, #0]
 8005924:	061d      	lsls	r5, r3, #24
 8005926:	d514      	bpl.n	8005952 <_printf_i+0x1ae>
 8005928:	07df      	lsls	r7, r3, #31
 800592a:	bf44      	itt	mi
 800592c:	f043 0320 	orrmi.w	r3, r3, #32
 8005930:	6023      	strmi	r3, [r4, #0]
 8005932:	b91e      	cbnz	r6, 800593c <_printf_i+0x198>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	f023 0320 	bic.w	r3, r3, #32
 800593a:	6023      	str	r3, [r4, #0]
 800593c:	2310      	movs	r3, #16
 800593e:	e7af      	b.n	80058a0 <_printf_i+0xfc>
 8005940:	6823      	ldr	r3, [r4, #0]
 8005942:	f043 0320 	orr.w	r3, r3, #32
 8005946:	6023      	str	r3, [r4, #0]
 8005948:	2378      	movs	r3, #120	; 0x78
 800594a:	4828      	ldr	r0, [pc, #160]	; (80059ec <_printf_i+0x248>)
 800594c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005950:	e7e3      	b.n	800591a <_printf_i+0x176>
 8005952:	0659      	lsls	r1, r3, #25
 8005954:	bf48      	it	mi
 8005956:	b2b6      	uxthmi	r6, r6
 8005958:	e7e6      	b.n	8005928 <_printf_i+0x184>
 800595a:	4615      	mov	r5, r2
 800595c:	e7bb      	b.n	80058d6 <_printf_i+0x132>
 800595e:	682b      	ldr	r3, [r5, #0]
 8005960:	6826      	ldr	r6, [r4, #0]
 8005962:	1d18      	adds	r0, r3, #4
 8005964:	6961      	ldr	r1, [r4, #20]
 8005966:	6028      	str	r0, [r5, #0]
 8005968:	0635      	lsls	r5, r6, #24
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	d501      	bpl.n	8005972 <_printf_i+0x1ce>
 800596e:	6019      	str	r1, [r3, #0]
 8005970:	e002      	b.n	8005978 <_printf_i+0x1d4>
 8005972:	0670      	lsls	r0, r6, #25
 8005974:	d5fb      	bpl.n	800596e <_printf_i+0x1ca>
 8005976:	8019      	strh	r1, [r3, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	4615      	mov	r5, r2
 800597c:	6123      	str	r3, [r4, #16]
 800597e:	e7ba      	b.n	80058f6 <_printf_i+0x152>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	2100      	movs	r1, #0
 8005984:	1d1a      	adds	r2, r3, #4
 8005986:	602a      	str	r2, [r5, #0]
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	6862      	ldr	r2, [r4, #4]
 800598c:	4628      	mov	r0, r5
 800598e:	f000 f82f 	bl	80059f0 <memchr>
 8005992:	b108      	cbz	r0, 8005998 <_printf_i+0x1f4>
 8005994:	1b40      	subs	r0, r0, r5
 8005996:	6060      	str	r0, [r4, #4]
 8005998:	6863      	ldr	r3, [r4, #4]
 800599a:	6123      	str	r3, [r4, #16]
 800599c:	2300      	movs	r3, #0
 800599e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059a2:	e7a8      	b.n	80058f6 <_printf_i+0x152>
 80059a4:	462a      	mov	r2, r5
 80059a6:	4649      	mov	r1, r9
 80059a8:	4640      	mov	r0, r8
 80059aa:	6923      	ldr	r3, [r4, #16]
 80059ac:	47d0      	blx	sl
 80059ae:	3001      	adds	r0, #1
 80059b0:	d0ab      	beq.n	800590a <_printf_i+0x166>
 80059b2:	6823      	ldr	r3, [r4, #0]
 80059b4:	079b      	lsls	r3, r3, #30
 80059b6:	d413      	bmi.n	80059e0 <_printf_i+0x23c>
 80059b8:	68e0      	ldr	r0, [r4, #12]
 80059ba:	9b03      	ldr	r3, [sp, #12]
 80059bc:	4298      	cmp	r0, r3
 80059be:	bfb8      	it	lt
 80059c0:	4618      	movlt	r0, r3
 80059c2:	e7a4      	b.n	800590e <_printf_i+0x16a>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4632      	mov	r2, r6
 80059c8:	4649      	mov	r1, r9
 80059ca:	4640      	mov	r0, r8
 80059cc:	47d0      	blx	sl
 80059ce:	3001      	adds	r0, #1
 80059d0:	d09b      	beq.n	800590a <_printf_i+0x166>
 80059d2:	3501      	adds	r5, #1
 80059d4:	68e3      	ldr	r3, [r4, #12]
 80059d6:	9903      	ldr	r1, [sp, #12]
 80059d8:	1a5b      	subs	r3, r3, r1
 80059da:	42ab      	cmp	r3, r5
 80059dc:	dcf2      	bgt.n	80059c4 <_printf_i+0x220>
 80059de:	e7eb      	b.n	80059b8 <_printf_i+0x214>
 80059e0:	2500      	movs	r5, #0
 80059e2:	f104 0619 	add.w	r6, r4, #25
 80059e6:	e7f5      	b.n	80059d4 <_printf_i+0x230>
 80059e8:	08005d81 	.word	0x08005d81
 80059ec:	08005d92 	.word	0x08005d92

080059f0 <memchr>:
 80059f0:	4603      	mov	r3, r0
 80059f2:	b510      	push	{r4, lr}
 80059f4:	b2c9      	uxtb	r1, r1
 80059f6:	4402      	add	r2, r0
 80059f8:	4293      	cmp	r3, r2
 80059fa:	4618      	mov	r0, r3
 80059fc:	d101      	bne.n	8005a02 <memchr+0x12>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e003      	b.n	8005a0a <memchr+0x1a>
 8005a02:	7804      	ldrb	r4, [r0, #0]
 8005a04:	3301      	adds	r3, #1
 8005a06:	428c      	cmp	r4, r1
 8005a08:	d1f6      	bne.n	80059f8 <memchr+0x8>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <memmove>:
 8005a0c:	4288      	cmp	r0, r1
 8005a0e:	b510      	push	{r4, lr}
 8005a10:	eb01 0402 	add.w	r4, r1, r2
 8005a14:	d902      	bls.n	8005a1c <memmove+0x10>
 8005a16:	4284      	cmp	r4, r0
 8005a18:	4623      	mov	r3, r4
 8005a1a:	d807      	bhi.n	8005a2c <memmove+0x20>
 8005a1c:	1e43      	subs	r3, r0, #1
 8005a1e:	42a1      	cmp	r1, r4
 8005a20:	d008      	beq.n	8005a34 <memmove+0x28>
 8005a22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a2a:	e7f8      	b.n	8005a1e <memmove+0x12>
 8005a2c:	4601      	mov	r1, r0
 8005a2e:	4402      	add	r2, r0
 8005a30:	428a      	cmp	r2, r1
 8005a32:	d100      	bne.n	8005a36 <memmove+0x2a>
 8005a34:	bd10      	pop	{r4, pc}
 8005a36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a3e:	e7f7      	b.n	8005a30 <memmove+0x24>

08005a40 <_free_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4605      	mov	r5, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d040      	beq.n	8005aca <_free_r+0x8a>
 8005a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4c:	1f0c      	subs	r4, r1, #4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	bfb8      	it	lt
 8005a52:	18e4      	addlt	r4, r4, r3
 8005a54:	f000 f910 	bl	8005c78 <__malloc_lock>
 8005a58:	4a1c      	ldr	r2, [pc, #112]	; (8005acc <_free_r+0x8c>)
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	b933      	cbnz	r3, 8005a6c <_free_r+0x2c>
 8005a5e:	6063      	str	r3, [r4, #4]
 8005a60:	6014      	str	r4, [r2, #0]
 8005a62:	4628      	mov	r0, r5
 8005a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a68:	f000 b90c 	b.w	8005c84 <__malloc_unlock>
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x42>
 8005a70:	6820      	ldr	r0, [r4, #0]
 8005a72:	1821      	adds	r1, r4, r0
 8005a74:	428b      	cmp	r3, r1
 8005a76:	bf01      	itttt	eq
 8005a78:	6819      	ldreq	r1, [r3, #0]
 8005a7a:	685b      	ldreq	r3, [r3, #4]
 8005a7c:	1809      	addeq	r1, r1, r0
 8005a7e:	6021      	streq	r1, [r4, #0]
 8005a80:	e7ed      	b.n	8005a5e <_free_r+0x1e>
 8005a82:	461a      	mov	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b10b      	cbz	r3, 8005a8c <_free_r+0x4c>
 8005a88:	42a3      	cmp	r3, r4
 8005a8a:	d9fa      	bls.n	8005a82 <_free_r+0x42>
 8005a8c:	6811      	ldr	r1, [r2, #0]
 8005a8e:	1850      	adds	r0, r2, r1
 8005a90:	42a0      	cmp	r0, r4
 8005a92:	d10b      	bne.n	8005aac <_free_r+0x6c>
 8005a94:	6820      	ldr	r0, [r4, #0]
 8005a96:	4401      	add	r1, r0
 8005a98:	1850      	adds	r0, r2, r1
 8005a9a:	4283      	cmp	r3, r0
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	d1e0      	bne.n	8005a62 <_free_r+0x22>
 8005aa0:	6818      	ldr	r0, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4401      	add	r1, r0
 8005aa6:	6011      	str	r1, [r2, #0]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	e7da      	b.n	8005a62 <_free_r+0x22>
 8005aac:	d902      	bls.n	8005ab4 <_free_r+0x74>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	602b      	str	r3, [r5, #0]
 8005ab2:	e7d6      	b.n	8005a62 <_free_r+0x22>
 8005ab4:	6820      	ldr	r0, [r4, #0]
 8005ab6:	1821      	adds	r1, r4, r0
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	bf01      	itttt	eq
 8005abc:	6819      	ldreq	r1, [r3, #0]
 8005abe:	685b      	ldreq	r3, [r3, #4]
 8005ac0:	1809      	addeq	r1, r1, r0
 8005ac2:	6021      	streq	r1, [r4, #0]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	6054      	str	r4, [r2, #4]
 8005ac8:	e7cb      	b.n	8005a62 <_free_r+0x22>
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
 8005acc:	20001aa4 	.word	0x20001aa4

08005ad0 <sbrk_aligned>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	4e0e      	ldr	r6, [pc, #56]	; (8005b0c <sbrk_aligned+0x3c>)
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	6831      	ldr	r1, [r6, #0]
 8005ad8:	4605      	mov	r5, r0
 8005ada:	b911      	cbnz	r1, 8005ae2 <sbrk_aligned+0x12>
 8005adc:	f000 f8bc 	bl	8005c58 <_sbrk_r>
 8005ae0:	6030      	str	r0, [r6, #0]
 8005ae2:	4621      	mov	r1, r4
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f8b7 	bl	8005c58 <_sbrk_r>
 8005aea:	1c43      	adds	r3, r0, #1
 8005aec:	d00a      	beq.n	8005b04 <sbrk_aligned+0x34>
 8005aee:	1cc4      	adds	r4, r0, #3
 8005af0:	f024 0403 	bic.w	r4, r4, #3
 8005af4:	42a0      	cmp	r0, r4
 8005af6:	d007      	beq.n	8005b08 <sbrk_aligned+0x38>
 8005af8:	1a21      	subs	r1, r4, r0
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f8ac 	bl	8005c58 <_sbrk_r>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d101      	bne.n	8005b08 <sbrk_aligned+0x38>
 8005b04:	f04f 34ff 	mov.w	r4, #4294967295
 8005b08:	4620      	mov	r0, r4
 8005b0a:	bd70      	pop	{r4, r5, r6, pc}
 8005b0c:	20001aa8 	.word	0x20001aa8

08005b10 <_malloc_r>:
 8005b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b14:	1ccd      	adds	r5, r1, #3
 8005b16:	f025 0503 	bic.w	r5, r5, #3
 8005b1a:	3508      	adds	r5, #8
 8005b1c:	2d0c      	cmp	r5, #12
 8005b1e:	bf38      	it	cc
 8005b20:	250c      	movcc	r5, #12
 8005b22:	2d00      	cmp	r5, #0
 8005b24:	4607      	mov	r7, r0
 8005b26:	db01      	blt.n	8005b2c <_malloc_r+0x1c>
 8005b28:	42a9      	cmp	r1, r5
 8005b2a:	d905      	bls.n	8005b38 <_malloc_r+0x28>
 8005b2c:	230c      	movs	r3, #12
 8005b2e:	2600      	movs	r6, #0
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4630      	mov	r0, r6
 8005b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b38:	4e2e      	ldr	r6, [pc, #184]	; (8005bf4 <_malloc_r+0xe4>)
 8005b3a:	f000 f89d 	bl	8005c78 <__malloc_lock>
 8005b3e:	6833      	ldr	r3, [r6, #0]
 8005b40:	461c      	mov	r4, r3
 8005b42:	bb34      	cbnz	r4, 8005b92 <_malloc_r+0x82>
 8005b44:	4629      	mov	r1, r5
 8005b46:	4638      	mov	r0, r7
 8005b48:	f7ff ffc2 	bl	8005ad0 <sbrk_aligned>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	4604      	mov	r4, r0
 8005b50:	d14d      	bne.n	8005bee <_malloc_r+0xde>
 8005b52:	6834      	ldr	r4, [r6, #0]
 8005b54:	4626      	mov	r6, r4
 8005b56:	2e00      	cmp	r6, #0
 8005b58:	d140      	bne.n	8005bdc <_malloc_r+0xcc>
 8005b5a:	6823      	ldr	r3, [r4, #0]
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4638      	mov	r0, r7
 8005b60:	eb04 0803 	add.w	r8, r4, r3
 8005b64:	f000 f878 	bl	8005c58 <_sbrk_r>
 8005b68:	4580      	cmp	r8, r0
 8005b6a:	d13a      	bne.n	8005be2 <_malloc_r+0xd2>
 8005b6c:	6821      	ldr	r1, [r4, #0]
 8005b6e:	3503      	adds	r5, #3
 8005b70:	1a6d      	subs	r5, r5, r1
 8005b72:	f025 0503 	bic.w	r5, r5, #3
 8005b76:	3508      	adds	r5, #8
 8005b78:	2d0c      	cmp	r5, #12
 8005b7a:	bf38      	it	cc
 8005b7c:	250c      	movcc	r5, #12
 8005b7e:	4638      	mov	r0, r7
 8005b80:	4629      	mov	r1, r5
 8005b82:	f7ff ffa5 	bl	8005ad0 <sbrk_aligned>
 8005b86:	3001      	adds	r0, #1
 8005b88:	d02b      	beq.n	8005be2 <_malloc_r+0xd2>
 8005b8a:	6823      	ldr	r3, [r4, #0]
 8005b8c:	442b      	add	r3, r5
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	e00e      	b.n	8005bb0 <_malloc_r+0xa0>
 8005b92:	6822      	ldr	r2, [r4, #0]
 8005b94:	1b52      	subs	r2, r2, r5
 8005b96:	d41e      	bmi.n	8005bd6 <_malloc_r+0xc6>
 8005b98:	2a0b      	cmp	r2, #11
 8005b9a:	d916      	bls.n	8005bca <_malloc_r+0xba>
 8005b9c:	1961      	adds	r1, r4, r5
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	6025      	str	r5, [r4, #0]
 8005ba2:	bf18      	it	ne
 8005ba4:	6059      	strne	r1, [r3, #4]
 8005ba6:	6863      	ldr	r3, [r4, #4]
 8005ba8:	bf08      	it	eq
 8005baa:	6031      	streq	r1, [r6, #0]
 8005bac:	5162      	str	r2, [r4, r5]
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f104 060b 	add.w	r6, r4, #11
 8005bb6:	f000 f865 	bl	8005c84 <__malloc_unlock>
 8005bba:	f026 0607 	bic.w	r6, r6, #7
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	1af2      	subs	r2, r6, r3
 8005bc2:	d0b6      	beq.n	8005b32 <_malloc_r+0x22>
 8005bc4:	1b9b      	subs	r3, r3, r6
 8005bc6:	50a3      	str	r3, [r4, r2]
 8005bc8:	e7b3      	b.n	8005b32 <_malloc_r+0x22>
 8005bca:	6862      	ldr	r2, [r4, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	bf0c      	ite	eq
 8005bd0:	6032      	streq	r2, [r6, #0]
 8005bd2:	605a      	strne	r2, [r3, #4]
 8005bd4:	e7ec      	b.n	8005bb0 <_malloc_r+0xa0>
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	6864      	ldr	r4, [r4, #4]
 8005bda:	e7b2      	b.n	8005b42 <_malloc_r+0x32>
 8005bdc:	4634      	mov	r4, r6
 8005bde:	6876      	ldr	r6, [r6, #4]
 8005be0:	e7b9      	b.n	8005b56 <_malloc_r+0x46>
 8005be2:	230c      	movs	r3, #12
 8005be4:	4638      	mov	r0, r7
 8005be6:	603b      	str	r3, [r7, #0]
 8005be8:	f000 f84c 	bl	8005c84 <__malloc_unlock>
 8005bec:	e7a1      	b.n	8005b32 <_malloc_r+0x22>
 8005bee:	6025      	str	r5, [r4, #0]
 8005bf0:	e7de      	b.n	8005bb0 <_malloc_r+0xa0>
 8005bf2:	bf00      	nop
 8005bf4:	20001aa4 	.word	0x20001aa4

08005bf8 <_realloc_r>:
 8005bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bfc:	4680      	mov	r8, r0
 8005bfe:	4614      	mov	r4, r2
 8005c00:	460e      	mov	r6, r1
 8005c02:	b921      	cbnz	r1, 8005c0e <_realloc_r+0x16>
 8005c04:	4611      	mov	r1, r2
 8005c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0a:	f7ff bf81 	b.w	8005b10 <_malloc_r>
 8005c0e:	b92a      	cbnz	r2, 8005c1c <_realloc_r+0x24>
 8005c10:	f7ff ff16 	bl	8005a40 <_free_r>
 8005c14:	4625      	mov	r5, r4
 8005c16:	4628      	mov	r0, r5
 8005c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c1c:	f000 f838 	bl	8005c90 <_malloc_usable_size_r>
 8005c20:	4284      	cmp	r4, r0
 8005c22:	4607      	mov	r7, r0
 8005c24:	d802      	bhi.n	8005c2c <_realloc_r+0x34>
 8005c26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c2a:	d812      	bhi.n	8005c52 <_realloc_r+0x5a>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f7ff ff6e 	bl	8005b10 <_malloc_r>
 8005c34:	4605      	mov	r5, r0
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0ed      	beq.n	8005c16 <_realloc_r+0x1e>
 8005c3a:	42bc      	cmp	r4, r7
 8005c3c:	4622      	mov	r2, r4
 8005c3e:	4631      	mov	r1, r6
 8005c40:	bf28      	it	cs
 8005c42:	463a      	movcs	r2, r7
 8005c44:	f7ff fbac 	bl	80053a0 <memcpy>
 8005c48:	4631      	mov	r1, r6
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7ff fef8 	bl	8005a40 <_free_r>
 8005c50:	e7e1      	b.n	8005c16 <_realloc_r+0x1e>
 8005c52:	4635      	mov	r5, r6
 8005c54:	e7df      	b.n	8005c16 <_realloc_r+0x1e>
	...

08005c58 <_sbrk_r>:
 8005c58:	b538      	push	{r3, r4, r5, lr}
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4d05      	ldr	r5, [pc, #20]	; (8005c74 <_sbrk_r+0x1c>)
 8005c5e:	4604      	mov	r4, r0
 8005c60:	4608      	mov	r0, r1
 8005c62:	602b      	str	r3, [r5, #0]
 8005c64:	f7fa fd7e 	bl	8000764 <_sbrk>
 8005c68:	1c43      	adds	r3, r0, #1
 8005c6a:	d102      	bne.n	8005c72 <_sbrk_r+0x1a>
 8005c6c:	682b      	ldr	r3, [r5, #0]
 8005c6e:	b103      	cbz	r3, 8005c72 <_sbrk_r+0x1a>
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	bd38      	pop	{r3, r4, r5, pc}
 8005c74:	20001aac 	.word	0x20001aac

08005c78 <__malloc_lock>:
 8005c78:	4801      	ldr	r0, [pc, #4]	; (8005c80 <__malloc_lock+0x8>)
 8005c7a:	f000 b811 	b.w	8005ca0 <__retarget_lock_acquire_recursive>
 8005c7e:	bf00      	nop
 8005c80:	20001ab0 	.word	0x20001ab0

08005c84 <__malloc_unlock>:
 8005c84:	4801      	ldr	r0, [pc, #4]	; (8005c8c <__malloc_unlock+0x8>)
 8005c86:	f000 b80c 	b.w	8005ca2 <__retarget_lock_release_recursive>
 8005c8a:	bf00      	nop
 8005c8c:	20001ab0 	.word	0x20001ab0

08005c90 <_malloc_usable_size_r>:
 8005c90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c94:	1f18      	subs	r0, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	bfbc      	itt	lt
 8005c9a:	580b      	ldrlt	r3, [r1, r0]
 8005c9c:	18c0      	addlt	r0, r0, r3
 8005c9e:	4770      	bx	lr

08005ca0 <__retarget_lock_acquire_recursive>:
 8005ca0:	4770      	bx	lr

08005ca2 <__retarget_lock_release_recursive>:
 8005ca2:	4770      	bx	lr

08005ca4 <_init>:
 8005ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ca6:	bf00      	nop
 8005ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005caa:	bc08      	pop	{r3}
 8005cac:	469e      	mov	lr, r3
 8005cae:	4770      	bx	lr

08005cb0 <_fini>:
 8005cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cb2:	bf00      	nop
 8005cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb6:	bc08      	pop	{r3}
 8005cb8:	469e      	mov	lr, r3
 8005cba:	4770      	bx	lr
