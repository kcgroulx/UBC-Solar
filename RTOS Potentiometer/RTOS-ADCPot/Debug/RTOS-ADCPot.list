
RTOS-ADCPot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6b8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a7c8  0800a7c8  0001a7c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad1c  0800ad1c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad1c  0800ad1c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad1c  0800ad1c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad1c  0800ad1c  0001ad1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad20  0800ad20  0001ad20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ad24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a40  200001e4  0800af08  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c24  0800af08  00021c24  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015f0e  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033cd  00000000  00000000  0003611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  000394e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001378  00000000  00000000  0003a9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000461f  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b72  00000000  00000000  0004033f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a4f7  00000000  00000000  00055eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f03a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bd8  00000000  00000000  000f03f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a7b0 	.word	0x0800a7b0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800a7b0 	.word	0x0800a7b0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	4605      	mov	r5, r0
 8000b6c:	460c      	mov	r4, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	2300      	movs	r3, #0
 8000b72:	4628      	mov	r0, r5
 8000b74:	4621      	mov	r1, r4
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bdc:	f000 fbf2 	bl	80013c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000be0:	f000 f828 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000be4:	f000 f8e4 	bl	8000db0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000be8:	f000 f8b8 	bl	8000d5c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000bec:	f000 f878 	bl	8000ce0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bf0:	f002 fca6 	bl	8003540 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <main+0x44>)
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	4809      	ldr	r0, [pc, #36]	; (8000c20 <main+0x48>)
 8000bfa:	f002 fd07 	bl	800360c <osThreadNew>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a08      	ldr	r2, [pc, #32]	; (8000c24 <main+0x4c>)
 8000c02:	6013      	str	r3, [r2, #0]

  /* creation of readADC */
  readADCHandle = osThreadNew(startReadADC, NULL, &readADC_attributes);
 8000c04:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <main+0x50>)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4808      	ldr	r0, [pc, #32]	; (8000c2c <main+0x54>)
 8000c0a:	f002 fcff 	bl	800360c <osThreadNew>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <main+0x58>)
 8000c12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000c14:	f002 fcc6 	bl	80035a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <main+0x40>
 8000c1a:	bf00      	nop
 8000c1c:	0800a818 	.word	0x0800a818
 8000c20:	08000e8d 	.word	0x08000e8d
 8000c24:	20000274 	.word	0x20000274
 8000c28:	0800a83c 	.word	0x0800a83c
 8000c2c:	08000e9d 	.word	0x08000e9d
 8000c30:	20000278 	.word	0x20000278

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c3e:	2228      	movs	r2, #40	; 0x28
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f005 f98a 	bl	8005f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6c:	2310      	movs	r3, #16
 8000c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c70:	2302      	movs	r3, #2
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c74:	2300      	movs	r3, #0
 8000c76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c78:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c82:	4618      	mov	r0, r3
 8000c84:	f001 fa9a 	bl	80021bc <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c8e:	f000 f94f 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2302      	movs	r3, #2
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ca2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	2102      	movs	r1, #2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fd06 	bl	80026c0 <HAL_RCC_ClockConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000cba:	f000 f939 	bl	8000f30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fec1 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cd4:	f000 f92c 	bl	8000f30 <Error_Handler>
  }
}
 8000cd8:	bf00      	nop
 8000cda:	3750      	adds	r7, #80	; 0x50
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000cf2:	4a19      	ldr	r2, [pc, #100]	; (8000d58 <MX_ADC1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b10      	ldr	r3, [pc, #64]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d1e:	f000 fb83 	bl	8001428 <HAL_ADC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f902 	bl	8000f30 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d34:	2300      	movs	r3, #0
 8000d36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_ADC1_Init+0x74>)
 8000d3e:	f000 fe0b 	bl	8001958 <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d48:	f000 f8f2 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000200 	.word	0x20000200
 8000d58:	40012400 	.word	0x40012400

08000d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_USART2_UART_Init+0x50>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART2_UART_Init+0x4c>)
 8000d94:	f002 fa1c 	bl	80031d0 <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d9e:	f000 f8c7 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000230 	.word	0x20000230
 8000dac:	40004400 	.word	0x40004400

08000db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b088      	sub	sp, #32
 8000db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
 8000dc2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc4:	4b2d      	ldr	r3, [pc, #180]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a2c      	ldr	r2, [pc, #176]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dca:	f043 0310 	orr.w	r3, r3, #16
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b2a      	ldr	r3, [pc, #168]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0310 	and.w	r3, r3, #16
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ddc:	4b27      	ldr	r3, [pc, #156]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a26      	ldr	r2, [pc, #152]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000de2:	f043 0320 	orr.w	r3, r3, #32
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b24      	ldr	r3, [pc, #144]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0320 	and.w	r3, r3, #32
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000e12:	f043 0308 	orr.w	r3, r3, #8
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_GPIO_Init+0xcc>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0308 	and.w	r3, r3, #8
 8000e20:	603b      	str	r3, [r7, #0]
 8000e22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2120      	movs	r1, #32
 8000e28:	4815      	ldr	r0, [pc, #84]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e2a:	f001 f98d 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <MX_GPIO_Init+0xd4>)
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	4619      	mov	r1, r3
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_GPIO_Init+0xd8>)
 8000e44:	f000 fffc 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e48:	2320      	movs	r3, #32
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4808      	ldr	r0, [pc, #32]	; (8000e80 <MX_GPIO_Init+0xd0>)
 8000e60:	f000 ffee 	bl	8001e40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2105      	movs	r1, #5
 8000e68:	2028      	movs	r0, #40	; 0x28
 8000e6a:	f000 ffbe 	bl	8001dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e6e:	2028      	movs	r0, #40	; 0x28
 8000e70:	f000 ffd7 	bl	8001e22 <HAL_NVIC_EnableIRQ>

}
 8000e74:	bf00      	nop
 8000e76:	3720      	adds	r7, #32
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40010800 	.word	0x40010800
 8000e84:	10110000 	.word	0x10110000
 8000e88:	40011000 	.word	0x40011000

08000e8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(10);
 8000e94:	200a      	movs	r0, #10
 8000e96:	f002 fc63 	bl	8003760 <osDelay>
 8000e9a:	e7fb      	b.n	8000e94 <StartDefaultTask+0x8>

08000e9c <startReadADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startReadADC */
void startReadADC(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startReadADC */
  uint16_t ADCRaw;
  float motorCurrent = 10;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <startReadADC+0x60>)
 8000ea6:	61fb      	str	r3, [r7, #28]
  char msg[15];
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8000ea8:	4815      	ldr	r0, [pc, #84]	; (8000f00 <startReadADC+0x64>)
 8000eaa:	f000 fb95 	bl	80015d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000eae:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb2:	4813      	ldr	r0, [pc, #76]	; (8000f00 <startReadADC+0x64>)
 8000eb4:	f000 fc3e 	bl	8001734 <HAL_ADC_PollForConversion>

	  //
	  ADCRaw = HAL_ADC_GetValue(&hadc1);
 8000eb8:	4811      	ldr	r0, [pc, #68]	; (8000f00 <startReadADC+0x64>)
 8000eba:	f000 fd41 	bl	8001940 <HAL_ADC_GetValue>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	837b      	strh	r3, [r7, #26]
	  //motorCurrent = (ADCRaw - DEADZONE >= 0 ? (float)(ADCRaw - DEADZONE) : 0.0);



	  // Convert to string and print
	  sprintf(msg, "%f\n", motorCurrent);
 8000ec2:	69f8      	ldr	r0, [r7, #28]
 8000ec4:	f7ff fab0 	bl	8000428 <__aeabi_f2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	f107 0008 	add.w	r0, r7, #8
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <startReadADC+0x68>)
 8000ed2:	f005 febd 	bl	8006c50 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000ed6:	f107 0308 	add.w	r3, r7, #8
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff f938 	bl	8000150 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f107 0108 	add.w	r1, r7, #8
 8000ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <startReadADC+0x6c>)
 8000eee:	f002 f9bc 	bl	800326a <HAL_UART_Transmit>
	  osDelay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f002 fc34 	bl	8003760 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000ef8:	e7d6      	b.n	8000ea8 <startReadADC+0xc>
 8000efa:	bf00      	nop
 8000efc:	41200000 	.word	0x41200000
 8000f00:	20000200 	.word	0x20000200
 8000f04:	0800a7dc 	.word	0x0800a7dc
 8000f08:	20000230 	.word	0x20000230

08000f0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d101      	bne.n	8000f22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f1e:	f000 fa67 	bl	80013f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40000800 	.word	0x40000800

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <Error_Handler+0x8>
	...

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60bb      	str	r3, [r7, #8]
 8000f58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <HAL_MspInit+0x68>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	210f      	movs	r1, #15
 8000f76:	f06f 0001 	mvn.w	r0, #1
 8000f7a:	f000 ff36 	bl	8001dea <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f7e:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <HAL_MspInit+0x6c>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <HAL_MspInit+0x6c>)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	40010000 	.word	0x40010000

08000fac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a14      	ldr	r2, [pc, #80]	; (8001018 <HAL_ADC_MspInit+0x6c>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d121      	bne.n	8001010 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	4a12      	ldr	r2, [pc, #72]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6193      	str	r3, [r2, #24]
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b0d      	ldr	r3, [pc, #52]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000fe6:	699b      	ldr	r3, [r3, #24]
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000fea:	f043 0304 	orr.w	r3, r3, #4
 8000fee:	6193      	str	r3, [r2, #24]
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_ADC_MspInit+0x70>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001000:	2303      	movs	r3, #3
 8001002:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_ADC_MspInit+0x74>)
 800100c:	f000 ff18 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40012400 	.word	0x40012400
 800101c:	40021000 	.word	0x40021000
 8001020:	40010800 	.word	0x40010800

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x70>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d123      	bne.n	800108c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <HAL_UART_MspInit+0x74>)
 8001046:	69db      	ldr	r3, [r3, #28]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <HAL_UART_MspInit+0x74>)
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104e:	61d3      	str	r3, [r2, #28]
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_UART_MspInit+0x74>)
 8001052:	69db      	ldr	r3, [r3, #28]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_UART_MspInit+0x74>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a0d      	ldr	r2, [pc, #52]	; (8001098 <HAL_UART_MspInit+0x74>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_UART_MspInit+0x74>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001074:	230c      	movs	r3, #12
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2302      	movs	r3, #2
 800107e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_UART_MspInit+0x78>)
 8001088:	f000 feda 	bl	8001e40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800108c:	bf00      	nop
 800108e:	3720      	adds	r7, #32
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40004400 	.word	0x40004400
 8001098:	40021000 	.word	0x40021000
 800109c:	40010800 	.word	0x40010800

080010a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08e      	sub	sp, #56	; 0x38
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <HAL_InitTick+0xe8>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a33      	ldr	r2, [pc, #204]	; (8001188 <HAL_InitTick+0xe8>)
 80010bc:	f043 0304 	orr.w	r3, r3, #4
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b31      	ldr	r3, [pc, #196]	; (8001188 <HAL_InitTick+0xe8>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 0304 	and.w	r3, r3, #4
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f001 fc6b 	bl	80029b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010de:	6a3b      	ldr	r3, [r7, #32]
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d103      	bne.n	80010f0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010e8:	f001 fc3c 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80010ec:	6378      	str	r0, [r7, #52]	; 0x34
 80010ee:	e004      	b.n	80010fa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010f0:	f001 fc38 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 80010f4:	4603      	mov	r3, r0
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <HAL_InitTick+0xec>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3b01      	subs	r3, #1
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_InitTick+0xf0>)
 800110a:	4a22      	ldr	r2, [pc, #136]	; (8001194 <HAL_InitTick+0xf4>)
 800110c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <HAL_InitTick+0xf0>)
 8001110:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001114:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <HAL_InitTick+0xf0>)
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_InitTick+0xf0>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_InitTick+0xf0>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_InitTick+0xf0>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800112e:	4818      	ldr	r0, [pc, #96]	; (8001190 <HAL_InitTick+0xf0>)
 8001130:	f001 fe04 	bl	8002d3c <HAL_TIM_Base_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800113a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800113e:	2b00      	cmp	r3, #0
 8001140:	d11b      	bne.n	800117a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001142:	4813      	ldr	r0, [pc, #76]	; (8001190 <HAL_InitTick+0xf0>)
 8001144:	f001 fe52 	bl	8002dec <HAL_TIM_Base_Start_IT>
 8001148:	4603      	mov	r3, r0
 800114a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800114e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001152:	2b00      	cmp	r3, #0
 8001154:	d111      	bne.n	800117a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001156:	201e      	movs	r0, #30
 8001158:	f000 fe63 	bl	8001e22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d808      	bhi.n	8001174 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001162:	2200      	movs	r2, #0
 8001164:	6879      	ldr	r1, [r7, #4]
 8001166:	201e      	movs	r0, #30
 8001168:	f000 fe3f 	bl	8001dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800116c:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <HAL_InitTick+0xf8>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
 8001172:	e002      	b.n	800117a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800117a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800117e:	4618      	mov	r0, r3
 8001180:	3738      	adds	r7, #56	; 0x38
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	431bde83 	.word	0x431bde83
 8001190:	2000027c 	.word	0x2000027c
 8001194:	40000800 	.word	0x40000800
 8001198:	20000004 	.word	0x20000004

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <NMI_Handler+0x4>

080011a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a6:	e7fe      	b.n	80011a6 <HardFault_Handler+0x4>

080011a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <MemManage_Handler+0x4>

080011ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <BusFault_Handler+0x4>

080011b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <UsageFault_Handler+0x4>

080011ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr
	...

080011c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM4_IRQHandler+0x10>)
 80011ce:	f001 fe5f 	bl	8002e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	2000027c 	.word	0x2000027c

080011dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011e4:	f000 ffc8 	bl	8002178 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	return 1;
 80011f0:	2301      	movs	r3, #1
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <_kill>:

int _kill(int pid, int sig)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001204:	f004 fe72 	bl	8005eec <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	2216      	movs	r2, #22
 800120c:	601a      	str	r2, [r3, #0]
	return -1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_exit>:

void _exit (int status)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001222:	f04f 31ff 	mov.w	r1, #4294967295
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ffe7 	bl	80011fa <_kill>
	while (1) {}		/* Make sure we hang here */
 800122c:	e7fe      	b.n	800122c <_exit+0x12>

0800122e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	60f8      	str	r0, [r7, #12]
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
 800123e:	e00a      	b.n	8001256 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001240:	f3af 8000 	nop.w
 8001244:	4601      	mov	r1, r0
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	1c5a      	adds	r2, r3, #1
 800124a:	60ba      	str	r2, [r7, #8]
 800124c:	b2ca      	uxtb	r2, r1
 800124e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	3301      	adds	r3, #1
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	429a      	cmp	r2, r3
 800125c:	dbf0      	blt.n	8001240 <_read+0x12>
	}

return len;
 800125e:	687b      	ldr	r3, [r7, #4]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	e009      	b.n	800128e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	60ba      	str	r2, [r7, #8]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	4618      	mov	r0, r3
 8001284:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	3301      	adds	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	429a      	cmp	r2, r3
 8001294:	dbf1      	blt.n	800127a <_write+0x12>
	}
	return len;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <_close>:

int _close(int file)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	return -1;
 80012a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bc80      	pop	{r7}
 80012b4:	4770      	bx	lr

080012b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012c6:	605a      	str	r2, [r3, #4]
	return 0;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <_isatty>:

int _isatty(int file)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return 1;
 80012dc:	2301      	movs	r3, #1
}
 80012de:	4618      	mov	r0, r3
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
	return 0;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3714      	adds	r7, #20
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001308:	4a14      	ldr	r2, [pc, #80]	; (800135c <_sbrk+0x5c>)
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <_sbrk+0x60>)
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001314:	4b13      	ldr	r3, [pc, #76]	; (8001364 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d102      	bne.n	8001322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <_sbrk+0x64>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <_sbrk+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	429a      	cmp	r2, r3
 800132e:	d207      	bcs.n	8001340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001330:	f004 fddc 	bl	8005eec <__errno>
 8001334:	4603      	mov	r3, r0
 8001336:	220c      	movs	r2, #12
 8001338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	e009      	b.n	8001354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <_sbrk+0x64>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <_sbrk+0x64>)
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4413      	add	r3, r2
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <_sbrk+0x64>)
 8001350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001352:	68fb      	ldr	r3, [r7, #12]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20005000 	.word	0x20005000
 8001360:	00000400 	.word	0x00000400
 8001364:	200002c4 	.word	0x200002c4
 8001368:	20001c28 	.word	0x20001c28

0800136c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001378:	480c      	ldr	r0, [pc, #48]	; (80013ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800137a:	490d      	ldr	r1, [pc, #52]	; (80013b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001380:	e002      	b.n	8001388 <LoopCopyDataInit>

08001382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001386:	3304      	adds	r3, #4

08001388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800138c:	d3f9      	bcc.n	8001382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001390:	4c0a      	ldr	r4, [pc, #40]	; (80013bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001394:	e001      	b.n	800139a <LoopFillZerobss>

08001396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001398:	3204      	adds	r2, #4

0800139a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800139c:	d3fb      	bcc.n	8001396 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800139e:	f7ff ffe5 	bl	800136c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013a2:	f004 fda9 	bl	8005ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013a6:	f7ff fc17 	bl	8000bd8 <main>
  bx lr
 80013aa:	4770      	bx	lr
  ldr r0, =_sdata
 80013ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b0:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80013b4:	0800ad24 	.word	0x0800ad24
  ldr r2, =_sbss
 80013b8:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80013bc:	20001c24 	.word	0x20001c24

080013c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013c0:	e7fe      	b.n	80013c0 <ADC1_2_IRQHandler>
	...

080013c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_Init+0x28>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_Init+0x28>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013d4:	2003      	movs	r0, #3
 80013d6:	f000 fcfd 	bl	8001dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013da:	200f      	movs	r0, #15
 80013dc:	f7ff fe60 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e0:	f7ff fdac 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40022000 	.word	0x40022000

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	4a03      	ldr	r2, [pc, #12]	; (8001410 <HAL_IncTick+0x20>)
 8001402:	6013      	str	r3, [r2, #0]
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000008 	.word	0x20000008
 8001410:	200002c8 	.word	0x200002c8

08001414 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_GetTick+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	200002c8 	.word	0x200002c8

08001428 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001430:	2300      	movs	r3, #0
 8001432:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d101      	bne.n	800144a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0be      	b.n	80015c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	2b00      	cmp	r3, #0
 8001456:	d109      	bne.n	800146c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fda0 	bl	8000fac <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fbc5 	bl	8001bfc <ADC_ConversionStop_Disable>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f040 8099 	bne.w	80015b6 <HAL_ADC_Init+0x18e>
 8001484:	7dfb      	ldrb	r3, [r7, #23]
 8001486:	2b00      	cmp	r3, #0
 8001488:	f040 8095 	bne.w	80015b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001490:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001494:	f023 0302 	bic.w	r3, r3, #2
 8001498:	f043 0202 	orr.w	r2, r3, #2
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7b1b      	ldrb	r3, [r3, #12]
 80014ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_Init+0xa2>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <HAL_ADC_Init+0xa8>
 80014ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014ce:	e000      	b.n	80014d2 <HAL_ADC_Init+0xaa>
 80014d0:	2300      	movs	r3, #0
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7d1b      	ldrb	r3, [r3, #20]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d119      	bne.n	8001514 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7b1b      	ldrb	r3, [r3, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d109      	bne.n	80014fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	035a      	lsls	r2, r3, #13
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	e00b      	b.n	8001514 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	f043 0220 	orr.w	r2, r3, #32
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	f043 0201 	orr.w	r2, r3, #1
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	430a      	orrs	r2, r1
 8001526:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <HAL_ADC_Init+0x1a8>)
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	430b      	orrs	r3, r1
 800153a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001544:	d003      	beq.n	800154e <HAL_ADC_Init+0x126>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d104      	bne.n	8001558 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	3b01      	subs	r3, #1
 8001554:	051b      	lsls	r3, r3, #20
 8001556:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	430a      	orrs	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <HAL_ADC_Init+0x1ac>)
 8001574:	4013      	ands	r3, r2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d10b      	bne.n	8001594 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	f023 0303 	bic.w	r3, r3, #3
 800158a:	f043 0201 	orr.w	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001592:	e018      	b.n	80015c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001598:	f023 0312 	bic.w	r3, r3, #18
 800159c:	f043 0210 	orr.w	r2, r3, #16
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	f043 0201 	orr.w	r2, r3, #1
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015b4:	e007      	b.n	80015c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	f043 0210 	orr.w	r2, r3, #16
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	ffe1f7fd 	.word	0xffe1f7fd
 80015d4:	ff1f0efe 	.word	0xff1f0efe

080015d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_ADC_Start+0x1a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e098      	b.n	8001724 <HAL_ADC_Start+0x14c>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 faa4 	bl	8001b48 <ADC_Enable>
 8001600:	4603      	mov	r3, r0
 8001602:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001604:	7bfb      	ldrb	r3, [r7, #15]
 8001606:	2b00      	cmp	r3, #0
 8001608:	f040 8087 	bne.w	800171a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a41      	ldr	r2, [pc, #260]	; (800172c <HAL_ADC_Start+0x154>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d105      	bne.n	8001636 <HAL_ADC_Start+0x5e>
 800162a:	4b41      	ldr	r3, [pc, #260]	; (8001730 <HAL_ADC_Start+0x158>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d115      	bne.n	8001662 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800164c:	2b00      	cmp	r3, #0
 800164e:	d026      	beq.n	800169e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001660:	e01d      	b.n	800169e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001666:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_ADC_Start+0x158>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d004      	beq.n	8001682 <HAL_ADC_Start+0xaa>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a2b      	ldr	r2, [pc, #172]	; (800172c <HAL_ADC_Start+0x154>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d10d      	bne.n	800169e <HAL_ADC_Start+0xc6>
 8001682:	4b2b      	ldr	r3, [pc, #172]	; (8001730 <HAL_ADC_Start+0x158>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001696:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d006      	beq.n	80016b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	f023 0206 	bic.w	r2, r3, #6
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b6:	e002      	b.n	80016be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f06f 0202 	mvn.w	r2, #2
 80016ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016de:	d113      	bne.n	8001708 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016e4:	4a11      	ldr	r2, [pc, #68]	; (800172c <HAL_ADC_Start+0x154>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d105      	bne.n	80016f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_ADC_Start+0x158>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d108      	bne.n	8001708 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689a      	ldr	r2, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	e00c      	b.n	8001722 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	e003      	b.n	8001722 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001722:	7bfb      	ldrb	r3, [r7, #15]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40012800 	.word	0x40012800
 8001730:	40012400 	.word	0x40012400

08001734 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b087      	sub	sp, #28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800174a:	f7ff fe63 	bl	8001414 <HAL_GetTick>
 800174e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	f043 0220 	orr.w	r2, r3, #32
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0d3      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d131      	bne.n	80017e8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800178e:	2b00      	cmp	r3, #0
 8001790:	d12a      	bne.n	80017e8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001792:	e021      	b.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800179a:	d01d      	beq.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x7e>
 80017a2:	f7ff fe37 	bl	8001414 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d212      	bcs.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10b      	bne.n	80017d8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f043 0204 	orr.w	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0a2      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0d6      	beq.n	8001794 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80017e6:	e070      	b.n	80018ca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80017e8:	4b4f      	ldr	r3, [pc, #316]	; (8001928 <HAL_ADC_PollForConversion+0x1f4>)
 80017ea:	681c      	ldr	r4, [r3, #0]
 80017ec:	2002      	movs	r0, #2
 80017ee:	f001 f9e5 	bl	8002bbc <HAL_RCCEx_GetPeriphCLKFreq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6919      	ldr	r1, [r3, #16]
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <HAL_ADC_PollForConversion+0x1f8>)
 8001800:	400b      	ands	r3, r1
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_PollForConversion+0x104>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68d9      	ldr	r1, [r3, #12]
 800180c:	4b48      	ldr	r3, [pc, #288]	; (8001930 <HAL_ADC_PollForConversion+0x1fc>)
 800180e:	400b      	ands	r3, r1
 8001810:	2b00      	cmp	r3, #0
 8001812:	d111      	bne.n	8001838 <HAL_ADC_PollForConversion+0x104>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6919      	ldr	r1, [r3, #16]
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_ADC_PollForConversion+0x200>)
 800181c:	400b      	ands	r3, r1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <HAL_ADC_PollForConversion+0x100>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68d9      	ldr	r1, [r3, #12]
 8001828:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_ADC_PollForConversion+0x204>)
 800182a:	400b      	ands	r3, r1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_ADC_PollForConversion+0x100>
 8001830:	2314      	movs	r3, #20
 8001832:	e020      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001834:	2329      	movs	r3, #41	; 0x29
 8001836:	e01e      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_ADC_PollForConversion+0x200>)
 8001840:	400b      	ands	r3, r1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d106      	bne.n	8001854 <HAL_ADC_PollForConversion+0x120>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	4b3a      	ldr	r3, [pc, #232]	; (8001938 <HAL_ADC_PollForConversion+0x204>)
 800184e:	400b      	ands	r3, r1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d00d      	beq.n	8001870 <HAL_ADC_PollForConversion+0x13c>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6919      	ldr	r1, [r3, #16]
 800185a:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_ADC_PollForConversion+0x208>)
 800185c:	400b      	ands	r3, r1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d108      	bne.n	8001874 <HAL_ADC_PollForConversion+0x140>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68d9      	ldr	r1, [r3, #12]
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_ADC_PollForConversion+0x208>)
 800186a:	400b      	ands	r3, r1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_PollForConversion+0x140>
 8001870:	2354      	movs	r3, #84	; 0x54
 8001872:	e000      	b.n	8001876 <HAL_ADC_PollForConversion+0x142>
 8001874:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001876:	fb02 f303 	mul.w	r3, r2, r3
 800187a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800187c:	e021      	b.n	80018c2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001884:	d01a      	beq.n	80018bc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d007      	beq.n	800189c <HAL_ADC_PollForConversion+0x168>
 800188c:	f7ff fdc2 	bl	8001414 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	683a      	ldr	r2, [r7, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d20f      	bcs.n	80018bc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d90b      	bls.n	80018bc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a8:	f043 0204 	orr.w	r2, r3, #4
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e030      	b.n	800191e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3301      	adds	r3, #1
 80018c0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d8d9      	bhi.n	800187e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f06f 0212 	mvn.w	r2, #18
 80018d2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80018ea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80018ee:	d115      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	f043 0201 	orr.w	r2, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000000 	.word	0x20000000
 800192c:	24924924 	.word	0x24924924
 8001930:	00924924 	.word	0x00924924
 8001934:	12492492 	.word	0x12492492
 8001938:	00492492 	.word	0x00492492
 800193c:	00249249 	.word	0x00249249

08001940 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x20>
 8001974:	2302      	movs	r3, #2
 8001976:	e0dc      	b.n	8001b32 <HAL_ADC_ConfigChannel+0x1da>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b06      	cmp	r3, #6
 8001986:	d81c      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	221f      	movs	r2, #31
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	4019      	ands	r1, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	6818      	ldr	r0, [r3, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	3b05      	subs	r3, #5
 80019b4:	fa00 f203 	lsl.w	r2, r0, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
 80019c0:	e03c      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d81c      	bhi.n	8001a04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	; 0x23
 80019dc:	221f      	movs	r2, #31
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4019      	ands	r1, r3
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	3b23      	subs	r3, #35	; 0x23
 80019f6:	fa00 f203 	lsl.w	r2, r0, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	631a      	str	r2, [r3, #48]	; 0x30
 8001a02:	e01b      	b.n	8001a3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	; 0x41
 8001a16:	221f      	movs	r2, #31
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	4019      	ands	r1, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	3b41      	subs	r3, #65	; 0x41
 8001a30:	fa00 f203 	lsl.w	r2, r0, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b09      	cmp	r3, #9
 8001a42:	d91c      	bls.n	8001a7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68d9      	ldr	r1, [r3, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	3b1e      	subs	r3, #30
 8001a56:	2207      	movs	r2, #7
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	4019      	ands	r1, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6898      	ldr	r0, [r3, #8]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3b1e      	subs	r3, #30
 8001a70:	fa00 f203 	lsl.w	r2, r0, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	60da      	str	r2, [r3, #12]
 8001a7c:	e019      	b.n	8001ab2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	6919      	ldr	r1, [r3, #16]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	2207      	movs	r2, #7
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	4019      	ands	r1, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	6898      	ldr	r0, [r3, #8]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	4413      	add	r3, r2
 8001aa6:	fa00 f203 	lsl.w	r2, r0, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b10      	cmp	r3, #16
 8001ab8:	d003      	beq.n	8001ac2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001abe:	2b11      	cmp	r3, #17
 8001ac0:	d132      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d126      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ae8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d11a      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	0c9a      	lsrs	r2, r3, #18
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b08:	e002      	b.n	8001b10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f9      	bne.n	8001b0a <HAL_ADC_ConfigChannel+0x1b2>
 8001b16:	e007      	b.n	8001b28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	f043 0220 	orr.w	r2, r3, #32
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40012400 	.word	0x40012400
 8001b40:	20000000 	.word	0x20000000
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d040      	beq.n	8001be8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b76:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <ADC_Enable+0xac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <ADC_Enable+0xb0>)
 8001b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b84:	e002      	b.n	8001b8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f9      	bne.n	8001b86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b92:	f7ff fc3f 	bl	8001414 <HAL_GetTick>
 8001b96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b98:	e01f      	b.n	8001bda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b9a:	f7ff fc3b 	bl	8001414 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d918      	bls.n	8001bda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d011      	beq.n	8001bda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e007      	b.n	8001bea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d1d8      	bne.n	8001b9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d12e      	bne.n	8001c74 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c26:	f7ff fbf5 	bl	8001414 <HAL_GetTick>
 8001c2a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c2c:	e01b      	b.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c2e:	f7ff fbf1 	bl	8001414 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d914      	bls.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10d      	bne.n	8001c66 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	f043 0210 	orr.w	r2, r3, #16
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f043 0201 	orr.w	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d0dc      	beq.n	8001c2e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4906      	ldr	r1, [pc, #24]	; (8001d18 <__NVIC_EnableIRQ+0x34>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff ff4f 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	4603      	mov	r3, r0
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
 8001df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dfc:	f7ff ff64 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	68b9      	ldr	r1, [r7, #8]
 8001e06:	6978      	ldr	r0, [r7, #20]
 8001e08:	f7ff ffb2 	bl	8001d70 <NVIC_EncodePriority>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff81 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e1a:	bf00      	nop
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff ff57 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b08b      	sub	sp, #44	; 0x2c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e52:	e169      	b.n	8002128 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e54:	2201      	movs	r2, #1
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8158 	bne.w	8002122 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4a9a      	ldr	r2, [pc, #616]	; (80020e0 <HAL_GPIO_Init+0x2a0>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d05e      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e7c:	4a98      	ldr	r2, [pc, #608]	; (80020e0 <HAL_GPIO_Init+0x2a0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d875      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e82:	4a98      	ldr	r2, [pc, #608]	; (80020e4 <HAL_GPIO_Init+0x2a4>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d058      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e88:	4a96      	ldr	r2, [pc, #600]	; (80020e4 <HAL_GPIO_Init+0x2a4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d86f      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e8e:	4a96      	ldr	r2, [pc, #600]	; (80020e8 <HAL_GPIO_Init+0x2a8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d052      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001e94:	4a94      	ldr	r2, [pc, #592]	; (80020e8 <HAL_GPIO_Init+0x2a8>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d869      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001e9a:	4a94      	ldr	r2, [pc, #592]	; (80020ec <HAL_GPIO_Init+0x2ac>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04c      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001ea0:	4a92      	ldr	r2, [pc, #584]	; (80020ec <HAL_GPIO_Init+0x2ac>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d863      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001ea6:	4a92      	ldr	r2, [pc, #584]	; (80020f0 <HAL_GPIO_Init+0x2b0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d046      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
 8001eac:	4a90      	ldr	r2, [pc, #576]	; (80020f0 <HAL_GPIO_Init+0x2b0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d85d      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001eb2:	2b12      	cmp	r3, #18
 8001eb4:	d82a      	bhi.n	8001f0c <HAL_GPIO_Init+0xcc>
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d859      	bhi.n	8001f6e <HAL_GPIO_Init+0x12e>
 8001eba:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <HAL_GPIO_Init+0x80>)
 8001ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec0:	08001f3b 	.word	0x08001f3b
 8001ec4:	08001f15 	.word	0x08001f15
 8001ec8:	08001f27 	.word	0x08001f27
 8001ecc:	08001f69 	.word	0x08001f69
 8001ed0:	08001f6f 	.word	0x08001f6f
 8001ed4:	08001f6f 	.word	0x08001f6f
 8001ed8:	08001f6f 	.word	0x08001f6f
 8001edc:	08001f6f 	.word	0x08001f6f
 8001ee0:	08001f6f 	.word	0x08001f6f
 8001ee4:	08001f6f 	.word	0x08001f6f
 8001ee8:	08001f6f 	.word	0x08001f6f
 8001eec:	08001f6f 	.word	0x08001f6f
 8001ef0:	08001f6f 	.word	0x08001f6f
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f6f 	.word	0x08001f6f
 8001efc:	08001f6f 	.word	0x08001f6f
 8001f00:	08001f6f 	.word	0x08001f6f
 8001f04:	08001f1d 	.word	0x08001f1d
 8001f08:	08001f31 	.word	0x08001f31
 8001f0c:	4a79      	ldr	r2, [pc, #484]	; (80020f4 <HAL_GPIO_Init+0x2b4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d013      	beq.n	8001f3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f12:	e02c      	b.n	8001f6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	623b      	str	r3, [r7, #32]
          break;
 8001f1a:	e029      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	3304      	adds	r3, #4
 8001f22:	623b      	str	r3, [r7, #32]
          break;
 8001f24:	e024      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	3308      	adds	r3, #8
 8001f2c:	623b      	str	r3, [r7, #32]
          break;
 8001f2e:	e01f      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	330c      	adds	r3, #12
 8001f36:	623b      	str	r3, [r7, #32]
          break;
 8001f38:	e01a      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d102      	bne.n	8001f48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f42:	2304      	movs	r3, #4
 8001f44:	623b      	str	r3, [r7, #32]
          break;
 8001f46:	e013      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f50:	2308      	movs	r3, #8
 8001f52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69fa      	ldr	r2, [r7, #28]
 8001f58:	611a      	str	r2, [r3, #16]
          break;
 8001f5a:	e009      	b.n	8001f70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	615a      	str	r2, [r3, #20]
          break;
 8001f66:	e003      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e000      	b.n	8001f70 <HAL_GPIO_Init+0x130>
          break;
 8001f6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d801      	bhi.n	8001f7a <HAL_GPIO_Init+0x13a>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	e001      	b.n	8001f7e <HAL_GPIO_Init+0x13e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2bff      	cmp	r3, #255	; 0xff
 8001f84:	d802      	bhi.n	8001f8c <HAL_GPIO_Init+0x14c>
 8001f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	e002      	b.n	8001f92 <HAL_GPIO_Init+0x152>
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3b08      	subs	r3, #8
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	210f      	movs	r1, #15
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	6a39      	ldr	r1, [r7, #32]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	431a      	orrs	r2, r3
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 80b1 	beq.w	8002122 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6193      	str	r3, [r2, #24]
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_GPIO_Init+0x2b8>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	60bb      	str	r3, [r7, #8]
 8001fd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fd8:	4a48      	ldr	r2, [pc, #288]	; (80020fc <HAL_GPIO_Init+0x2bc>)
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	089b      	lsrs	r3, r3, #2
 8001fde:	3302      	adds	r3, #2
 8001fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	220f      	movs	r2, #15
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a40      	ldr	r2, [pc, #256]	; (8002100 <HAL_GPIO_Init+0x2c0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d013      	beq.n	800202c <HAL_GPIO_Init+0x1ec>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3f      	ldr	r2, [pc, #252]	; (8002104 <HAL_GPIO_Init+0x2c4>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00d      	beq.n	8002028 <HAL_GPIO_Init+0x1e8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3e      	ldr	r2, [pc, #248]	; (8002108 <HAL_GPIO_Init+0x2c8>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <HAL_GPIO_Init+0x1e4>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a3d      	ldr	r2, [pc, #244]	; (800210c <HAL_GPIO_Init+0x2cc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d101      	bne.n	8002020 <HAL_GPIO_Init+0x1e0>
 800201c:	2303      	movs	r3, #3
 800201e:	e006      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002020:	2304      	movs	r3, #4
 8002022:	e004      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002024:	2302      	movs	r3, #2
 8002026:	e002      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_GPIO_Init+0x1ee>
 800202c:	2300      	movs	r3, #0
 800202e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002030:	f002 0203 	and.w	r2, r2, #3
 8002034:	0092      	lsls	r2, r2, #2
 8002036:	4093      	lsls	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	4313      	orrs	r3, r2
 800203c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800203e:	492f      	ldr	r1, [pc, #188]	; (80020fc <HAL_GPIO_Init+0x2bc>)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002058:	4b2d      	ldr	r3, [pc, #180]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	492c      	ldr	r1, [pc, #176]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	600b      	str	r3, [r1, #0]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002066:	4b2a      	ldr	r3, [pc, #168]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	4928      	ldr	r1, [pc, #160]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002080:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4922      	ldr	r1, [pc, #136]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	491e      	ldr	r1, [pc, #120]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020a8:	4b19      	ldr	r3, [pc, #100]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	4918      	ldr	r1, [pc, #96]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020b6:	4b16      	ldr	r3, [pc, #88]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	4914      	ldr	r1, [pc, #80]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d021      	beq.n	8002114 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	490e      	ldr	r1, [pc, #56]	; (8002110 <HAL_GPIO_Init+0x2d0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
 80020dc:	e021      	b.n	8002122 <HAL_GPIO_Init+0x2e2>
 80020de:	bf00      	nop
 80020e0:	10320000 	.word	0x10320000
 80020e4:	10310000 	.word	0x10310000
 80020e8:	10220000 	.word	0x10220000
 80020ec:	10210000 	.word	0x10210000
 80020f0:	10120000 	.word	0x10120000
 80020f4:	10110000 	.word	0x10110000
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	40010800 	.word	0x40010800
 8002104:	40010c00 	.word	0x40010c00
 8002108:	40011000 	.word	0x40011000
 800210c:	40011400 	.word	0x40011400
 8002110:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_GPIO_Init+0x304>)
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	43db      	mvns	r3, r3
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <HAL_GPIO_Init+0x304>)
 800211e:	4013      	ands	r3, r2
 8002120:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	3301      	adds	r3, #1
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	f47f ae8e 	bne.w	8001e54 <HAL_GPIO_Init+0x14>
  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	372c      	adds	r7, #44	; 0x2c
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002164:	e003      	b.n	800216e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	041a      	lsls	r2, r3, #16
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	88fb      	ldrh	r3, [r7, #6]
 8002188:	4013      	ands	r3, r2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d006      	beq.n	800219c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002190:	88fb      	ldrh	r3, [r7, #6]
 8002192:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002194:	88fb      	ldrh	r3, [r7, #6]
 8002196:	4618      	mov	r0, r3
 8002198:	f000 f806 	bl	80021a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40010400 	.word	0x40010400

080021a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e272      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f000 8087 	beq.w	80022ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021dc:	4b92      	ldr	r3, [pc, #584]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 030c 	and.w	r3, r3, #12
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d00c      	beq.n	8002202 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e8:	4b8f      	ldr	r3, [pc, #572]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d112      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
 80021f4:	4b8c      	ldr	r3, [pc, #560]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d10b      	bne.n	800221a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002202:	4b89      	ldr	r3, [pc, #548]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d06c      	beq.n	80022e8 <HAL_RCC_OscConfig+0x12c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d168      	bne.n	80022e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e24c      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002222:	d106      	bne.n	8002232 <HAL_RCC_OscConfig+0x76>
 8002224:	4b80      	ldr	r3, [pc, #512]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a7f      	ldr	r2, [pc, #508]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800222a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	e02e      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a7a      	ldr	r2, [pc, #488]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002240:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b78      	ldr	r3, [pc, #480]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a77      	ldr	r2, [pc, #476]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800224c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0xbc>
 800225e:	4b72      	ldr	r3, [pc, #456]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a71      	ldr	r2, [pc, #452]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b6f      	ldr	r3, [pc, #444]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a6e      	ldr	r2, [pc, #440]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xd4>
 8002278:	4b6b      	ldr	r3, [pc, #428]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b68      	ldr	r3, [pc, #416]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a67      	ldr	r2, [pc, #412]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f8bc 	bl	8001414 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f8b8 	bl	8001414 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e200      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe4>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f8a8 	bl	8001414 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f8a4 	bl	8001414 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1ec      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b53      	ldr	r3, [pc, #332]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x10c>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002302:	4b49      	ldr	r3, [pc, #292]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
 800230e:	4b46      	ldr	r3, [pc, #280]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b43      	ldr	r3, [pc, #268]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c0      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4939      	ldr	r1, [pc, #228]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b36      	ldr	r3, [pc, #216]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002356:	f7ff f85d 	bl	8001414 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff f859 	bl	8001414 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b2a      	ldr	r3, [pc, #168]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4927      	ldr	r1, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b26      	ldr	r3, [pc, #152]	; (800242c <HAL_RCC_OscConfig+0x270>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7ff f83c 	bl	8001414 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff f838 	bl	8001414 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e180      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03a      	beq.n	8002440 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d019      	beq.n	8002406 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff f81c 	bl	8001414 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff f818 	bl	8001414 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e160      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 fb08 	bl	8002a14 <RCC_Delay>
 8002404:	e01c      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_RCC_OscConfig+0x274>)
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7ff f802 	bl	8001414 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002412:	e00f      	b.n	8002434 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002414:	f7fe fffe 	bl	8001414 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d908      	bls.n	8002434 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e146      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	42420000 	.word	0x42420000
 8002430:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002434:	4b92      	ldr	r3, [pc, #584]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e9      	bne.n	8002414 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80a6 	beq.w	800259a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10d      	bne.n	800247a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	61d3      	str	r3, [r2, #28]
 800246a:	4b85      	ldr	r3, [pc, #532]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247a:	4b82      	ldr	r3, [pc, #520]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002486:	4b7f      	ldr	r3, [pc, #508]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a7e      	ldr	r2, [pc, #504]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7fe ffbf 	bl	8001414 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7fe ffbb 	bl	8001414 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b64      	cmp	r3, #100	; 0x64
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e103      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ac:	4b75      	ldr	r3, [pc, #468]	; (8002684 <HAL_RCC_OscConfig+0x4c8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d106      	bne.n	80024ce <HAL_RCC_OscConfig+0x312>
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6e      	ldr	r2, [pc, #440]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	e02d      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10c      	bne.n	80024f0 <HAL_RCC_OscConfig+0x334>
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	6a1b      	ldr	r3, [r3, #32]
 80024da:	4a69      	ldr	r2, [pc, #420]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6213      	str	r3, [r2, #32]
 80024e2:	4b67      	ldr	r3, [pc, #412]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	4a66      	ldr	r2, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6213      	str	r3, [r2, #32]
 80024ee:	e01c      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	d10c      	bne.n	8002512 <HAL_RCC_OscConfig+0x356>
 80024f8:	4b61      	ldr	r3, [pc, #388]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0304 	orr.w	r3, r3, #4
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	4b5e      	ldr	r3, [pc, #376]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6213      	str	r3, [r2, #32]
 8002510:	e00b      	b.n	800252a <HAL_RCC_OscConfig+0x36e>
 8002512:	4b5b      	ldr	r3, [pc, #364]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a5a      	ldr	r2, [pc, #360]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b58      	ldr	r3, [pc, #352]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d015      	beq.n	800255e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7fe ff6f 	bl	8001414 <HAL_GetTick>
 8002536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002538:	e00a      	b.n	8002550 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800253a:	f7fe ff6b 	bl	8001414 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	f241 3288 	movw	r2, #5000	; 0x1388
 8002548:	4293      	cmp	r3, r2
 800254a:	d901      	bls.n	8002550 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002550:	4b4b      	ldr	r3, [pc, #300]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d0ee      	beq.n	800253a <HAL_RCC_OscConfig+0x37e>
 800255c:	e014      	b.n	8002588 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255e:	f7fe ff59 	bl	8001414 <HAL_GetTick>
 8002562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002564:	e00a      	b.n	800257c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002566:	f7fe ff55 	bl	8001414 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	f241 3288 	movw	r2, #5000	; 0x1388
 8002574:	4293      	cmp	r3, r2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e09b      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800257c:	4b40      	ldr	r3, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800257e:	6a1b      	ldr	r3, [r3, #32]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1ee      	bne.n	8002566 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002588:	7dfb      	ldrb	r3, [r7, #23]
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	4a3b      	ldr	r2, [pc, #236]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002598:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 8087 	beq.w	80026b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 030c 	and.w	r3, r3, #12
 80025ac:	2b08      	cmp	r3, #8
 80025ae:	d061      	beq.n	8002674 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d146      	bne.n	8002646 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b8:	4b33      	ldr	r3, [pc, #204]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe ff29 	bl	8001414 <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c6:	f7fe ff25 	bl	8001414 <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e06d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d8:	4b29      	ldr	r3, [pc, #164]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1f0      	bne.n	80025c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	4921      	ldr	r1, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a19      	ldr	r1, [r3, #32]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	430b      	orrs	r3, r1
 8002612:	491b      	ldr	r1, [pc, #108]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261e:	f7fe fef9 	bl	8001414 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe fef5 	bl	8001414 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e03d      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x46a>
 8002644:	e035      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7fe fee2 	bl	8001414 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002654:	f7fe fede 	bl	8001414 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e026      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002672:	e01e      	b.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e019      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
 8002680:	40021000 	.word	0x40021000
 8002684:	40007000 	.word	0x40007000
 8002688:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800268c:	4b0b      	ldr	r3, [pc, #44]	; (80026bc <HAL_RCC_OscConfig+0x500>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	429a      	cmp	r2, r3
 800269e:	d106      	bne.n	80026ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d001      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e000      	b.n	80026b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000

080026c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0d0      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026d4:	4b6a      	ldr	r3, [pc, #424]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d910      	bls.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b67      	ldr	r3, [pc, #412]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0207 	bic.w	r2, r3, #7
 80026ea:	4965      	ldr	r1, [pc, #404]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0b8      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d020      	beq.n	8002752 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800271c:	4b59      	ldr	r3, [pc, #356]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	4a58      	ldr	r2, [pc, #352]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002726:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002734:	4b53      	ldr	r3, [pc, #332]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	4a52      	ldr	r2, [pc, #328]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800273a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800273e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	494d      	ldr	r1, [pc, #308]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d040      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d107      	bne.n	8002776 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002766:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e07f      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b41      	ldr	r3, [pc, #260]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e073      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b3d      	ldr	r3, [pc, #244]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06b      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800279e:	4b39      	ldr	r3, [pc, #228]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f023 0203 	bic.w	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	4936      	ldr	r1, [pc, #216]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027b0:	f7fe fe30 	bl	8001414 <HAL_GetTick>
 80027b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b8:	f7fe fe2c 	bl	8001414 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e053      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 020c 	and.w	r2, r3, #12
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1eb      	bne.n	80027b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d210      	bcs.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 0207 	bic.w	r2, r3, #7
 80027f6:	4922      	ldr	r1, [pc, #136]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <HAL_RCC_ClockConfig+0x1c0>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e032      	b.n	8002876 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d008      	beq.n	800282e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800281c:	4b19      	ldr	r3, [pc, #100]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	4916      	ldr	r1, [pc, #88]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	2b00      	cmp	r3, #0
 8002838:	d009      	beq.n	800284e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800283a:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	490e      	ldr	r1, [pc, #56]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800284e:	f000 f821 	bl	8002894 <HAL_RCC_GetSysClockFreq>
 8002852:	4602      	mov	r2, r0
 8002854:	4b0b      	ldr	r3, [pc, #44]	; (8002884 <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	490a      	ldr	r1, [pc, #40]	; (8002888 <HAL_RCC_ClockConfig+0x1c8>)
 8002860:	5ccb      	ldrb	r3, [r1, r3]
 8002862:	fa22 f303 	lsr.w	r3, r2, r3
 8002866:	4a09      	ldr	r2, [pc, #36]	; (800288c <HAL_RCC_ClockConfig+0x1cc>)
 8002868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800286a:	4b09      	ldr	r3, [pc, #36]	; (8002890 <HAL_RCC_ClockConfig+0x1d0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4618      	mov	r0, r3
 8002870:	f7fe fc16 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40022000 	.word	0x40022000
 8002884:	40021000 	.word	0x40021000
 8002888:	0800a860 	.word	0x0800a860
 800288c:	20000000 	.word	0x20000000
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002894:	b490      	push	{r4, r7}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800289a:	4b29      	ldr	r3, [pc, #164]	; (8002940 <HAL_RCC_GetSysClockFreq+0xac>)
 800289c:	1d3c      	adds	r4, r7, #4
 800289e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028a4:	f240 2301 	movw	r3, #513	; 0x201
 80028a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d002      	beq.n	80028d4 <HAL_RCC_GetSysClockFreq+0x40>
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d003      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x46>
 80028d2:	e02b      	b.n	800292c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028d4:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028d6:	623b      	str	r3, [r7, #32]
      break;
 80028d8:	e02b      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	0c9b      	lsrs	r3, r3, #18
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3328      	adds	r3, #40	; 0x28
 80028e4:	443b      	add	r3, r7
 80028e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d012      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028f6:	4b13      	ldr	r3, [pc, #76]	; (8002944 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	0c5b      	lsrs	r3, r3, #17
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	3328      	adds	r3, #40	; 0x28
 8002902:	443b      	add	r3, r7
 8002904:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002908:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a0e      	ldr	r2, [pc, #56]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800290e:	fb03 f202 	mul.w	r2, r3, r2
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	627b      	str	r3, [r7, #36]	; 0x24
 800291a:	e004      	b.n	8002926 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	4a0b      	ldr	r2, [pc, #44]	; (800294c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	623b      	str	r3, [r7, #32]
      break;
 800292a:	e002      	b.n	8002932 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_GetSysClockFreq+0xb4>)
 800292e:	623b      	str	r3, [r7, #32]
      break;
 8002930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002932:	6a3b      	ldr	r3, [r7, #32]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3728      	adds	r7, #40	; 0x28
 8002938:	46bd      	mov	sp, r7
 800293a:	bc90      	pop	{r4, r7}
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	0800a7e0 	.word	0x0800a7e0
 8002944:	40021000 	.word	0x40021000
 8002948:	007a1200 	.word	0x007a1200
 800294c:	003d0900 	.word	0x003d0900

08002950 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002954:	4b02      	ldr	r3, [pc, #8]	; (8002960 <HAL_RCC_GetHCLKFreq+0x10>)
 8002956:	681b      	ldr	r3, [r3, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	20000000 	.word	0x20000000

08002964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002968:	f7ff fff2 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 800296c:	4602      	mov	r2, r0
 800296e:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	4903      	ldr	r1, [pc, #12]	; (8002988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800297a:	5ccb      	ldrb	r3, [r1, r3]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002980:	4618      	mov	r0, r3
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40021000 	.word	0x40021000
 8002988:	0800a870 	.word	0x0800a870

0800298c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002990:	f7ff ffde 	bl	8002950 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0adb      	lsrs	r3, r3, #11
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	0800a870 	.word	0x0800a870

080029b4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	220f      	movs	r2, #15
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_GetClockConfig+0x58>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f003 0203 	and.w	r2, r3, #3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80029d0:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <HAL_RCC_GetClockConfig+0x58>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetClockConfig+0x58>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_GetClockConfig+0x58>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	08db      	lsrs	r3, r3, #3
 80029ee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80029f6:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_RCC_GetClockConfig+0x5c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0207 	and.w	r2, r3, #7
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40022000 	.word	0x40022000

08002a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCC_Delay+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <RCC_Delay+0x38>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a30:	bf00      	nop
  }
  while (Delay --);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <RCC_Delay+0x1c>
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d07d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d118      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab0:	f7fe fcb0 	bl	8001414 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	e008      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fe fcac 	bl	8001414 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e06d      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02e      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d027      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fc7b 	bl	8001414 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fe fc77 	bl	8001414 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e036      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ee      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4917      	ldr	r1, [pc, #92]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42420440 	.word	0x42420440

08002bbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b08d      	sub	sp, #52	; 0x34
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002bc4:	4b58      	ldr	r3, [pc, #352]	; (8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002bc6:	f107 040c 	add.w	r4, r7, #12
 8002bca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bcc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002bd0:	f240 2301 	movw	r3, #513	; 0x201
 8002bd4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	2300      	movs	r3, #0
 8002be8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	f200 808e 	bhi.w	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d049      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d079      	beq.n	8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002c04:	e086      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 8002c06:	4b49      	ldr	r3, [pc, #292]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002c0c:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d07f      	beq.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	0c9b      	lsrs	r3, r3, #18
 8002c1c:	f003 030f 	and.w	r3, r3, #15
 8002c20:	3330      	adds	r3, #48	; 0x30
 8002c22:	443b      	add	r3, r7
 8002c24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c28:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d017      	beq.n	8002c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c34:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	0c5b      	lsrs	r3, r3, #17
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	3330      	adds	r3, #48	; 0x30
 8002c40:	443b      	add	r3, r7
 8002c42:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00d      	beq.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c52:	4a37      	ldr	r2, [pc, #220]	; (8002d30 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	fb02 f303 	mul.w	r3, r2, r3
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c62:	e004      	b.n	8002c6e <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	4a33      	ldr	r2, [pc, #204]	; (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c7a:	d102      	bne.n	8002c82 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c80:	e04a      	b.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4a2c      	ldr	r2, [pc, #176]	; (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002c88:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c90:	e042      	b.n	8002d18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8002c92:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ca2:	d108      	bne.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8002cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb4:	e01f      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cc0:	d109      	bne.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8002cce:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cd4:	e00f      	b.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ce0:	d11c      	bne.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d016      	beq.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8002cee:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002cf4:	e012      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8002cf6:	e011      	b.n	8002d1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cf8:	f7ff fe48 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	0b9b      	lsrs	r3, r3, #14
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002d12:	e004      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d14:	bf00      	nop
 8002d16:	e002      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002d1c:	bf00      	nop
    }
  }
  return (frequency);
 8002d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3734      	adds	r7, #52	; 0x34
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	0800a7f0 	.word	0x0800a7f0
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	007a1200 	.word	0x007a1200
 8002d34:	003d0900 	.word	0x003d0900
 8002d38:	aaaaaaab 	.word	0xaaaaaaab

08002d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e041      	b.n	8002dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 f839 	bl	8002dda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3304      	adds	r3, #4
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	f000 f9b4 	bl	80030e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3708      	adds	r7, #8
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d001      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e03a      	b.n	8002e7a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2202      	movs	r2, #2
 8002e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0201 	orr.w	r2, r2, #1
 8002e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a18      	ldr	r2, [pc, #96]	; (8002e84 <HAL_TIM_Base_Start_IT+0x98>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_TIM_Base_Start_IT+0x58>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2e:	d009      	beq.n	8002e44 <HAL_TIM_Base_Start_IT+0x58>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a14      	ldr	r2, [pc, #80]	; (8002e88 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_TIM_Base_Start_IT+0x58>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_TIM_Base_Start_IT+0xa0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d111      	bne.n	8002e68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b06      	cmp	r3, #6
 8002e54:	d010      	beq.n	8002e78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e66:	e007      	b.n	8002e78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40000800 	.word	0x40000800

08002e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d122      	bne.n	8002eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d11b      	bne.n	8002eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0202 	mvn.w	r2, #2
 8002ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 f8ed 	bl	80030b2 <HAL_TIM_IC_CaptureCallback>
 8002ed8:	e005      	b.n	8002ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f000 f8e0 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8ef 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d122      	bne.n	8002f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d11b      	bne.n	8002f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f06f 0204 	mvn.w	r2, #4
 8002f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f8c3 	bl	80030b2 <HAL_TIM_IC_CaptureCallback>
 8002f2c:	e005      	b.n	8002f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f8b6 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f8c5 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0308 	and.w	r3, r3, #8
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d122      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d11b      	bne.n	8002f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f06f 0208 	mvn.w	r2, #8
 8002f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2204      	movs	r2, #4
 8002f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d003      	beq.n	8002f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f899 	bl	80030b2 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e005      	b.n	8002f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f88c 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f000 f89b 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f003 0310 	and.w	r3, r3, #16
 8002f9e:	2b10      	cmp	r3, #16
 8002fa0:	d122      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d11b      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0210 	mvn.w	r2, #16
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f86f 	bl	80030b2 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f862 	bl	80030a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f871 	bl	80030c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0201 	mvn.w	r2, #1
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f7fd ff7c 	bl	8000f0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800302c:	2b80      	cmp	r3, #128	; 0x80
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8bf 	bl	80031be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	d10e      	bne.n	800306c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d107      	bne.n	800306c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f835 	bl	80030d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b20      	cmp	r3, #32
 8003078:	d10e      	bne.n	8003098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b20      	cmp	r3, #32
 8003086:	d107      	bne.n	8003098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f06f 0220 	mvn.w	r2, #32
 8003090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f88a 	bl	80031ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bc80      	pop	{r7}
 80030b0:	4770      	bx	lr

080030b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030cc:	bf00      	nop
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bc80      	pop	{r7}
 80030e6:	4770      	bx	lr

080030e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a26      	ldr	r2, [pc, #152]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x30>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a25      	ldr	r2, [pc, #148]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1c      	ldr	r2, [pc, #112]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <TIM_Base_SetConfig+0xbc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x62>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <TIM_Base_SetConfig+0xc0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	4a07      	ldr	r2, [pc, #28]	; (80031a0 <TIM_Base_SetConfig+0xb8>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d103      	bne.n	8003190 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	40012c00 	.word	0x40012c00
 80031a4:	40000400 	.word	0x40000400
 80031a8:	40000800 	.word	0x40000800

080031ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c6:	bf00      	nop
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e03f      	b.n	8003262 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd ff14 	bl	8001024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2224      	movs	r2, #36	; 0x24
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f905 	bl	8003424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b08a      	sub	sp, #40	; 0x28
 800326e:	af02      	add	r7, sp, #8
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	603b      	str	r3, [r7, #0]
 8003276:	4613      	mov	r3, r2
 8003278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d17c      	bne.n	8003384 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_UART_Transmit+0x2c>
 8003290:	88fb      	ldrh	r3, [r7, #6]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e075      	b.n	8003386 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d101      	bne.n	80032a8 <HAL_UART_Transmit+0x3e>
 80032a4:	2302      	movs	r3, #2
 80032a6:	e06e      	b.n	8003386 <HAL_UART_Transmit+0x11c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2221      	movs	r2, #33	; 0x21
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032be:	f7fe f8a9 	bl	8001414 <HAL_GetTick>
 80032c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	88fa      	ldrh	r2, [r7, #6]
 80032c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d8:	d108      	bne.n	80032ec <HAL_UART_Transmit+0x82>
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d104      	bne.n	80032ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	61bb      	str	r3, [r7, #24]
 80032ea:	e003      	b.n	80032f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80032fc:	e02a      	b.n	8003354 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f840 	bl	800338e <UART_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e036      	b.n	8003386 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	881b      	ldrh	r3, [r3, #0]
 8003322:	461a      	mov	r2, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800332c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	3302      	adds	r3, #2
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e007      	b.n	8003346 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	781a      	ldrb	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3301      	adds	r3, #1
 8003344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800334a:	b29b      	uxth	r3, r3
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1cf      	bne.n	80032fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2200      	movs	r2, #0
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 f810 	bl	800338e <UART_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e006      	b.n	8003386 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	3720      	adds	r7, #32
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b084      	sub	sp, #16
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	603b      	str	r3, [r7, #0]
 800339a:	4613      	mov	r3, r2
 800339c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800339e:	e02c      	b.n	80033fa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d028      	beq.n	80033fa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d007      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x30>
 80033ae:	f7fe f831 	bl	8001414 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d21d      	bcs.n	80033fa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033cc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695a      	ldr	r2, [r3, #20]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0201 	bic.w	r2, r2, #1
 80033dc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e00f      	b.n	800341a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4013      	ands	r3, r2
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	bf0c      	ite	eq
 800340a:	2301      	moveq	r3, #1
 800340c:	2300      	movne	r3, #0
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	79fb      	ldrb	r3, [r7, #7]
 8003414:	429a      	cmp	r2, r3
 8003416:	d0c3      	beq.n	80033a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
	...

08003424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689a      	ldr	r2, [r3, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	4313      	orrs	r3, r2
 8003452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800345e:	f023 030c 	bic.w	r3, r3, #12
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6812      	ldr	r2, [r2, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	430b      	orrs	r3, r1
 800346a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699a      	ldr	r2, [r3, #24]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a2c      	ldr	r2, [pc, #176]	; (8003538 <UART_SetConfig+0x114>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d103      	bne.n	8003494 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7ff fa7e 	bl	800298c <HAL_RCC_GetPCLK2Freq>
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	e002      	b.n	800349a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003494:	f7ff fa66 	bl	8002964 <HAL_RCC_GetPCLK1Freq>
 8003498:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	4613      	mov	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	4413      	add	r3, r2
 80034a2:	009a      	lsls	r2, r3, #2
 80034a4:	441a      	add	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	4a22      	ldr	r2, [pc, #136]	; (800353c <UART_SetConfig+0x118>)
 80034b2:	fba2 2303 	umull	r2, r3, r2, r3
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	0119      	lsls	r1, r3, #4
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009a      	lsls	r2, r3, #2
 80034c4:	441a      	add	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <UART_SetConfig+0x118>)
 80034d2:	fba3 0302 	umull	r0, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2064      	movs	r0, #100	; 0x64
 80034da:	fb00 f303 	mul.w	r3, r0, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	3332      	adds	r3, #50	; 0x32
 80034e4:	4a15      	ldr	r2, [pc, #84]	; (800353c <UART_SetConfig+0x118>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	095b      	lsrs	r3, r3, #5
 80034ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f0:	4419      	add	r1, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009a      	lsls	r2, r3, #2
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	fbb2 f2f3 	udiv	r2, r2, r3
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <UART_SetConfig+0x118>)
 800350a:	fba3 0302 	umull	r0, r3, r3, r2
 800350e:	095b      	lsrs	r3, r3, #5
 8003510:	2064      	movs	r0, #100	; 0x64
 8003512:	fb00 f303 	mul.w	r3, r0, r3
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	011b      	lsls	r3, r3, #4
 800351a:	3332      	adds	r3, #50	; 0x32
 800351c:	4a07      	ldr	r2, [pc, #28]	; (800353c <UART_SetConfig+0x118>)
 800351e:	fba2 2303 	umull	r2, r3, r2, r3
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	f003 020f 	and.w	r2, r3, #15
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	440a      	add	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003530:	bf00      	nop
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40013800 	.word	0x40013800
 800353c:	51eb851f 	.word	0x51eb851f

08003540 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003546:	f3ef 8305 	mrs	r3, IPSR
 800354a:	60bb      	str	r3, [r7, #8]
  return(result);
 800354c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003552:	f3ef 8310 	mrs	r3, PRIMASK
 8003556:	607b      	str	r3, [r7, #4]
  return(result);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d109      	bne.n	8003572 <osKernelInitialize+0x32>
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <osKernelInitialize+0x60>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d109      	bne.n	800357a <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003566:	f3ef 8311 	mrs	r3, BASEPRI
 800356a:	603b      	str	r3, [r7, #0]
  return(result);
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003572:	f06f 0305 	mvn.w	r3, #5
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e00c      	b.n	8003594 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <osKernelInitialize+0x60>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d105      	bne.n	800358e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003582:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <osKernelInitialize+0x60>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e002      	b.n	8003594 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800358e:	f04f 33ff 	mov.w	r3, #4294967295
 8003592:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003594:	68fb      	ldr	r3, [r7, #12]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3714      	adds	r7, #20
 800359a:	46bd      	mov	sp, r7
 800359c:	bc80      	pop	{r7}
 800359e:	4770      	bx	lr
 80035a0:	200002cc 	.word	0x200002cc

080035a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035aa:	f3ef 8305 	mrs	r3, IPSR
 80035ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80035b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10f      	bne.n	80035d6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b6:	f3ef 8310 	mrs	r3, PRIMASK
 80035ba:	607b      	str	r3, [r7, #4]
  return(result);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d109      	bne.n	80035d6 <osKernelStart+0x32>
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <osKernelStart+0x64>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d109      	bne.n	80035de <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80035ca:	f3ef 8311 	mrs	r3, BASEPRI
 80035ce:	603b      	str	r3, [r7, #0]
  return(result);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <osKernelStart+0x3a>
    stat = osErrorISR;
 80035d6:	f06f 0305 	mvn.w	r3, #5
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e00e      	b.n	80035fc <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <osKernelStart+0x64>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d107      	bne.n	80035f6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <osKernelStart+0x64>)
 80035e8:	2202      	movs	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80035ec:	f001 f878 	bl	80046e0 <vTaskStartScheduler>
      stat = osOK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	e002      	b.n	80035fc <osKernelStart+0x58>
    } else {
      stat = osError;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80035fc:	68fb      	ldr	r3, [r7, #12]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	200002cc 	.word	0x200002cc

0800360c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b092      	sub	sp, #72	; 0x48
 8003610:	af04      	add	r7, sp, #16
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361c:	f3ef 8305 	mrs	r3, IPSR
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003624:	2b00      	cmp	r3, #0
 8003626:	f040 8094 	bne.w	8003752 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800362a:	f3ef 8310 	mrs	r3, PRIMASK
 800362e:	623b      	str	r3, [r7, #32]
  return(result);
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f040 808d 	bne.w	8003752 <osThreadNew+0x146>
 8003638:	4b48      	ldr	r3, [pc, #288]	; (800375c <osThreadNew+0x150>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b02      	cmp	r3, #2
 800363e:	d106      	bne.n	800364e <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003640:	f3ef 8311 	mrs	r3, BASEPRI
 8003644:	61fb      	str	r3, [r7, #28]
  return(result);
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 8082 	bne.w	8003752 <osThreadNew+0x146>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d07e      	beq.n	8003752 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003658:	2318      	movs	r3, #24
 800365a:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 800365c:	2300      	movs	r3, #0
 800365e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003660:	f107 031b 	add.w	r3, r7, #27
 8003664:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8003666:	f04f 33ff 	mov.w	r3, #4294967295
 800366a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d045      	beq.n	80036fe <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <osThreadNew+0x74>
        name = attr->name;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <osThreadNew+0x9a>
 8003694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003696:	2b38      	cmp	r3, #56	; 0x38
 8003698:	d805      	bhi.n	80036a6 <osThreadNew+0x9a>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <osThreadNew+0x9e>
        return (NULL);
 80036a6:	2300      	movs	r3, #0
 80036a8:	e054      	b.n	8003754 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	089b      	lsrs	r3, r3, #2
 80036b8:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00e      	beq.n	80036e0 <osThreadNew+0xd4>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b5b      	cmp	r3, #91	; 0x5b
 80036c8:	d90a      	bls.n	80036e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <osThreadNew+0xd4>
        mem = 1;
 80036da:	2301      	movs	r3, #1
 80036dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036de:	e010      	b.n	8003702 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10c      	bne.n	8003702 <osThreadNew+0xf6>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d108      	bne.n	8003702 <osThreadNew+0xf6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <osThreadNew+0xf6>
          mem = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80036fc:	e001      	b.n	8003702 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80036fe:	2300      	movs	r3, #0
 8003700:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	2b01      	cmp	r3, #1
 8003706:	d110      	bne.n	800372a <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003710:	9202      	str	r2, [sp, #8]
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800371c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fe12 	bl	8004348 <xTaskCreateStatic>
 8003724:	4603      	mov	r3, r0
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	e013      	b.n	8003752 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	2b00      	cmp	r3, #0
 800372e:	d110      	bne.n	8003752 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003732:	b29a      	uxth	r2, r3
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	9301      	str	r3, [sp, #4]
 800373a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fe5c 	bl	8004400 <xTaskCreate>
 8003748:	4603      	mov	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d001      	beq.n	8003752 <osThreadNew+0x146>
          hTask = NULL;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003752:	697b      	ldr	r3, [r7, #20]
}
 8003754:	4618      	mov	r0, r3
 8003756:	3738      	adds	r7, #56	; 0x38
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	200002cc 	.word	0x200002cc

08003760 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003768:	f3ef 8305 	mrs	r3, IPSR
 800376c:	613b      	str	r3, [r7, #16]
  return(result);
 800376e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10f      	bne.n	8003794 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	60fb      	str	r3, [r7, #12]
  return(result);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <osDelay+0x34>
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <osDelay+0x58>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d109      	bne.n	800379c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003788:	f3ef 8311 	mrs	r3, BASEPRI
 800378c:	60bb      	str	r3, [r7, #8]
  return(result);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <osDelay+0x3c>
    stat = osErrorISR;
 8003794:	f06f 0305 	mvn.w	r3, #5
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	e007      	b.n	80037ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800379c:	2300      	movs	r3, #0
 800379e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ff66 	bl	8004678 <vTaskDelay>
    }
  }

  return (stat);
 80037ac:	697b      	ldr	r3, [r7, #20]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200002cc 	.word	0x200002cc

080037bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <vApplicationGetIdleTaskMemory+0x28>)
 80037cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a05      	ldr	r2, [pc, #20]	; (80037e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80037d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	601a      	str	r2, [r3, #0]
}
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr
 80037e4:	200002d0 	.word	0x200002d0
 80037e8:	2000032c 	.word	0x2000032c

080037ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a07      	ldr	r2, [pc, #28]	; (8003818 <vApplicationGetTimerTaskMemory+0x2c>)
 80037fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <vApplicationGetTimerTaskMemory+0x30>)
 8003802:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380a:	601a      	str	r2, [r3, #0]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	2000052c 	.word	0x2000052c
 800381c:	20000588 	.word	0x20000588

08003820 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f103 0208 	add.w	r2, r3, #8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f103 0208 	add.w	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f103 0208 	add.w	r2, r3, #8
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800385e:	b480      	push	{r7}
 8003860:	b083      	sub	sp, #12
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr

080038bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d2:	d103      	bne.n	80038dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	60fb      	str	r3, [r7, #12]
 80038da:	e00c      	b.n	80038f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3308      	adds	r3, #8
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e002      	b.n	80038ea <vListInsert+0x2e>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d2f6      	bcs.n	80038e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	601a      	str	r2, [r3, #0]
}
 8003922:	bf00      	nop
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6852      	ldr	r2, [r2, #4]
 800394c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d103      	bne.n	8003960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr
	...

08003980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039a6:	bf00      	nop
 80039a8:	e7fe      	b.n	80039a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80039aa:	f001 ffc7 	bl	800593c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	68f9      	ldr	r1, [r7, #12]
 80039b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	441a      	add	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039da:	3b01      	subs	r3, #1
 80039dc:	68f9      	ldr	r1, [r7, #12]
 80039de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	441a      	add	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	22ff      	movs	r2, #255	; 0xff
 80039ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	22ff      	movs	r2, #255	; 0xff
 80039f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d114      	bne.n	8003a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d01a      	beq.n	8003a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f8f1 	bl	8004bf4 <xTaskRemoveFromEventList>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003a18:	4b0c      	ldr	r3, [pc, #48]	; (8003a4c <xQueueGenericReset+0xcc>)
 8003a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a1e:	601a      	str	r2, [r3, #0]
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	e009      	b.n	8003a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3310      	adds	r3, #16
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff fef6 	bl	8003820 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fef1 	bl	8003820 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a3e:	f001 ffad 	bl	800599c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a42:	2301      	movs	r3, #1
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	e000ed04 	.word	0xe000ed04

08003a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af02      	add	r7, sp, #8
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <xQueueGenericCreateStatic+0x52>
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <xQueueGenericCreateStatic+0x56>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericCreateStatic+0x58>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	623b      	str	r3, [r7, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	e7fe      	b.n	8003ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d102      	bne.n	8003ace <xQueueGenericCreateStatic+0x7e>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <xQueueGenericCreateStatic+0x82>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e000      	b.n	8003ad4 <xQueueGenericCreateStatic+0x84>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10a      	bne.n	8003aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	f383 8811 	msr	BASEPRI, r3
 8003ae0:	f3bf 8f6f 	isb	sy
 8003ae4:	f3bf 8f4f 	dsb	sy
 8003ae8:	61fb      	str	r3, [r7, #28]
}
 8003aea:	bf00      	nop
 8003aec:	e7fe      	b.n	8003aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003aee:	2350      	movs	r3, #80	; 0x50
 8003af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b50      	cmp	r3, #80	; 0x50
 8003af6:	d00a      	beq.n	8003b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	61bb      	str	r3, [r7, #24]
}
 8003b0a:	bf00      	nop
 8003b0c:	e7fe      	b.n	8003b0c <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00d      	beq.n	8003b34 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b20:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	68b9      	ldr	r1, [r7, #8]
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 f805 	bl	8003b3e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3730      	adds	r7, #48	; 0x30
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b084      	sub	sp, #16
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	60f8      	str	r0, [r7, #12]
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	607a      	str	r2, [r7, #4]
 8003b4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	e002      	b.n	8003b60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	69b8      	ldr	r0, [r7, #24]
 8003b70:	f7ff ff06 	bl	8003980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b7c:	bf00      	nop
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08e      	sub	sp, #56	; 0x38
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b92:	2300      	movs	r3, #0
 8003b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10a      	bne.n	8003bb6 <xQueueGenericSend+0x32>
	__asm volatile
 8003ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba4:	f383 8811 	msr	BASEPRI, r3
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	f3bf 8f4f 	dsb	sy
 8003bb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bb2:	bf00      	nop
 8003bb4:	e7fe      	b.n	8003bb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d103      	bne.n	8003bc4 <xQueueGenericSend+0x40>
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <xQueueGenericSend+0x44>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <xQueueGenericSend+0x46>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <xQueueGenericSend+0x60>
	__asm volatile
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003be0:	bf00      	nop
 8003be2:	e7fe      	b.n	8003be2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d103      	bne.n	8003bf2 <xQueueGenericSend+0x6e>
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <xQueueGenericSend+0x72>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <xQueueGenericSend+0x74>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10a      	bne.n	8003c12 <xQueueGenericSend+0x8e>
	__asm volatile
 8003bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c00:	f383 8811 	msr	BASEPRI, r3
 8003c04:	f3bf 8f6f 	isb	sy
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	623b      	str	r3, [r7, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	e7fe      	b.n	8003c10 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c12:	f001 f9b1 	bl	8004f78 <xTaskGetSchedulerState>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d102      	bne.n	8003c22 <xQueueGenericSend+0x9e>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <xQueueGenericSend+0xa2>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xQueueGenericSend+0xa4>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d10a      	bne.n	8003c42 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c30:	f383 8811 	msr	BASEPRI, r3
 8003c34:	f3bf 8f6f 	isb	sy
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	61fb      	str	r3, [r7, #28]
}
 8003c3e:	bf00      	nop
 8003c40:	e7fe      	b.n	8003c40 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c42:	f001 fe7b 	bl	800593c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d302      	bcc.n	8003c58 <xQueueGenericSend+0xd4>
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d129      	bne.n	8003cac <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c58:	683a      	ldr	r2, [r7, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c5e:	f000 fa07 	bl	8004070 <prvCopyDataToQueue>
 8003c62:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d010      	beq.n	8003c8e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6e:	3324      	adds	r3, #36	; 0x24
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 ffbf 	bl	8004bf4 <xTaskRemoveFromEventList>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d013      	beq.n	8003ca4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c7c:	4b3f      	ldr	r3, [pc, #252]	; (8003d7c <xQueueGenericSend+0x1f8>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	e00a      	b.n	8003ca4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <xQueueGenericSend+0x1f8>)
 8003c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ca4:	f001 fe7a 	bl	800599c <vPortExitCritical>
				return pdPASS;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e063      	b.n	8003d74 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d103      	bne.n	8003cba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003cb2:	f001 fe73 	bl	800599c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e05c      	b.n	8003d74 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d106      	bne.n	8003cce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fff9 	bl	8004cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003cce:	f001 fe65 	bl	800599c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cd2:	f000 fd6b 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cd6:	f001 fe31 	bl	800593c <vPortEnterCritical>
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ce0:	b25b      	sxtb	r3, r3
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d103      	bne.n	8003cf0 <xQueueGenericSend+0x16c>
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfc:	d103      	bne.n	8003d06 <xQueueGenericSend+0x182>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d06:	f001 fe49 	bl	800599c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d0a:	1d3a      	adds	r2, r7, #4
 8003d0c:	f107 0314 	add.w	r3, r7, #20
 8003d10:	4611      	mov	r1, r2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 ffe8 	bl	8004ce8 <xTaskCheckForTimeOut>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d124      	bne.n	8003d68 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d20:	f000 fa9e 	bl	8004260 <prvIsQueueFull>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d018      	beq.n	8003d5c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	4611      	mov	r1, r2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 ff0e 	bl	8004b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3a:	f000 fa29 	bl	8004190 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d3e:	f000 fd43 	bl	80047c8 <xTaskResumeAll>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f47f af7c 	bne.w	8003c42 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <xQueueGenericSend+0x1f8>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
 8003d5a:	e772      	b.n	8003c42 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d5e:	f000 fa17 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d62:	f000 fd31 	bl	80047c8 <xTaskResumeAll>
 8003d66:	e76c      	b.n	8003c42 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d6a:	f000 fa11 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d6e:	f000 fd2b 	bl	80047c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d72:	2300      	movs	r3, #0
		}
	}
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3738      	adds	r7, #56	; 0x38
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08e      	sub	sp, #56	; 0x38
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10a      	bne.n	8003dae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003daa:	bf00      	nop
 8003dac:	e7fe      	b.n	8003dac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <xQueueGenericSendFromISR+0x3c>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <xQueueGenericSendFromISR+0x40>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <xQueueGenericSendFromISR+0x42>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	623b      	str	r3, [r7, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d103      	bne.n	8003dea <xQueueGenericSendFromISR+0x6a>
 8003de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <xQueueGenericSendFromISR+0x6e>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e000      	b.n	8003df0 <xQueueGenericSendFromISR+0x70>
 8003dee:	2300      	movs	r3, #0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10a      	bne.n	8003e0a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	61fb      	str	r3, [r7, #28]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e0a:	f001 fe59 	bl	8005ac0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e0e:	f3ef 8211 	mrs	r2, BASEPRI
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61ba      	str	r2, [r7, #24]
 8003e24:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e26:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <xQueueGenericSendFromISR+0xbc>
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d12c      	bne.n	8003e96 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	68b9      	ldr	r1, [r7, #8]
 8003e4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e4c:	f000 f910 	bl	8004070 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e50:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e58:	d112      	bne.n	8003e80 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d016      	beq.n	8003e90 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	3324      	adds	r3, #36	; 0x24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fec4 	bl	8004bf4 <xTaskRemoveFromEventList>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00e      	beq.n	8003e90 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00b      	beq.n	8003e90 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	e007      	b.n	8003e90 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e80:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e84:	3301      	adds	r3, #1
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	b25a      	sxtb	r2, r3
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e90:	2301      	movs	r3, #1
 8003e92:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e94:	e001      	b.n	8003e9a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
 8003e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3738      	adds	r7, #56	; 0x38
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08c      	sub	sp, #48	; 0x30
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <xQueueReceive+0x30>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	623b      	str	r3, [r7, #32]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <xQueueReceive+0x3e>
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <xQueueReceive+0x42>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <xQueueReceive+0x44>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueReceive+0x5e>
	__asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	61fb      	str	r3, [r7, #28]
}
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f0e:	f001 f833 	bl	8004f78 <xTaskGetSchedulerState>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d102      	bne.n	8003f1e <xQueueReceive+0x6e>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <xQueueReceive+0x72>
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <xQueueReceive+0x74>
 8003f22:	2300      	movs	r3, #0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <xQueueReceive+0x8e>
	__asm volatile
 8003f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	61bb      	str	r3, [r7, #24]
}
 8003f3a:	bf00      	nop
 8003f3c:	e7fe      	b.n	8003f3c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f3e:	f001 fcfd 	bl	800593c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01f      	beq.n	8003f8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f52:	f000 f8f7 	bl	8004144 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	1e5a      	subs	r2, r3, #1
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00f      	beq.n	8003f86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f68:	3310      	adds	r3, #16
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f000 fe42 	bl	8004bf4 <xTaskRemoveFromEventList>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f76:	4b3d      	ldr	r3, [pc, #244]	; (800406c <xQueueReceive+0x1bc>)
 8003f78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f86:	f001 fd09 	bl	800599c <vPortExitCritical>
				return pdPASS;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e069      	b.n	8004062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d103      	bne.n	8003f9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f94:	f001 fd02 	bl	800599c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e062      	b.n	8004062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d106      	bne.n	8003fb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fa2:	f107 0310 	add.w	r3, r7, #16
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fe88 	bl	8004cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fac:	2301      	movs	r3, #1
 8003fae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fb0:	f001 fcf4 	bl	800599c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fb4:	f000 fbfa 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fb8:	f001 fcc0 	bl	800593c <vPortEnterCritical>
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fc2:	b25b      	sxtb	r3, r3
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc8:	d103      	bne.n	8003fd2 <xQueueReceive+0x122>
 8003fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fd8:	b25b      	sxtb	r3, r3
 8003fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fde:	d103      	bne.n	8003fe8 <xQueueReceive+0x138>
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fe8:	f001 fcd8 	bl	800599c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fec:	1d3a      	adds	r2, r7, #4
 8003fee:	f107 0310 	add.w	r3, r7, #16
 8003ff2:	4611      	mov	r1, r2
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fe77 	bl	8004ce8 <xTaskCheckForTimeOut>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d123      	bne.n	8004048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004002:	f000 f917 	bl	8004234 <prvIsQueueEmpty>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d017      	beq.n	800403c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	3324      	adds	r3, #36	; 0x24
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fd9d 	bl	8004b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800401a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401c:	f000 f8b8 	bl	8004190 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004020:	f000 fbd2 	bl	80047c8 <xTaskResumeAll>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d189      	bne.n	8003f3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <xQueueReceive+0x1bc>)
 800402c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	f3bf 8f4f 	dsb	sy
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	e780      	b.n	8003f3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800403c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800403e:	f000 f8a7 	bl	8004190 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004042:	f000 fbc1 	bl	80047c8 <xTaskResumeAll>
 8004046:	e77a      	b.n	8003f3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404a:	f000 f8a1 	bl	8004190 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800404e:	f000 fbbb 	bl	80047c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004054:	f000 f8ee 	bl	8004234 <prvIsQueueEmpty>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	f43f af6f 	beq.w	8003f3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004062:	4618      	mov	r0, r3
 8004064:	3730      	adds	r7, #48	; 0x30
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	e000ed04 	.word	0xe000ed04

08004070 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004084:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10d      	bne.n	80040aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d14d      	bne.n	8004132 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	4618      	mov	r0, r3
 800409c:	f000 ff8a 	bl	8004fb4 <xTaskPriorityDisinherit>
 80040a0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	605a      	str	r2, [r3, #4]
 80040a8:	e043      	b.n	8004132 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d119      	bne.n	80040e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6898      	ldr	r0, [r3, #8]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	461a      	mov	r2, r3
 80040ba:	68b9      	ldr	r1, [r7, #8]
 80040bc:	f001 ff40 	bl	8005f40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	441a      	add	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d32b      	bcc.n	8004132 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	e026      	b.n	8004132 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	68d8      	ldr	r0, [r3, #12]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ec:	461a      	mov	r2, r3
 80040ee:	68b9      	ldr	r1, [r7, #8]
 80040f0:	f001 ff26 	bl	8005f40 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	425b      	negs	r3, r3
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d207      	bcs.n	8004120 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	425b      	negs	r3, r3
 800411a:	441a      	add	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d105      	bne.n	8004132 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3b01      	subs	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800413a:	697b      	ldr	r3, [r7, #20]
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	441a      	add	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	429a      	cmp	r2, r3
 800416e:	d303      	bcc.n	8004178 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68d9      	ldr	r1, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004180:	461a      	mov	r2, r3
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f001 fedc 	bl	8005f40 <memcpy>
	}
}
 8004188:	bf00      	nop
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004198:	f001 fbd0 	bl	800593c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a4:	e011      	b.n	80041ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d012      	beq.n	80041d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	3324      	adds	r3, #36	; 0x24
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 fd1e 	bl	8004bf4 <xTaskRemoveFromEventList>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041be:	f000 fdf5 	bl	8004dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	dce9      	bgt.n	80041a6 <prvUnlockQueue+0x16>
 80041d2:	e000      	b.n	80041d6 <prvUnlockQueue+0x46>
					break;
 80041d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041de:	f001 fbdd 	bl	800599c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041e2:	f001 fbab 	bl	800593c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ee:	e011      	b.n	8004214 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	3310      	adds	r3, #16
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fcf9 	bl	8004bf4 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004208:	f000 fdd0 	bl	8004dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800420c:	7bbb      	ldrb	r3, [r7, #14]
 800420e:	3b01      	subs	r3, #1
 8004210:	b2db      	uxtb	r3, r3
 8004212:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004214:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004218:	2b00      	cmp	r3, #0
 800421a:	dce9      	bgt.n	80041f0 <prvUnlockQueue+0x60>
 800421c:	e000      	b.n	8004220 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800421e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	22ff      	movs	r2, #255	; 0xff
 8004224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004228:	f001 fbb8 	bl	800599c <vPortExitCritical>
}
 800422c:	bf00      	nop
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800423c:	f001 fb7e 	bl	800593c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	2b00      	cmp	r3, #0
 8004246:	d102      	bne.n	800424e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004248:	2301      	movs	r3, #1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e001      	b.n	8004252 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004252:	f001 fba3 	bl	800599c <vPortExitCritical>

	return xReturn;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004268:	f001 fb68 	bl	800593c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004274:	429a      	cmp	r2, r3
 8004276:	d102      	bne.n	800427e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004278:	2301      	movs	r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
 800427c:	e001      	b.n	8004282 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004282:	f001 fb8b 	bl	800599c <vPortExitCritical>

	return xReturn;
 8004286:	68fb      	ldr	r3, [r7, #12]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800429a:	2300      	movs	r3, #0
 800429c:	60fb      	str	r3, [r7, #12]
 800429e:	e014      	b.n	80042ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042a0:	4a0e      	ldr	r2, [pc, #56]	; (80042dc <vQueueAddToRegistry+0x4c>)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042ac:	490b      	ldr	r1, [pc, #44]	; (80042dc <vQueueAddToRegistry+0x4c>)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042b6:	4a09      	ldr	r2, [pc, #36]	; (80042dc <vQueueAddToRegistry+0x4c>)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042c2:	e006      	b.n	80042d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b07      	cmp	r3, #7
 80042ce:	d9e7      	bls.n	80042a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000988 	.word	0x20000988

080042e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f0:	f001 fb24 	bl	800593c <vPortEnterCritical>
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042fa:	b25b      	sxtb	r3, r3
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d103      	bne.n	800430a <vQueueWaitForMessageRestricted+0x2a>
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004310:	b25b      	sxtb	r3, r3
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d103      	bne.n	8004320 <vQueueWaitForMessageRestricted+0x40>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004320:	f001 fb3c 	bl	800599c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d106      	bne.n	800433a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3324      	adds	r3, #36	; 0x24
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fc31 	bl	8004b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800433a:	6978      	ldr	r0, [r7, #20]
 800433c:	f7ff ff28 	bl	8004190 <prvUnlockQueue>
	}
 8004340:	bf00      	nop
 8004342:	3718      	adds	r7, #24
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08e      	sub	sp, #56	; 0x38
 800434c:	af04      	add	r7, sp, #16
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <xTaskCreateStatic+0x2a>
	__asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	623b      	str	r3, [r7, #32]
}
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <xTaskCreateStatic+0x46>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	61fb      	str	r3, [r7, #28]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800438e:	235c      	movs	r3, #92	; 0x5c
 8004390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b5c      	cmp	r3, #92	; 0x5c
 8004396:	d00a      	beq.n	80043ae <xTaskCreateStatic+0x66>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	61bb      	str	r3, [r7, #24]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01e      	beq.n	80043f2 <xTaskCreateStatic+0xaa>
 80043b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01b      	beq.n	80043f2 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043cc:	2300      	movs	r3, #0
 80043ce:	9303      	str	r3, [sp, #12]
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	9302      	str	r3, [sp, #8]
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	9301      	str	r3, [sp, #4]
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	68b9      	ldr	r1, [r7, #8]
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f850 	bl	800448a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ec:	f000 f8d4 	bl	8004598 <prvAddNewTaskToReadyList>
 80043f0:	e001      	b.n	80043f6 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043f6:	697b      	ldr	r3, [r7, #20]
	}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3728      	adds	r7, #40	; 0x28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af04      	add	r7, sp, #16
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	603b      	str	r3, [r7, #0]
 800440c:	4613      	mov	r3, r2
 800440e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4618      	mov	r0, r3
 8004416:	f001 fb91 	bl	8005b3c <pvPortMalloc>
 800441a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00e      	beq.n	8004440 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004422:	205c      	movs	r0, #92	; 0x5c
 8004424:	f001 fb8a 	bl	8005b3c <pvPortMalloc>
 8004428:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
 8004436:	e005      	b.n	8004444 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004438:	6978      	ldr	r0, [r7, #20]
 800443a:	f001 fc43 	bl	8005cc4 <vPortFree>
 800443e:	e001      	b.n	8004444 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d017      	beq.n	800447a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	2300      	movs	r3, #0
 8004456:	9303      	str	r3, [sp, #12]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	9302      	str	r3, [sp, #8]
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	9301      	str	r3, [sp, #4]
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f80e 	bl	800448a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800446e:	69f8      	ldr	r0, [r7, #28]
 8004470:	f000 f892 	bl	8004598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004474:	2301      	movs	r3, #1
 8004476:	61bb      	str	r3, [r7, #24]
 8004478:	e002      	b.n	8004480 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004480:	69bb      	ldr	r3, [r7, #24]
	}
 8004482:	4618      	mov	r0, r3
 8004484:	3720      	adds	r7, #32
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b088      	sub	sp, #32
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
 8004496:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	461a      	mov	r2, r3
 80044a2:	21a5      	movs	r1, #165	; 0xa5
 80044a4:	f001 fd5a 	bl	8005f5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044b2:	3b01      	subs	r3, #1
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f023 0307 	bic.w	r3, r3, #7
 80044c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	617b      	str	r3, [r7, #20]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e012      	b.n	800450e <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	7819      	ldrb	r1, [r3, #0]
 80044f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	4413      	add	r3, r2
 80044f6:	3334      	adds	r3, #52	; 0x34
 80044f8:	460a      	mov	r2, r1
 80044fa:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	4413      	add	r3, r2
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d006      	beq.n	8004516 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	3301      	adds	r3, #1
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	2b0f      	cmp	r3, #15
 8004512:	d9e9      	bls.n	80044e8 <prvInitialiseNewTask+0x5e>
 8004514:	e000      	b.n	8004518 <prvInitialiseNewTask+0x8e>
		{
			break;
 8004516:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451a:	2200      	movs	r2, #0
 800451c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	2b37      	cmp	r3, #55	; 0x37
 8004524:	d901      	bls.n	800452a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004526:	2337      	movs	r3, #55	; 0x37
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800452e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004534:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2200      	movs	r2, #0
 800453a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800453c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453e:	3304      	adds	r3, #4
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff f98c 	bl	800385e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004548:	3318      	adds	r3, #24
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f987 	bl	800385e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004554:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004564:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	2200      	movs	r2, #0
 8004570:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	68f9      	ldr	r1, [r7, #12]
 8004578:	69b8      	ldr	r0, [r7, #24]
 800457a:	f001 f8ef 	bl	800575c <pxPortInitialiseStack>
 800457e:	4602      	mov	r2, r0
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800458a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800458e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004590:	bf00      	nop
 8004592:	3720      	adds	r7, #32
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045a0:	f001 f9cc 	bl	800593c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045a4:	4b2d      	ldr	r3, [pc, #180]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a2c      	ldr	r2, [pc, #176]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ae:	4b2c      	ldr	r3, [pc, #176]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045b6:	4a2a      	ldr	r2, [pc, #168]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045bc:	4b27      	ldr	r3, [pc, #156]	; (800465c <prvAddNewTaskToReadyList+0xc4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d110      	bne.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045c4:	f000 fc16 	bl	8004df4 <prvInitialiseTaskLists>
 80045c8:	e00d      	b.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <prvAddNewTaskToReadyList+0xcc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045d2:	4b23      	ldr	r3, [pc, #140]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	429a      	cmp	r2, r3
 80045de:	d802      	bhi.n	80045e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045e6:	4b20      	ldr	r3, [pc, #128]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045f0:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <prvAddNewTaskToReadyList+0xd0>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4b1b      	ldr	r3, [pc, #108]	; (800466c <prvAddNewTaskToReadyList+0xd4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d903      	bls.n	800460c <prvAddNewTaskToReadyList+0x74>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	4a18      	ldr	r2, [pc, #96]	; (800466c <prvAddNewTaskToReadyList+0xd4>)
 800460a:	6013      	str	r3, [r2, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4a15      	ldr	r2, [pc, #84]	; (8004670 <prvAddNewTaskToReadyList+0xd8>)
 800461a:	441a      	add	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	3304      	adds	r3, #4
 8004620:	4619      	mov	r1, r3
 8004622:	4610      	mov	r0, r2
 8004624:	f7ff f927 	bl	8003876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004628:	f001 f9b8 	bl	800599c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800462c:	4b0d      	ldr	r3, [pc, #52]	; (8004664 <prvAddNewTaskToReadyList+0xcc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00e      	beq.n	8004652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <prvAddNewTaskToReadyList+0xc8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d207      	bcs.n	8004652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <prvAddNewTaskToReadyList+0xdc>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004652:	bf00      	nop
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000e9c 	.word	0x20000e9c
 8004660:	200009c8 	.word	0x200009c8
 8004664:	20000ea8 	.word	0x20000ea8
 8004668:	20000eb8 	.word	0x20000eb8
 800466c:	20000ea4 	.word	0x20000ea4
 8004670:	200009cc 	.word	0x200009cc
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <vTaskDelay+0x60>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <vTaskDelay+0x30>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
}
 80046a4:	bf00      	nop
 80046a6:	e7fe      	b.n	80046a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046a8:	f000 f880 	bl	80047ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046ac:	2100      	movs	r1, #0
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fcee 	bl	8005090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b4:	f000 f888 	bl	80047c8 <xTaskResumeAll>
 80046b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <vTaskDelay+0x64>)
 80046c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000ec4 	.word	0x20000ec4
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	; 0x28
 80046e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046ee:	463a      	mov	r2, r7
 80046f0:	1d39      	adds	r1, r7, #4
 80046f2:	f107 0308 	add.w	r3, r7, #8
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7ff f860 	bl	80037bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046fc:	6839      	ldr	r1, [r7, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	9202      	str	r2, [sp, #8]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2300      	movs	r3, #0
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	2300      	movs	r3, #0
 800470c:	460a      	mov	r2, r1
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <vTaskStartScheduler+0xb4>)
 8004710:	4821      	ldr	r0, [pc, #132]	; (8004798 <vTaskStartScheduler+0xb8>)
 8004712:	f7ff fe19 	bl	8004348 <xTaskCreateStatic>
 8004716:	4603      	mov	r3, r0
 8004718:	4a20      	ldr	r2, [pc, #128]	; (800479c <vTaskStartScheduler+0xbc>)
 800471a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800471c:	4b1f      	ldr	r3, [pc, #124]	; (800479c <vTaskStartScheduler+0xbc>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d002      	beq.n	800472a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004724:	2301      	movs	r3, #1
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e001      	b.n	800472e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800472a:	2300      	movs	r3, #0
 800472c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004734:	f000 fd00 	bl	8005138 <xTimerCreateTimerTask>
 8004738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d116      	bne.n	800476e <vTaskStartScheduler+0x8e>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004754:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <vTaskStartScheduler+0xc0>)
 8004756:	f04f 32ff 	mov.w	r2, #4294967295
 800475a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <vTaskStartScheduler+0xc4>)
 800475e:	2201      	movs	r2, #1
 8004760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004762:	4b11      	ldr	r3, [pc, #68]	; (80047a8 <vTaskStartScheduler+0xc8>)
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004768:	f001 f876 	bl	8005858 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800476c:	e00e      	b.n	800478c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004774:	d10a      	bne.n	800478c <vTaskStartScheduler+0xac>
	__asm volatile
 8004776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477a:	f383 8811 	msr	BASEPRI, r3
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f3bf 8f4f 	dsb	sy
 8004786:	60fb      	str	r3, [r7, #12]
}
 8004788:	bf00      	nop
 800478a:	e7fe      	b.n	800478a <vTaskStartScheduler+0xaa>
}
 800478c:	bf00      	nop
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	0800a800 	.word	0x0800a800
 8004798:	08004dc5 	.word	0x08004dc5
 800479c:	20000ec0 	.word	0x20000ec0
 80047a0:	20000ebc 	.word	0x20000ebc
 80047a4:	20000ea8 	.word	0x20000ea8
 80047a8:	20000ea0 	.word	0x20000ea0

080047ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000ec4 	.word	0x20000ec4

080047c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047d6:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047f4:	f001 f8a2 	bl	800593c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <xTaskResumeAll+0x118>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <xTaskResumeAll+0x118>)
 8004800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <xTaskResumeAll+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d162      	bne.n	80048d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <xTaskResumeAll+0x11c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d05e      	beq.n	80048d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004812:	e02f      	b.n	8004874 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <xTaskResumeAll+0x120>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff f883 	bl	800392c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff f87e 	bl	800392c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <xTaskResumeAll+0x124>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskResumeAll+0x7c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <xTaskResumeAll+0x124>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <xTaskResumeAll+0x128>)
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7ff f80b 	bl	8003876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <xTaskResumeAll+0x12c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <xTaskResumeAll+0x130>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <xTaskResumeAll+0x120>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1cb      	bne.n	8004814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004882:	f000 fb55 	bl	8004f30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <xTaskResumeAll+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004892:	f000 f845 	bl	8004920 <xTaskIncrementTick>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <xTaskResumeAll+0x130>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f1      	bne.n	8004892 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <xTaskResumeAll+0x134>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <xTaskResumeAll+0x130>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <xTaskResumeAll+0x138>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d0:	f001 f864 	bl	800599c <vPortExitCritical>

	return xAlreadyYielded;
 80048d4:	68bb      	ldr	r3, [r7, #8]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000ec4 	.word	0x20000ec4
 80048e4:	20000e9c 	.word	0x20000e9c
 80048e8:	20000e5c 	.word	0x20000e5c
 80048ec:	20000ea4 	.word	0x20000ea4
 80048f0:	200009cc 	.word	0x200009cc
 80048f4:	200009c8 	.word	0x200009c8
 80048f8:	20000eb0 	.word	0x20000eb0
 80048fc:	20000eac 	.word	0x20000eac
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800490a:	4b04      	ldr	r3, [pc, #16]	; (800491c <xTaskGetTickCount+0x18>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	20000ea0 	.word	0x20000ea0

08004920 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <xTaskIncrementTick+0x150>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 808e 	bne.w	8004a50 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004934:	4b4f      	ldr	r3, [pc, #316]	; (8004a74 <xTaskIncrementTick+0x154>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800493c:	4a4d      	ldr	r2, [pc, #308]	; (8004a74 <xTaskIncrementTick+0x154>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d120      	bne.n	800498a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004948:	4b4b      	ldr	r3, [pc, #300]	; (8004a78 <xTaskIncrementTick+0x158>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <xTaskIncrementTick+0x48>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	603b      	str	r3, [r7, #0]
}
 8004964:	bf00      	nop
 8004966:	e7fe      	b.n	8004966 <xTaskIncrementTick+0x46>
 8004968:	4b43      	ldr	r3, [pc, #268]	; (8004a78 <xTaskIncrementTick+0x158>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	4b43      	ldr	r3, [pc, #268]	; (8004a7c <xTaskIncrementTick+0x15c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a41      	ldr	r2, [pc, #260]	; (8004a78 <xTaskIncrementTick+0x158>)
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	4a41      	ldr	r2, [pc, #260]	; (8004a7c <xTaskIncrementTick+0x15c>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	4b40      	ldr	r3, [pc, #256]	; (8004a80 <xTaskIncrementTick+0x160>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3301      	adds	r3, #1
 8004982:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <xTaskIncrementTick+0x160>)
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	f000 fad3 	bl	8004f30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800498a:	4b3e      	ldr	r3, [pc, #248]	; (8004a84 <xTaskIncrementTick+0x164>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d34e      	bcc.n	8004a32 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004994:	4b38      	ldr	r3, [pc, #224]	; (8004a78 <xTaskIncrementTick+0x158>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <xTaskIncrementTick+0x82>
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <xTaskIncrementTick+0x84>
 80049a2:	2300      	movs	r3, #0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d004      	beq.n	80049b2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <xTaskIncrementTick+0x164>)
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295
 80049ae:	601a      	str	r2, [r3, #0]
					break;
 80049b0:	e03f      	b.n	8004a32 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80049b2:	4b31      	ldr	r3, [pc, #196]	; (8004a78 <xTaskIncrementTick+0x158>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d203      	bcs.n	80049d2 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049ca:	4a2e      	ldr	r2, [pc, #184]	; (8004a84 <xTaskIncrementTick+0x164>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6013      	str	r3, [r2, #0]
						break;
 80049d0:	e02f      	b.n	8004a32 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	3304      	adds	r3, #4
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7fe ffa8 	bl	800392c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	3318      	adds	r3, #24
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe ff9f 	bl	800392c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <xTaskIncrementTick+0x168>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d903      	bls.n	8004a02 <xTaskIncrementTick+0xe2>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	4a22      	ldr	r2, [pc, #136]	; (8004a88 <xTaskIncrementTick+0x168>)
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <xTaskIncrementTick+0x16c>)
 8004a10:	441a      	add	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f7fe ff2c 	bl	8003876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <xTaskIncrementTick+0x170>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d3b3      	bcc.n	8004994 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a30:	e7b0      	b.n	8004994 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a32:	4b17      	ldr	r3, [pc, #92]	; (8004a90 <xTaskIncrementTick+0x170>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a38:	4914      	ldr	r1, [pc, #80]	; (8004a8c <xTaskIncrementTick+0x16c>)
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	440b      	add	r3, r1
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d907      	bls.n	8004a5a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e004      	b.n	8004a5a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a50:	4b10      	ldr	r3, [pc, #64]	; (8004a94 <xTaskIncrementTick+0x174>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3301      	adds	r3, #1
 8004a56:	4a0f      	ldr	r2, [pc, #60]	; (8004a94 <xTaskIncrementTick+0x174>)
 8004a58:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a5a:	4b0f      	ldr	r3, [pc, #60]	; (8004a98 <xTaskIncrementTick+0x178>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004a62:	2301      	movs	r3, #1
 8004a64:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a66:	697b      	ldr	r3, [r7, #20]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000ec4 	.word	0x20000ec4
 8004a74:	20000ea0 	.word	0x20000ea0
 8004a78:	20000e54 	.word	0x20000e54
 8004a7c:	20000e58 	.word	0x20000e58
 8004a80:	20000eb4 	.word	0x20000eb4
 8004a84:	20000ebc 	.word	0x20000ebc
 8004a88:	20000ea4 	.word	0x20000ea4
 8004a8c:	200009cc 	.word	0x200009cc
 8004a90:	200009c8 	.word	0x200009c8
 8004a94:	20000eac 	.word	0x20000eac
 8004a98:	20000eb0 	.word	0x20000eb0

08004a9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004aa2:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <vTaskSwitchContext+0xa4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aaa:	4b26      	ldr	r3, [pc, #152]	; (8004b44 <vTaskSwitchContext+0xa8>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ab0:	e041      	b.n	8004b36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004ab2:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <vTaskSwitchContext+0xa8>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004ab8:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <vTaskSwitchContext+0xac>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	e010      	b.n	8004ae2 <vTaskSwitchContext+0x46>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10a      	bne.n	8004adc <vTaskSwitchContext+0x40>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	607b      	str	r3, [r7, #4]
}
 8004ad8:	bf00      	nop
 8004ada:	e7fe      	b.n	8004ada <vTaskSwitchContext+0x3e>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	491a      	ldr	r1, [pc, #104]	; (8004b4c <vTaskSwitchContext+0xb0>)
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	440b      	add	r3, r1
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d0e4      	beq.n	8004ac0 <vTaskSwitchContext+0x24>
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4613      	mov	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4a12      	ldr	r2, [pc, #72]	; (8004b4c <vTaskSwitchContext+0xb0>)
 8004b02:	4413      	add	r3, r2
 8004b04:	60bb      	str	r3, [r7, #8]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	605a      	str	r2, [r3, #4]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	3308      	adds	r3, #8
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d104      	bne.n	8004b26 <vTaskSwitchContext+0x8a>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	605a      	str	r2, [r3, #4]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <vTaskSwitchContext+0xb4>)
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <vTaskSwitchContext+0xac>)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6013      	str	r3, [r2, #0]
}
 8004b36:	bf00      	nop
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	20000ec4 	.word	0x20000ec4
 8004b44:	20000eb0 	.word	0x20000eb0
 8004b48:	20000ea4 	.word	0x20000ea4
 8004b4c:	200009cc 	.word	0x200009cc
 8004b50:	200009c8 	.word	0x200009c8

08004b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10a      	bne.n	8004b7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	60fb      	str	r3, [r7, #12]
}
 8004b76:	bf00      	nop
 8004b78:	e7fe      	b.n	8004b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b7a:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <vTaskPlaceOnEventList+0x44>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3318      	adds	r3, #24
 8004b80:	4619      	mov	r1, r3
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fe fe9a 	bl	80038bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b88:	2101      	movs	r1, #1
 8004b8a:	6838      	ldr	r0, [r7, #0]
 8004b8c:	f000 fa80 	bl	8005090 <prvAddCurrentTaskToDelayedList>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	200009c8 	.word	0x200009c8

08004b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	617b      	str	r3, [r7, #20]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	4619      	mov	r1, r3
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7fe fe52 	bl	8003876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bde:	6879      	ldr	r1, [r7, #4]
 8004be0:	68b8      	ldr	r0, [r7, #8]
 8004be2:	f000 fa55 	bl	8005090 <prvAddCurrentTaskToDelayedList>
	}
 8004be6:	bf00      	nop
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	200009c8 	.word	0x200009c8

08004bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d10a      	bne.n	8004c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
 8004c1a:	60fb      	str	r3, [r7, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	e7fe      	b.n	8004c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3318      	adds	r3, #24
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fe81 	bl	800392c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <xTaskRemoveFromEventList+0xb0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d11d      	bne.n	8004c6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	3304      	adds	r3, #4
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe fe78 	bl	800392c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4b19      	ldr	r3, [pc, #100]	; (8004ca8 <xTaskRemoveFromEventList+0xb4>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d903      	bls.n	8004c50 <xTaskRemoveFromEventList+0x5c>
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4c:	4a16      	ldr	r2, [pc, #88]	; (8004ca8 <xTaskRemoveFromEventList+0xb4>)
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4a13      	ldr	r2, [pc, #76]	; (8004cac <xTaskRemoveFromEventList+0xb8>)
 8004c5e:	441a      	add	r2, r3
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	3304      	adds	r3, #4
 8004c64:	4619      	mov	r1, r3
 8004c66:	4610      	mov	r0, r2
 8004c68:	f7fe fe05 	bl	8003876 <vListInsertEnd>
 8004c6c:	e005      	b.n	8004c7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3318      	adds	r3, #24
 8004c72:	4619      	mov	r1, r3
 8004c74:	480e      	ldr	r0, [pc, #56]	; (8004cb0 <xTaskRemoveFromEventList+0xbc>)
 8004c76:	f7fe fdfe 	bl	8003876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	; (8004cb4 <xTaskRemoveFromEventList+0xc0>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d905      	bls.n	8004c94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	; (8004cb8 <xTaskRemoveFromEventList+0xc4>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
 8004c92:	e001      	b.n	8004c98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004c98:	697b      	ldr	r3, [r7, #20]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000ec4 	.word	0x20000ec4
 8004ca8:	20000ea4 	.word	0x20000ea4
 8004cac:	200009cc 	.word	0x200009cc
 8004cb0:	20000e5c 	.word	0x20000e5c
 8004cb4:	200009c8 	.word	0x200009c8
 8004cb8:	20000eb0 	.word	0x20000eb0

08004cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <vTaskInternalSetTimeOutState+0x24>)
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ccc:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <vTaskInternalSetTimeOutState+0x28>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	605a      	str	r2, [r3, #4]
}
 8004cd4:	bf00      	nop
 8004cd6:	370c      	adds	r7, #12
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bc80      	pop	{r7}
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000eb4 	.word	0x20000eb4
 8004ce4:	20000ea0 	.word	0x20000ea0

08004ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	613b      	str	r3, [r7, #16]
}
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	60fb      	str	r3, [r7, #12]
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d2a:	f000 fe07 	bl	800593c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <xTaskCheckForTimeOut+0xbc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	69ba      	ldr	r2, [r7, #24]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d102      	bne.n	8004d4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	e023      	b.n	8004d96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	4b15      	ldr	r3, [pc, #84]	; (8004da8 <xTaskCheckForTimeOut+0xc0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d007      	beq.n	8004d6a <xTaskCheckForTimeOut+0x82>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d302      	bcc.n	8004d6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	e015      	b.n	8004d96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d20b      	bcs.n	8004d8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad2      	subs	r2, r2, r3
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff ff9b 	bl	8004cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e004      	b.n	8004d96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d96:	f000 fe01 	bl	800599c <vPortExitCritical>

	return xReturn;
 8004d9a:	69fb      	ldr	r3, [r7, #28]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3720      	adds	r7, #32
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	20000ea0 	.word	0x20000ea0
 8004da8:	20000eb4 	.word	0x20000eb4

08004dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004db0:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <vTaskMissedYield+0x14>)
 8004db2:	2201      	movs	r2, #1
 8004db4:	601a      	str	r2, [r3, #0]
}
 8004db6:	bf00      	nop
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	20000eb0 	.word	0x20000eb0

08004dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dcc:	f000 f852 	bl	8004e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004dd0:	4b06      	ldr	r3, [pc, #24]	; (8004dec <prvIdleTask+0x28>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d9f9      	bls.n	8004dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <prvIdleTask+0x2c>)
 8004dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004de8:	e7f0      	b.n	8004dcc <prvIdleTask+0x8>
 8004dea:	bf00      	nop
 8004dec:	200009cc 	.word	0x200009cc
 8004df0:	e000ed04 	.word	0xe000ed04

08004df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	e00c      	b.n	8004e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4a12      	ldr	r2, [pc, #72]	; (8004e54 <prvInitialiseTaskLists+0x60>)
 8004e0c:	4413      	add	r3, r2
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f7fe fd06 	bl	8003820 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	3301      	adds	r3, #1
 8004e18:	607b      	str	r3, [r7, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b37      	cmp	r3, #55	; 0x37
 8004e1e:	d9ef      	bls.n	8004e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e20:	480d      	ldr	r0, [pc, #52]	; (8004e58 <prvInitialiseTaskLists+0x64>)
 8004e22:	f7fe fcfd 	bl	8003820 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e26:	480d      	ldr	r0, [pc, #52]	; (8004e5c <prvInitialiseTaskLists+0x68>)
 8004e28:	f7fe fcfa 	bl	8003820 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e2c:	480c      	ldr	r0, [pc, #48]	; (8004e60 <prvInitialiseTaskLists+0x6c>)
 8004e2e:	f7fe fcf7 	bl	8003820 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e32:	480c      	ldr	r0, [pc, #48]	; (8004e64 <prvInitialiseTaskLists+0x70>)
 8004e34:	f7fe fcf4 	bl	8003820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e38:	480b      	ldr	r0, [pc, #44]	; (8004e68 <prvInitialiseTaskLists+0x74>)
 8004e3a:	f7fe fcf1 	bl	8003820 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <prvInitialiseTaskLists+0x78>)
 8004e40:	4a05      	ldr	r2, [pc, #20]	; (8004e58 <prvInitialiseTaskLists+0x64>)
 8004e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e44:	4b0a      	ldr	r3, [pc, #40]	; (8004e70 <prvInitialiseTaskLists+0x7c>)
 8004e46:	4a05      	ldr	r2, [pc, #20]	; (8004e5c <prvInitialiseTaskLists+0x68>)
 8004e48:	601a      	str	r2, [r3, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	200009cc 	.word	0x200009cc
 8004e58:	20000e2c 	.word	0x20000e2c
 8004e5c:	20000e40 	.word	0x20000e40
 8004e60:	20000e5c 	.word	0x20000e5c
 8004e64:	20000e70 	.word	0x20000e70
 8004e68:	20000e88 	.word	0x20000e88
 8004e6c:	20000e54 	.word	0x20000e54
 8004e70:	20000e58 	.word	0x20000e58

08004e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e7a:	e019      	b.n	8004eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e7c:	f000 fd5e 	bl	800593c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e80:	4b10      	ldr	r3, [pc, #64]	; (8004ec4 <prvCheckTasksWaitingTermination+0x50>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fe fd4d 	bl	800392c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e92:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <prvCheckTasksWaitingTermination+0x54>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	4a0b      	ldr	r2, [pc, #44]	; (8004ec8 <prvCheckTasksWaitingTermination+0x54>)
 8004e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e9c:	4b0b      	ldr	r3, [pc, #44]	; (8004ecc <prvCheckTasksWaitingTermination+0x58>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <prvCheckTasksWaitingTermination+0x58>)
 8004ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ea6:	f000 fd79 	bl	800599c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f810 	bl	8004ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eb0:	4b06      	ldr	r3, [pc, #24]	; (8004ecc <prvCheckTasksWaitingTermination+0x58>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1e1      	bne.n	8004e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004eb8:	bf00      	nop
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000e70 	.word	0x20000e70
 8004ec8:	20000e9c 	.word	0x20000e9c
 8004ecc:	20000e84 	.word	0x20000e84

08004ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f000 feec 	bl	8005cc4 <vPortFree>
				vPortFree( pxTCB );
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fee9 	bl	8005cc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004ef2:	e018      	b.n	8004f26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d103      	bne.n	8004f06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 fee0 	bl	8005cc4 <vPortFree>
	}
 8004f04:	e00f      	b.n	8004f26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d00a      	beq.n	8004f26 <prvDeleteTCB+0x56>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	60fb      	str	r3, [r7, #12]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <prvDeleteTCB+0x54>
	}
 8004f26:	bf00      	nop
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f36:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <prvResetNextTaskUnblockTime+0x40>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <prvResetNextTaskUnblockTime+0x14>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <prvResetNextTaskUnblockTime+0x16>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d004      	beq.n	8004f54 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f4a:	4b0a      	ldr	r3, [pc, #40]	; (8004f74 <prvResetNextTaskUnblockTime+0x44>)
 8004f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f50:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f52:	e008      	b.n	8004f66 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f54:	4b06      	ldr	r3, [pc, #24]	; (8004f70 <prvResetNextTaskUnblockTime+0x40>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	4a04      	ldr	r2, [pc, #16]	; (8004f74 <prvResetNextTaskUnblockTime+0x44>)
 8004f64:	6013      	str	r3, [r2, #0]
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bc80      	pop	{r7}
 8004f6e:	4770      	bx	lr
 8004f70:	20000e54 	.word	0x20000e54
 8004f74:	20000ebc 	.word	0x20000ebc

08004f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <xTaskGetSchedulerState+0x34>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d102      	bne.n	8004f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f86:	2301      	movs	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	e008      	b.n	8004f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8c:	4b08      	ldr	r3, [pc, #32]	; (8004fb0 <xTaskGetSchedulerState+0x38>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d102      	bne.n	8004f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f94:	2302      	movs	r3, #2
 8004f96:	607b      	str	r3, [r7, #4]
 8004f98:	e001      	b.n	8004f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f9e:	687b      	ldr	r3, [r7, #4]
	}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000ea8 	.word	0x20000ea8
 8004fb0:	20000ec4 	.word	0x20000ec4

08004fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d056      	beq.n	8005078 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fca:	4b2e      	ldr	r3, [pc, #184]	; (8005084 <xTaskPriorityDisinherit+0xd0>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d00a      	beq.n	8004fea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	60fb      	str	r3, [r7, #12]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60bb      	str	r3, [r7, #8]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800500c:	1e5a      	subs	r2, r3, #1
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	429a      	cmp	r2, r3
 800501c:	d02c      	beq.n	8005078 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005022:	2b00      	cmp	r3, #0
 8005024:	d128      	bne.n	8005078 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fc7e 	bl	800392c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <xTaskPriorityDisinherit+0xd4>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	429a      	cmp	r2, r3
 800504e:	d903      	bls.n	8005058 <xTaskPriorityDisinherit+0xa4>
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <xTaskPriorityDisinherit+0xd4>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4a09      	ldr	r2, [pc, #36]	; (800508c <xTaskPriorityDisinherit+0xd8>)
 8005066:	441a      	add	r2, r3
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	3304      	adds	r3, #4
 800506c:	4619      	mov	r1, r3
 800506e:	4610      	mov	r0, r2
 8005070:	f7fe fc01 	bl	8003876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005074:	2301      	movs	r3, #1
 8005076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005078:	697b      	ldr	r3, [r7, #20]
	}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	200009c8 	.word	0x200009c8
 8005088:	20000ea4 	.word	0x20000ea4
 800508c:	200009cc 	.word	0x200009cc

08005090 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800509a:	4b21      	ldr	r3, [pc, #132]	; (8005120 <prvAddCurrentTaskToDelayedList+0x90>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050a0:	4b20      	ldr	r3, [pc, #128]	; (8005124 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3304      	adds	r3, #4
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fc40 	bl	800392c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b2:	d10a      	bne.n	80050ca <prvAddCurrentTaskToDelayedList+0x3a>
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ba:	4b1a      	ldr	r3, [pc, #104]	; (8005124 <prvAddCurrentTaskToDelayedList+0x94>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3304      	adds	r3, #4
 80050c0:	4619      	mov	r1, r3
 80050c2:	4819      	ldr	r0, [pc, #100]	; (8005128 <prvAddCurrentTaskToDelayedList+0x98>)
 80050c4:	f7fe fbd7 	bl	8003876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c8:	e026      	b.n	8005118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4413      	add	r3, r2
 80050d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050d2:	4b14      	ldr	r3, [pc, #80]	; (8005124 <prvAddCurrentTaskToDelayedList+0x94>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d209      	bcs.n	80050f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050e2:	4b12      	ldr	r3, [pc, #72]	; (800512c <prvAddCurrentTaskToDelayedList+0x9c>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	4b0f      	ldr	r3, [pc, #60]	; (8005124 <prvAddCurrentTaskToDelayedList+0x94>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7fe fbe4 	bl	80038bc <vListInsert>
}
 80050f4:	e010      	b.n	8005118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050f6:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b0a      	ldr	r3, [pc, #40]	; (8005124 <prvAddCurrentTaskToDelayedList+0x94>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7fe fbda 	bl	80038bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <prvAddCurrentTaskToDelayedList+0xa4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	429a      	cmp	r2, r3
 8005110:	d202      	bcs.n	8005118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005112:	4a08      	ldr	r2, [pc, #32]	; (8005134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6013      	str	r3, [r2, #0]
}
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20000ea0 	.word	0x20000ea0
 8005124:	200009c8 	.word	0x200009c8
 8005128:	20000e88 	.word	0x20000e88
 800512c:	20000e58 	.word	0x20000e58
 8005130:	20000e54 	.word	0x20000e54
 8005134:	20000ebc 	.word	0x20000ebc

08005138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08a      	sub	sp, #40	; 0x28
 800513c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800513e:	2300      	movs	r3, #0
 8005140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005142:	f000 facb 	bl	80056dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005146:	4b1c      	ldr	r3, [pc, #112]	; (80051b8 <xTimerCreateTimerTask+0x80>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d021      	beq.n	8005192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005156:	1d3a      	adds	r2, r7, #4
 8005158:	f107 0108 	add.w	r1, r7, #8
 800515c:	f107 030c 	add.w	r3, r7, #12
 8005160:	4618      	mov	r0, r3
 8005162:	f7fe fb43 	bl	80037ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	9202      	str	r2, [sp, #8]
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	2302      	movs	r3, #2
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	460a      	mov	r2, r1
 8005178:	4910      	ldr	r1, [pc, #64]	; (80051bc <xTimerCreateTimerTask+0x84>)
 800517a:	4811      	ldr	r0, [pc, #68]	; (80051c0 <xTimerCreateTimerTask+0x88>)
 800517c:	f7ff f8e4 	bl	8004348 <xTaskCreateStatic>
 8005180:	4603      	mov	r3, r0
 8005182:	4a10      	ldr	r2, [pc, #64]	; (80051c4 <xTimerCreateTimerTask+0x8c>)
 8005184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005186:	4b0f      	ldr	r3, [pc, #60]	; (80051c4 <xTimerCreateTimerTask+0x8c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d001      	beq.n	8005192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800518e:	2301      	movs	r3, #1
 8005190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	613b      	str	r3, [r7, #16]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051ae:	697b      	ldr	r3, [r7, #20]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000ef8 	.word	0x20000ef8
 80051bc:	0800a808 	.word	0x0800a808
 80051c0:	080052e5 	.word	0x080052e5
 80051c4:	20000efc 	.word	0x20000efc

080051c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b08a      	sub	sp, #40	; 0x28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10a      	bne.n	80051f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	623b      	str	r3, [r7, #32]
}
 80051f2:	bf00      	nop
 80051f4:	e7fe      	b.n	80051f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <xTimerGenericCommand+0x98>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d02a      	beq.n	8005254 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	2b05      	cmp	r3, #5
 800520e:	dc18      	bgt.n	8005242 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005210:	f7ff feb2 	bl	8004f78 <xTaskGetSchedulerState>
 8005214:	4603      	mov	r3, r0
 8005216:	2b02      	cmp	r3, #2
 8005218:	d109      	bne.n	800522e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800521a:	4b11      	ldr	r3, [pc, #68]	; (8005260 <xTimerGenericCommand+0x98>)
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	f107 0110 	add.w	r1, r7, #16
 8005222:	2300      	movs	r3, #0
 8005224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005226:	f7fe fcad 	bl	8003b84 <xQueueGenericSend>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24
 800522c:	e012      	b.n	8005254 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <xTimerGenericCommand+0x98>)
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	f107 0110 	add.w	r1, r7, #16
 8005236:	2300      	movs	r3, #0
 8005238:	2200      	movs	r2, #0
 800523a:	f7fe fca3 	bl	8003b84 <xQueueGenericSend>
 800523e:	6278      	str	r0, [r7, #36]	; 0x24
 8005240:	e008      	b.n	8005254 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <xTimerGenericCommand+0x98>)
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	f107 0110 	add.w	r1, r7, #16
 800524a:	2300      	movs	r3, #0
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	f7fe fd97 	bl	8003d80 <xQueueGenericSendFromISR>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005256:	4618      	mov	r0, r3
 8005258:	3728      	adds	r7, #40	; 0x28
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000ef8 	.word	0x20000ef8

08005264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b088      	sub	sp, #32
 8005268:	af02      	add	r7, sp, #8
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <prvProcessExpiredTimer+0x7c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	3304      	adds	r3, #4
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fb55 	bl	800392c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d122      	bne.n	80052d0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	18d1      	adds	r1, r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	6978      	ldr	r0, [r7, #20]
 8005298:	f000 f8c8 	bl	800542c <prvInsertTimerInActiveList>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a2:	2300      	movs	r3, #0
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	2300      	movs	r3, #0
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	2100      	movs	r1, #0
 80052ac:	6978      	ldr	r0, [r7, #20]
 80052ae:	f7ff ff8b 	bl	80051c8 <xTimerGenericCommand>
 80052b2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	60fb      	str	r3, [r7, #12]
}
 80052cc:	bf00      	nop
 80052ce:	e7fe      	b.n	80052ce <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	6978      	ldr	r0, [r7, #20]
 80052d6:	4798      	blx	r3
}
 80052d8:	bf00      	nop
 80052da:	3718      	adds	r7, #24
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000ef0 	.word	0x20000ef0

080052e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052ec:	f107 0308 	add.w	r3, r7, #8
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f857 	bl	80053a4 <prvGetNextExpireTime>
 80052f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4619      	mov	r1, r3
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f803 	bl	8005308 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005302:	f000 f8d5 	bl	80054b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005306:	e7f1      	b.n	80052ec <prvTimerTask+0x8>

08005308 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005312:	f7ff fa4b 	bl	80047ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f866 	bl	80053ec <prvSampleTimeNow>
 8005320:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d130      	bne.n	800538a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <prvProcessTimerOrBlockTask+0x3c>
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d806      	bhi.n	8005344 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005336:	f7ff fa47 	bl	80047c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7ff ff91 	bl	8005264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005342:	e024      	b.n	800538e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800534a:	4b13      	ldr	r3, [pc, #76]	; (8005398 <prvProcessTimerOrBlockTask+0x90>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800535c:	4b0f      	ldr	r3, [pc, #60]	; (800539c <prvProcessTimerOrBlockTask+0x94>)
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	683a      	ldr	r2, [r7, #0]
 8005368:	4619      	mov	r1, r3
 800536a:	f7fe ffb9 	bl	80042e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800536e:	f7ff fa2b 	bl	80047c8 <xTaskResumeAll>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10a      	bne.n	800538e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <prvProcessTimerOrBlockTask+0x98>)
 800537a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	f3bf 8f6f 	isb	sy
}
 8005388:	e001      	b.n	800538e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800538a:	f7ff fa1d 	bl	80047c8 <xTaskResumeAll>
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000ef4 	.word	0x20000ef4
 800539c:	20000ef8 	.word	0x20000ef8
 80053a0:	e000ed04 	.word	0xe000ed04

080053a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053ac:	4b0e      	ldr	r3, [pc, #56]	; (80053e8 <prvGetNextExpireTime+0x44>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d105      	bne.n	80053d6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053ca:	4b07      	ldr	r3, [pc, #28]	; (80053e8 <prvGetNextExpireTime+0x44>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e001      	b.n	80053da <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053da:	68fb      	ldr	r3, [r7, #12]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bc80      	pop	{r7}
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000ef0 	.word	0x20000ef0

080053ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053f4:	f7ff fa86 	bl	8004904 <xTaskGetTickCount>
 80053f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053fa:	4b0b      	ldr	r3, [pc, #44]	; (8005428 <prvSampleTimeNow+0x3c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	429a      	cmp	r2, r3
 8005402:	d205      	bcs.n	8005410 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005404:	f000 f908 	bl	8005618 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e002      	b.n	8005416 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005416:	4a04      	ldr	r2, [pc, #16]	; (8005428 <prvSampleTimeNow+0x3c>)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800541c:	68fb      	ldr	r3, [r7, #12]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000f00 	.word	0x20000f00

0800542c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800543a:	2300      	movs	r3, #0
 800543c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	429a      	cmp	r2, r3
 8005450:	d812      	bhi.n	8005478 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	429a      	cmp	r2, r3
 800545e:	d302      	bcc.n	8005466 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e01b      	b.n	800549e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <prvInsertTimerInActiveList+0x7c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fe fa23 	bl	80038bc <vListInsert>
 8005476:	e012      	b.n	800549e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d206      	bcs.n	800548e <prvInsertTimerInActiveList+0x62>
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005488:	2301      	movs	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
 800548c:	e007      	b.n	800549e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <prvInsertTimerInActiveList+0x80>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	3304      	adds	r3, #4
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f7fe fa0f 	bl	80038bc <vListInsert>
		}
	}

	return xProcessTimerNow;
 800549e:	697b      	ldr	r3, [r7, #20]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000ef4 	.word	0x20000ef4
 80054ac:	20000ef0 	.word	0x20000ef0

080054b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08e      	sub	sp, #56	; 0x38
 80054b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054b6:	e09d      	b.n	80055f4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da18      	bge.n	80054f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054be:	1d3b      	adds	r3, r7, #4
 80054c0:	3304      	adds	r3, #4
 80054c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10a      	bne.n	80054e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	61fb      	str	r3, [r7, #28]
}
 80054dc:	bf00      	nop
 80054de:	e7fe      	b.n	80054de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054e6:	6850      	ldr	r0, [r2, #4]
 80054e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054ea:	6892      	ldr	r2, [r2, #8]
 80054ec:	4611      	mov	r1, r2
 80054ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	db7d      	blt.n	80055f2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005504:	3304      	adds	r3, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f7fe fa10 	bl	800392c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800550c:	463b      	mov	r3, r7
 800550e:	4618      	mov	r0, r3
 8005510:	f7ff ff6c 	bl	80053ec <prvSampleTimeNow>
 8005514:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b09      	cmp	r3, #9
 800551a:	d86b      	bhi.n	80055f4 <prvProcessReceivedCommands+0x144>
 800551c:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <prvProcessReceivedCommands+0x74>)
 800551e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005522:	bf00      	nop
 8005524:	0800554d 	.word	0x0800554d
 8005528:	0800554d 	.word	0x0800554d
 800552c:	0800554d 	.word	0x0800554d
 8005530:	080055f5 	.word	0x080055f5
 8005534:	080055a9 	.word	0x080055a9
 8005538:	080055e1 	.word	0x080055e1
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800554d 	.word	0x0800554d
 8005544:	080055f5 	.word	0x080055f5
 8005548:	080055a9 	.word	0x080055a9
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	18d1      	adds	r1, r2, r3
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555a:	f7ff ff67 	bl	800542c <prvInsertTimerInActiveList>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d047      	beq.n	80055f4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	69db      	ldr	r3, [r3, #28]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d13f      	bne.n	80055f4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	441a      	add	r2, r3
 800557c:	2300      	movs	r3, #0
 800557e:	9300      	str	r3, [sp, #0]
 8005580:	2300      	movs	r3, #0
 8005582:	2100      	movs	r1, #0
 8005584:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005586:	f7ff fe1f 	bl	80051c8 <xTimerGenericCommand>
 800558a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d130      	bne.n	80055f4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	61bb      	str	r3, [r7, #24]
}
 80055a4:	bf00      	nop
 80055a6:	e7fe      	b.n	80055a6 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10a      	bne.n	80055cc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	617b      	str	r3, [r7, #20]
}
 80055c8:	bf00      	nop
 80055ca:	e7fe      	b.n	80055ca <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	699a      	ldr	r2, [r3, #24]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	18d1      	adds	r1, r2, r3
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055da:	f7ff ff27 	bl	800542c <prvInsertTimerInActiveList>
					break;
 80055de:	e009      	b.n	80055f4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d104      	bne.n	80055f4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80055ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055ec:	f000 fb6a 	bl	8005cc4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055f0:	e000      	b.n	80055f4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055f2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055f4:	4b07      	ldr	r3, [pc, #28]	; (8005614 <prvProcessReceivedCommands+0x164>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	1d39      	adds	r1, r7, #4
 80055fa:	2200      	movs	r2, #0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fc57 	bl	8003eb0 <xQueueReceive>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f af57 	bne.w	80054b8 <prvProcessReceivedCommands+0x8>
	}
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	3730      	adds	r7, #48	; 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	20000ef8 	.word	0x20000ef8

08005618 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800561e:	e045      	b.n	80056ac <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005620:	4b2c      	ldr	r3, [pc, #176]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562a:	4b2a      	ldr	r3, [pc, #168]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3304      	adds	r3, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7fe f977 	bl	800392c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d12e      	bne.n	80056ac <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4413      	add	r3, r2
 8005656:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	429a      	cmp	r2, r3
 800565e:	d90e      	bls.n	800567e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800566c:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3304      	adds	r3, #4
 8005674:	4619      	mov	r1, r3
 8005676:	4610      	mov	r0, r2
 8005678:	f7fe f920 	bl	80038bc <vListInsert>
 800567c:	e016      	b.n	80056ac <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800567e:	2300      	movs	r3, #0
 8005680:	9300      	str	r3, [sp, #0]
 8005682:	2300      	movs	r3, #0
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	2100      	movs	r1, #0
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7ff fd9d 	bl	80051c8 <xTimerGenericCommand>
 800568e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <prvSwitchTimerLists+0x94>
	__asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	603b      	str	r3, [r7, #0]
}
 80056a8:	bf00      	nop
 80056aa:	e7fe      	b.n	80056aa <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056ac:	4b09      	ldr	r3, [pc, #36]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1b4      	bne.n	8005620 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <prvSwitchTimerLists+0xc0>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <prvSwitchTimerLists+0xbc>)
 80056c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056c4:	4a04      	ldr	r2, [pc, #16]	; (80056d8 <prvSwitchTimerLists+0xc0>)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6013      	str	r3, [r2, #0]
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	20000ef0 	.word	0x20000ef0
 80056d8:	20000ef4 	.word	0x20000ef4

080056dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056e2:	f000 f92b 	bl	800593c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056e6:	4b15      	ldr	r3, [pc, #84]	; (800573c <prvCheckForValidListAndQueue+0x60>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d120      	bne.n	8005730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056ee:	4814      	ldr	r0, [pc, #80]	; (8005740 <prvCheckForValidListAndQueue+0x64>)
 80056f0:	f7fe f896 	bl	8003820 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056f4:	4813      	ldr	r0, [pc, #76]	; (8005744 <prvCheckForValidListAndQueue+0x68>)
 80056f6:	f7fe f893 	bl	8003820 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <prvCheckForValidListAndQueue+0x6c>)
 80056fc:	4a10      	ldr	r2, [pc, #64]	; (8005740 <prvCheckForValidListAndQueue+0x64>)
 80056fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005700:	4b12      	ldr	r3, [pc, #72]	; (800574c <prvCheckForValidListAndQueue+0x70>)
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <prvCheckForValidListAndQueue+0x68>)
 8005704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005706:	2300      	movs	r3, #0
 8005708:	9300      	str	r3, [sp, #0]
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <prvCheckForValidListAndQueue+0x74>)
 800570c:	4a11      	ldr	r2, [pc, #68]	; (8005754 <prvCheckForValidListAndQueue+0x78>)
 800570e:	2110      	movs	r1, #16
 8005710:	200a      	movs	r0, #10
 8005712:	f7fe f99d 	bl	8003a50 <xQueueGenericCreateStatic>
 8005716:	4603      	mov	r3, r0
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <prvCheckForValidListAndQueue+0x60>)
 800571a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <prvCheckForValidListAndQueue+0x60>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d005      	beq.n	8005730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <prvCheckForValidListAndQueue+0x60>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	490b      	ldr	r1, [pc, #44]	; (8005758 <prvCheckForValidListAndQueue+0x7c>)
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe fdb0 	bl	8004290 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005730:	f000 f934 	bl	800599c <vPortExitCritical>
}
 8005734:	bf00      	nop
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000ef8 	.word	0x20000ef8
 8005740:	20000ec8 	.word	0x20000ec8
 8005744:	20000edc 	.word	0x20000edc
 8005748:	20000ef0 	.word	0x20000ef0
 800574c:	20000ef4 	.word	0x20000ef4
 8005750:	20000fa4 	.word	0x20000fa4
 8005754:	20000f04 	.word	0x20000f04
 8005758:	0800a810 	.word	0x0800a810

0800575c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3b04      	subs	r3, #4
 800576c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3b04      	subs	r3, #4
 800577a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f023 0201 	bic.w	r2, r3, #1
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	3b04      	subs	r3, #4
 800578a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800578c:	4a08      	ldr	r2, [pc, #32]	; (80057b0 <pxPortInitialiseStack+0x54>)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3b14      	subs	r3, #20
 8005796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3b20      	subs	r3, #32
 80057a2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057a4:	68fb      	ldr	r3, [r7, #12]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3714      	adds	r7, #20
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bc80      	pop	{r7}
 80057ae:	4770      	bx	lr
 80057b0:	080057b5 	.word	0x080057b5

080057b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80057ba:	2300      	movs	r3, #0
 80057bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvTaskExitError+0x54>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c6:	d00a      	beq.n	80057de <prvTaskExitError+0x2a>
	__asm volatile
 80057c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057cc:	f383 8811 	msr	BASEPRI, r3
 80057d0:	f3bf 8f6f 	isb	sy
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	60fb      	str	r3, [r7, #12]
}
 80057da:	bf00      	nop
 80057dc:	e7fe      	b.n	80057dc <prvTaskExitError+0x28>
	__asm volatile
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	60bb      	str	r3, [r7, #8]
}
 80057f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057f2:	bf00      	nop
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d0fc      	beq.n	80057f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	bc80      	pop	{r7}
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000000c 	.word	0x2000000c
 800580c:	00000000 	.word	0x00000000

08005810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <pxCurrentTCBConst2>)
 8005812:	6819      	ldr	r1, [r3, #0]
 8005814:	6808      	ldr	r0, [r1, #0]
 8005816:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800581a:	f380 8809 	msr	PSP, r0
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8811 	msr	BASEPRI, r0
 800582a:	f04e 0e0d 	orr.w	lr, lr, #13
 800582e:	4770      	bx	lr

08005830 <pxCurrentTCBConst2>:
 8005830:	200009c8 	.word	0x200009c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop

08005838 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005838:	4806      	ldr	r0, [pc, #24]	; (8005854 <prvPortStartFirstTask+0x1c>)
 800583a:	6800      	ldr	r0, [r0, #0]
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f380 8808 	msr	MSP, r0
 8005842:	b662      	cpsie	i
 8005844:	b661      	cpsie	f
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	df00      	svc	0
 8005850:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005852:	bf00      	nop
 8005854:	e000ed08 	.word	0xe000ed08

08005858 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800585e:	4b32      	ldr	r3, [pc, #200]	; (8005928 <xPortStartScheduler+0xd0>)
 8005860:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	22ff      	movs	r2, #255	; 0xff
 800586e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	b2db      	uxtb	r3, r3
 800587c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005880:	b2da      	uxtb	r2, r3
 8005882:	4b2a      	ldr	r3, [pc, #168]	; (800592c <xPortStartScheduler+0xd4>)
 8005884:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005886:	4b2a      	ldr	r3, [pc, #168]	; (8005930 <xPortStartScheduler+0xd8>)
 8005888:	2207      	movs	r2, #7
 800588a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800588c:	e009      	b.n	80058a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800588e:	4b28      	ldr	r3, [pc, #160]	; (8005930 <xPortStartScheduler+0xd8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3b01      	subs	r3, #1
 8005894:	4a26      	ldr	r2, [pc, #152]	; (8005930 <xPortStartScheduler+0xd8>)
 8005896:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	005b      	lsls	r3, r3, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058aa:	2b80      	cmp	r3, #128	; 0x80
 80058ac:	d0ef      	beq.n	800588e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058ae:	4b20      	ldr	r3, [pc, #128]	; (8005930 <xPortStartScheduler+0xd8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1c3 0307 	rsb	r3, r3, #7
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d00a      	beq.n	80058d0 <xPortStartScheduler+0x78>
	__asm volatile
 80058ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058be:	f383 8811 	msr	BASEPRI, r3
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	60bb      	str	r3, [r7, #8]
}
 80058cc:	bf00      	nop
 80058ce:	e7fe      	b.n	80058ce <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058d0:	4b17      	ldr	r3, [pc, #92]	; (8005930 <xPortStartScheduler+0xd8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	4a16      	ldr	r2, [pc, #88]	; (8005930 <xPortStartScheduler+0xd8>)
 80058d8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <xPortStartScheduler+0xd8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80058e2:	4a13      	ldr	r2, [pc, #76]	; (8005930 <xPortStartScheduler+0xd8>)
 80058e4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80058ee:	4b11      	ldr	r3, [pc, #68]	; (8005934 <xPortStartScheduler+0xdc>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a10      	ldr	r2, [pc, #64]	; (8005934 <xPortStartScheduler+0xdc>)
 80058f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <xPortStartScheduler+0xdc>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a0d      	ldr	r2, [pc, #52]	; (8005934 <xPortStartScheduler+0xdc>)
 8005900:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005904:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005906:	f000 f8b9 	bl	8005a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800590a:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <xPortStartScheduler+0xe0>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005910:	f7ff ff92 	bl	8005838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005914:	f7ff f8c2 	bl	8004a9c <vTaskSwitchContext>
	prvTaskExitError();
 8005918:	f7ff ff4c 	bl	80057b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000e400 	.word	0xe000e400
 800592c:	20000ff4 	.word	0x20000ff4
 8005930:	20000ff8 	.word	0x20000ff8
 8005934:	e000ed20 	.word	0xe000ed20
 8005938:	2000000c 	.word	0x2000000c

0800593c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	607b      	str	r3, [r7, #4]
}
 8005954:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005956:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <vPortEnterCritical+0x58>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3301      	adds	r3, #1
 800595c:	4a0d      	ldr	r2, [pc, #52]	; (8005994 <vPortEnterCritical+0x58>)
 800595e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <vPortEnterCritical+0x58>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d10f      	bne.n	8005988 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005968:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <vPortEnterCritical+0x5c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00a      	beq.n	8005988 <vPortEnterCritical+0x4c>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	603b      	str	r3, [r7, #0]
}
 8005984:	bf00      	nop
 8005986:	e7fe      	b.n	8005986 <vPortEnterCritical+0x4a>
	}
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	2000000c 	.word	0x2000000c
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059a2:	4b11      	ldr	r3, [pc, #68]	; (80059e8 <vPortExitCritical+0x4c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <vPortExitCritical+0x24>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	607b      	str	r3, [r7, #4]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80059c0:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <vPortExitCritical+0x4c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	3b01      	subs	r3, #1
 80059c6:	4a08      	ldr	r2, [pc, #32]	; (80059e8 <vPortExitCritical+0x4c>)
 80059c8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <vPortExitCritical+0x4c>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d105      	bne.n	80059de <vPortExitCritical+0x42>
 80059d2:	2300      	movs	r3, #0
 80059d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f383 8811 	msr	BASEPRI, r3
}
 80059dc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bc80      	pop	{r7}
 80059e6:	4770      	bx	lr
 80059e8:	2000000c 	.word	0x2000000c
 80059ec:	00000000 	.word	0x00000000

080059f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80059f0:	f3ef 8009 	mrs	r0, PSP
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	4b0d      	ldr	r3, [pc, #52]	; (8005a30 <pxCurrentTCBConst>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a00:	6010      	str	r0, [r2, #0]
 8005a02:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005a06:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a0a:	f380 8811 	msr	BASEPRI, r0
 8005a0e:	f7ff f845 	bl	8004a9c <vTaskSwitchContext>
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8811 	msr	BASEPRI, r0
 8005a1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005a1e:	6819      	ldr	r1, [r3, #0]
 8005a20:	6808      	ldr	r0, [r1, #0]
 8005a22:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005a26:	f380 8809 	msr	PSP, r0
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	4770      	bx	lr

08005a30 <pxCurrentTCBConst>:
 8005a30:	200009c8 	.word	0x200009c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005a34:	bf00      	nop
 8005a36:	bf00      	nop

08005a38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	607b      	str	r3, [r7, #4]
}
 8005a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005a52:	f7fe ff65 	bl	8004920 <xTaskIncrementTick>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d003      	beq.n	8005a64 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a5c:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <SysTick_Handler+0x40>)
 8005a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	2300      	movs	r3, #0
 8005a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
}
 8005a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005a70:	bf00      	nop
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	e000ed04 	.word	0xe000ed04

08005a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a80:	4b0a      	ldr	r3, [pc, #40]	; (8005aac <vPortSetupTimerInterrupt+0x30>)
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a86:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <vPortSetupTimerInterrupt+0x34>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a8c:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <vPortSetupTimerInterrupt+0x38>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a09      	ldr	r2, [pc, #36]	; (8005ab8 <vPortSetupTimerInterrupt+0x3c>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	4a08      	ldr	r2, [pc, #32]	; (8005abc <vPortSetupTimerInterrupt+0x40>)
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a9e:	4b03      	ldr	r3, [pc, #12]	; (8005aac <vPortSetupTimerInterrupt+0x30>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
}
 8005aa4:	bf00      	nop
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bc80      	pop	{r7}
 8005aaa:	4770      	bx	lr
 8005aac:	e000e010 	.word	0xe000e010
 8005ab0:	e000e018 	.word	0xe000e018
 8005ab4:	20000000 	.word	0x20000000
 8005ab8:	10624dd3 	.word	0x10624dd3
 8005abc:	e000e014 	.word	0xe000e014

08005ac0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ac6:	f3ef 8305 	mrs	r3, IPSR
 8005aca:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b0f      	cmp	r3, #15
 8005ad0:	d914      	bls.n	8005afc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ad2:	4a16      	ldr	r2, [pc, #88]	; (8005b2c <vPortValidateInterruptPriority+0x6c>)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005adc:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <vPortValidateInterruptPriority+0x70>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	7afa      	ldrb	r2, [r7, #11]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d20a      	bcs.n	8005afc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	607b      	str	r3, [r7, #4]
}
 8005af8:	bf00      	nop
 8005afa:	e7fe      	b.n	8005afa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <vPortValidateInterruptPriority+0x74>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b04:	4b0c      	ldr	r3, [pc, #48]	; (8005b38 <vPortValidateInterruptPriority+0x78>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d90a      	bls.n	8005b22 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	603b      	str	r3, [r7, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <vPortValidateInterruptPriority+0x60>
	}
 8005b22:	bf00      	nop
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr
 8005b2c:	e000e3f0 	.word	0xe000e3f0
 8005b30:	20000ff4 	.word	0x20000ff4
 8005b34:	e000ed0c 	.word	0xe000ed0c
 8005b38:	20000ff8 	.word	0x20000ff8

08005b3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b08a      	sub	sp, #40	; 0x28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b48:	f7fe fe30 	bl	80047ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005b4c:	4b58      	ldr	r3, [pc, #352]	; (8005cb0 <pvPortMalloc+0x174>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005b54:	f000 f910 	bl	8005d78 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005b58:	4b56      	ldr	r3, [pc, #344]	; (8005cb4 <pvPortMalloc+0x178>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 808e 	bne.w	8005c82 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01d      	beq.n	8005ba8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005b6c:	2208      	movs	r2, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d014      	beq.n	8005ba8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f023 0307 	bic.w	r3, r3, #7
 8005b84:	3308      	adds	r3, #8
 8005b86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <pvPortMalloc+0x6c>
	__asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	617b      	str	r3, [r7, #20]
}
 8005ba4:	bf00      	nop
 8005ba6:	e7fe      	b.n	8005ba6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d069      	beq.n	8005c82 <pvPortMalloc+0x146>
 8005bae:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <pvPortMalloc+0x17c>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d864      	bhi.n	8005c82 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005bb8:	4b40      	ldr	r3, [pc, #256]	; (8005cbc <pvPortMalloc+0x180>)
 8005bba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005bbc:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <pvPortMalloc+0x180>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bc2:	e004      	b.n	8005bce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d903      	bls.n	8005be0 <pvPortMalloc+0xa4>
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1f1      	bne.n	8005bc4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005be0:	4b33      	ldr	r3, [pc, #204]	; (8005cb0 <pvPortMalloc+0x174>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d04b      	beq.n	8005c82 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005bea:	6a3b      	ldr	r3, [r7, #32]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2208      	movs	r2, #8
 8005bf0:	4413      	add	r3, r2
 8005bf2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	1ad2      	subs	r2, r2, r3
 8005c04:	2308      	movs	r3, #8
 8005c06:	005b      	lsls	r3, r3, #1
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d91f      	bls.n	8005c4c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4413      	add	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <pvPortMalloc+0xf8>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	613b      	str	r3, [r7, #16]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	685a      	ldr	r2, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c46:	69b8      	ldr	r0, [r7, #24]
 8005c48:	f000 f8f8 	bl	8005e3c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c4c:	4b1a      	ldr	r3, [pc, #104]	; (8005cb8 <pvPortMalloc+0x17c>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	1ad3      	subs	r3, r2, r3
 8005c56:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <pvPortMalloc+0x17c>)
 8005c58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <pvPortMalloc+0x17c>)
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	4b18      	ldr	r3, [pc, #96]	; (8005cc0 <pvPortMalloc+0x184>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d203      	bcs.n	8005c6e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c66:	4b14      	ldr	r3, [pc, #80]	; (8005cb8 <pvPortMalloc+0x17c>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <pvPortMalloc+0x184>)
 8005c6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	4b10      	ldr	r3, [pc, #64]	; (8005cb4 <pvPortMalloc+0x178>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7e:	2200      	movs	r2, #0
 8005c80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005c82:	f7fe fda1 	bl	80047c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <pvPortMalloc+0x16a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <pvPortMalloc+0x168>
	return pvReturn;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	; 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20001c04 	.word	0x20001c04
 8005cb4:	20001c10 	.word	0x20001c10
 8005cb8:	20001c08 	.word	0x20001c08
 8005cbc:	20001bfc 	.word	0x20001bfc
 8005cc0:	20001c0c 	.word	0x20001c0c

08005cc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d048      	beq.n	8005d68 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	425b      	negs	r3, r3
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <vPortFree+0xac>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4013      	ands	r3, r2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <vPortFree+0x44>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00a      	beq.n	8005d26 <vPortFree+0x62>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60bb      	str	r3, [r7, #8]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	4b11      	ldr	r3, [pc, #68]	; (8005d70 <vPortFree+0xac>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4013      	ands	r3, r2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d019      	beq.n	8005d68 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d115      	bne.n	8005d68 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	4b0b      	ldr	r3, [pc, #44]	; (8005d70 <vPortFree+0xac>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	43db      	mvns	r3, r3
 8005d46:	401a      	ands	r2, r3
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005d4c:	f7fe fd2e 	bl	80047ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <vPortFree+0xb0>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4413      	add	r3, r2
 8005d5a:	4a06      	ldr	r2, [pc, #24]	; (8005d74 <vPortFree+0xb0>)
 8005d5c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d5e:	6938      	ldr	r0, [r7, #16]
 8005d60:	f000 f86c 	bl	8005e3c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005d64:	f7fe fd30 	bl	80047c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005d68:	bf00      	nop
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	20001c10 	.word	0x20001c10
 8005d74:	20001c08 	.word	0x20001c08

08005d78 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005d82:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005d84:	4b27      	ldr	r3, [pc, #156]	; (8005e24 <prvHeapInit+0xac>)
 8005d86:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00c      	beq.n	8005dac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3307      	adds	r3, #7
 8005d96:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0307 	bic.w	r3, r3, #7
 8005d9e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	4a1f      	ldr	r2, [pc, #124]	; (8005e24 <prvHeapInit+0xac>)
 8005da8:	4413      	add	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005db0:	4a1d      	ldr	r2, [pc, #116]	; (8005e28 <prvHeapInit+0xb0>)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005db6:	4b1c      	ldr	r3, [pc, #112]	; (8005e28 <prvHeapInit+0xb0>)
 8005db8:	2200      	movs	r2, #0
 8005dba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005dc4:	2208      	movs	r2, #8
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	1a9b      	subs	r3, r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0307 	bic.w	r3, r3, #7
 8005dd2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	4a15      	ldr	r2, [pc, #84]	; (8005e2c <prvHeapInit+0xb4>)
 8005dd8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005dda:	4b14      	ldr	r3, [pc, #80]	; (8005e2c <prvHeapInit+0xb4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2200      	movs	r2, #0
 8005de0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <prvHeapInit+0xb4>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	1ad2      	subs	r2, r2, r3
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005df8:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <prvHeapInit+0xb4>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	4a0a      	ldr	r2, [pc, #40]	; (8005e30 <prvHeapInit+0xb8>)
 8005e06:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <prvHeapInit+0xbc>)
 8005e0e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e10:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <prvHeapInit+0xc0>)
 8005e12:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bc80      	pop	{r7}
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000ffc 	.word	0x20000ffc
 8005e28:	20001bfc 	.word	0x20001bfc
 8005e2c:	20001c04 	.word	0x20001c04
 8005e30:	20001c0c 	.word	0x20001c0c
 8005e34:	20001c08 	.word	0x20001c08
 8005e38:	20001c10 	.word	0x20001c10

08005e3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <prvInsertBlockIntoFreeList+0xa8>)
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e002      	b.n	8005e50 <prvInsertBlockIntoFreeList+0x14>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d8f7      	bhi.n	8005e4a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d108      	bne.n	8005e7e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	441a      	add	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d118      	bne.n	8005ec4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <prvInsertBlockIntoFreeList+0xac>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d00d      	beq.n	8005eba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	441a      	add	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e008      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005eba:	4b0b      	ldr	r3, [pc, #44]	; (8005ee8 <prvInsertBlockIntoFreeList+0xac>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	601a      	str	r2, [r3, #0]
 8005ec2:	e003      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d002      	beq.n	8005eda <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	20001bfc 	.word	0x20001bfc
 8005ee8:	20001c04 	.word	0x20001c04

08005eec <__errno>:
 8005eec:	4b01      	ldr	r3, [pc, #4]	; (8005ef4 <__errno+0x8>)
 8005eee:	6818      	ldr	r0, [r3, #0]
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	20000010 	.word	0x20000010

08005ef8 <__libc_init_array>:
 8005ef8:	b570      	push	{r4, r5, r6, lr}
 8005efa:	2600      	movs	r6, #0
 8005efc:	4d0c      	ldr	r5, [pc, #48]	; (8005f30 <__libc_init_array+0x38>)
 8005efe:	4c0d      	ldr	r4, [pc, #52]	; (8005f34 <__libc_init_array+0x3c>)
 8005f00:	1b64      	subs	r4, r4, r5
 8005f02:	10a4      	asrs	r4, r4, #2
 8005f04:	42a6      	cmp	r6, r4
 8005f06:	d109      	bne.n	8005f1c <__libc_init_array+0x24>
 8005f08:	f004 fc52 	bl	800a7b0 <_init>
 8005f0c:	2600      	movs	r6, #0
 8005f0e:	4d0a      	ldr	r5, [pc, #40]	; (8005f38 <__libc_init_array+0x40>)
 8005f10:	4c0a      	ldr	r4, [pc, #40]	; (8005f3c <__libc_init_array+0x44>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	42a6      	cmp	r6, r4
 8005f18:	d105      	bne.n	8005f26 <__libc_init_array+0x2e>
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}
 8005f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f20:	4798      	blx	r3
 8005f22:	3601      	adds	r6, #1
 8005f24:	e7ee      	b.n	8005f04 <__libc_init_array+0xc>
 8005f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2a:	4798      	blx	r3
 8005f2c:	3601      	adds	r6, #1
 8005f2e:	e7f2      	b.n	8005f16 <__libc_init_array+0x1e>
 8005f30:	0800ad1c 	.word	0x0800ad1c
 8005f34:	0800ad1c 	.word	0x0800ad1c
 8005f38:	0800ad1c 	.word	0x0800ad1c
 8005f3c:	0800ad20 	.word	0x0800ad20

08005f40 <memcpy>:
 8005f40:	440a      	add	r2, r1
 8005f42:	4291      	cmp	r1, r2
 8005f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f48:	d100      	bne.n	8005f4c <memcpy+0xc>
 8005f4a:	4770      	bx	lr
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f52:	4291      	cmp	r1, r2
 8005f54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f58:	d1f9      	bne.n	8005f4e <memcpy+0xe>
 8005f5a:	bd10      	pop	{r4, pc}

08005f5c <memset>:
 8005f5c:	4603      	mov	r3, r0
 8005f5e:	4402      	add	r2, r0
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d100      	bne.n	8005f66 <memset+0xa>
 8005f64:	4770      	bx	lr
 8005f66:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6a:	e7f9      	b.n	8005f60 <memset+0x4>

08005f6c <__cvt>:
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f72:	461f      	mov	r7, r3
 8005f74:	bfbb      	ittet	lt
 8005f76:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f7a:	461f      	movlt	r7, r3
 8005f7c:	2300      	movge	r3, #0
 8005f7e:	232d      	movlt	r3, #45	; 0x2d
 8005f80:	b088      	sub	sp, #32
 8005f82:	4614      	mov	r4, r2
 8005f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f86:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005f88:	7013      	strb	r3, [r2, #0]
 8005f8a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f8c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005f90:	f023 0820 	bic.w	r8, r3, #32
 8005f94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005f98:	d005      	beq.n	8005fa6 <__cvt+0x3a>
 8005f9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005f9e:	d100      	bne.n	8005fa2 <__cvt+0x36>
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e000      	b.n	8005fa8 <__cvt+0x3c>
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	aa07      	add	r2, sp, #28
 8005faa:	9204      	str	r2, [sp, #16]
 8005fac:	aa06      	add	r2, sp, #24
 8005fae:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005fb2:	e9cd 3500 	strd	r3, r5, [sp]
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	463b      	mov	r3, r7
 8005fba:	f001 fd85 	bl	8007ac8 <_dtoa_r>
 8005fbe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	d102      	bne.n	8005fcc <__cvt+0x60>
 8005fc6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fc8:	07db      	lsls	r3, r3, #31
 8005fca:	d522      	bpl.n	8006012 <__cvt+0xa6>
 8005fcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005fd0:	eb06 0905 	add.w	r9, r6, r5
 8005fd4:	d110      	bne.n	8005ff8 <__cvt+0x8c>
 8005fd6:	7833      	ldrb	r3, [r6, #0]
 8005fd8:	2b30      	cmp	r3, #48	; 0x30
 8005fda:	d10a      	bne.n	8005ff2 <__cvt+0x86>
 8005fdc:	2200      	movs	r2, #0
 8005fde:	2300      	movs	r3, #0
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	4639      	mov	r1, r7
 8005fe4:	f7fa fce0 	bl	80009a8 <__aeabi_dcmpeq>
 8005fe8:	b918      	cbnz	r0, 8005ff2 <__cvt+0x86>
 8005fea:	f1c5 0501 	rsb	r5, r5, #1
 8005fee:	f8ca 5000 	str.w	r5, [sl]
 8005ff2:	f8da 3000 	ldr.w	r3, [sl]
 8005ff6:	4499      	add	r9, r3
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fcd2 	bl	80009a8 <__aeabi_dcmpeq>
 8006004:	b108      	cbz	r0, 800600a <__cvt+0x9e>
 8006006:	f8cd 901c 	str.w	r9, [sp, #28]
 800600a:	2230      	movs	r2, #48	; 0x30
 800600c:	9b07      	ldr	r3, [sp, #28]
 800600e:	454b      	cmp	r3, r9
 8006010:	d307      	bcc.n	8006022 <__cvt+0xb6>
 8006012:	4630      	mov	r0, r6
 8006014:	9b07      	ldr	r3, [sp, #28]
 8006016:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006018:	1b9b      	subs	r3, r3, r6
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	b008      	add	sp, #32
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	1c59      	adds	r1, r3, #1
 8006024:	9107      	str	r1, [sp, #28]
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	e7f0      	b.n	800600c <__cvt+0xa0>

0800602a <__exponent>:
 800602a:	4603      	mov	r3, r0
 800602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800602e:	2900      	cmp	r1, #0
 8006030:	f803 2b02 	strb.w	r2, [r3], #2
 8006034:	bfb6      	itet	lt
 8006036:	222d      	movlt	r2, #45	; 0x2d
 8006038:	222b      	movge	r2, #43	; 0x2b
 800603a:	4249      	neglt	r1, r1
 800603c:	2909      	cmp	r1, #9
 800603e:	7042      	strb	r2, [r0, #1]
 8006040:	dd2b      	ble.n	800609a <__exponent+0x70>
 8006042:	f10d 0407 	add.w	r4, sp, #7
 8006046:	46a4      	mov	ip, r4
 8006048:	270a      	movs	r7, #10
 800604a:	fb91 f6f7 	sdiv	r6, r1, r7
 800604e:	460a      	mov	r2, r1
 8006050:	46a6      	mov	lr, r4
 8006052:	fb07 1516 	mls	r5, r7, r6, r1
 8006056:	2a63      	cmp	r2, #99	; 0x63
 8006058:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800605c:	4631      	mov	r1, r6
 800605e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006062:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006066:	dcf0      	bgt.n	800604a <__exponent+0x20>
 8006068:	3130      	adds	r1, #48	; 0x30
 800606a:	f1ae 0502 	sub.w	r5, lr, #2
 800606e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006072:	4629      	mov	r1, r5
 8006074:	1c44      	adds	r4, r0, #1
 8006076:	4561      	cmp	r1, ip
 8006078:	d30a      	bcc.n	8006090 <__exponent+0x66>
 800607a:	f10d 0209 	add.w	r2, sp, #9
 800607e:	eba2 020e 	sub.w	r2, r2, lr
 8006082:	4565      	cmp	r5, ip
 8006084:	bf88      	it	hi
 8006086:	2200      	movhi	r2, #0
 8006088:	4413      	add	r3, r2
 800608a:	1a18      	subs	r0, r3, r0
 800608c:	b003      	add	sp, #12
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006090:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006094:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006098:	e7ed      	b.n	8006076 <__exponent+0x4c>
 800609a:	2330      	movs	r3, #48	; 0x30
 800609c:	3130      	adds	r1, #48	; 0x30
 800609e:	7083      	strb	r3, [r0, #2]
 80060a0:	70c1      	strb	r1, [r0, #3]
 80060a2:	1d03      	adds	r3, r0, #4
 80060a4:	e7f1      	b.n	800608a <__exponent+0x60>
	...

080060a8 <_printf_float>:
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	b091      	sub	sp, #68	; 0x44
 80060ae:	460c      	mov	r4, r1
 80060b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80060b4:	4616      	mov	r6, r2
 80060b6:	461f      	mov	r7, r3
 80060b8:	4605      	mov	r5, r0
 80060ba:	f002 fe59 	bl	8008d70 <_localeconv_r>
 80060be:	6803      	ldr	r3, [r0, #0]
 80060c0:	4618      	mov	r0, r3
 80060c2:	9309      	str	r3, [sp, #36]	; 0x24
 80060c4:	f7fa f844 	bl	8000150 <strlen>
 80060c8:	2300      	movs	r3, #0
 80060ca:	930e      	str	r3, [sp, #56]	; 0x38
 80060cc:	f8d8 3000 	ldr.w	r3, [r8]
 80060d0:	900a      	str	r0, [sp, #40]	; 0x28
 80060d2:	3307      	adds	r3, #7
 80060d4:	f023 0307 	bic.w	r3, r3, #7
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80060e0:	f8d4 b000 	ldr.w	fp, [r4]
 80060e4:	f8c8 2000 	str.w	r2, [r8]
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80060f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80060f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80060fa:	f04f 32ff 	mov.w	r2, #4294967295
 80060fe:	4640      	mov	r0, r8
 8006100:	4b9c      	ldr	r3, [pc, #624]	; (8006374 <_printf_float+0x2cc>)
 8006102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006104:	f7fa fc82 	bl	8000a0c <__aeabi_dcmpun>
 8006108:	bb70      	cbnz	r0, 8006168 <_printf_float+0xc0>
 800610a:	f04f 32ff 	mov.w	r2, #4294967295
 800610e:	4640      	mov	r0, r8
 8006110:	4b98      	ldr	r3, [pc, #608]	; (8006374 <_printf_float+0x2cc>)
 8006112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006114:	f7fa fc5c 	bl	80009d0 <__aeabi_dcmple>
 8006118:	bb30      	cbnz	r0, 8006168 <_printf_float+0xc0>
 800611a:	2200      	movs	r2, #0
 800611c:	2300      	movs	r3, #0
 800611e:	4640      	mov	r0, r8
 8006120:	4651      	mov	r1, sl
 8006122:	f7fa fc4b 	bl	80009bc <__aeabi_dcmplt>
 8006126:	b110      	cbz	r0, 800612e <_printf_float+0x86>
 8006128:	232d      	movs	r3, #45	; 0x2d
 800612a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612e:	4b92      	ldr	r3, [pc, #584]	; (8006378 <_printf_float+0x2d0>)
 8006130:	4892      	ldr	r0, [pc, #584]	; (800637c <_printf_float+0x2d4>)
 8006132:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006136:	bf94      	ite	ls
 8006138:	4698      	movls	r8, r3
 800613a:	4680      	movhi	r8, r0
 800613c:	2303      	movs	r3, #3
 800613e:	f04f 0a00 	mov.w	sl, #0
 8006142:	6123      	str	r3, [r4, #16]
 8006144:	f02b 0304 	bic.w	r3, fp, #4
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	4633      	mov	r3, r6
 800614c:	4621      	mov	r1, r4
 800614e:	4628      	mov	r0, r5
 8006150:	9700      	str	r7, [sp, #0]
 8006152:	aa0f      	add	r2, sp, #60	; 0x3c
 8006154:	f000 f9d4 	bl	8006500 <_printf_common>
 8006158:	3001      	adds	r0, #1
 800615a:	f040 8090 	bne.w	800627e <_printf_float+0x1d6>
 800615e:	f04f 30ff 	mov.w	r0, #4294967295
 8006162:	b011      	add	sp, #68	; 0x44
 8006164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006168:	4642      	mov	r2, r8
 800616a:	4653      	mov	r3, sl
 800616c:	4640      	mov	r0, r8
 800616e:	4651      	mov	r1, sl
 8006170:	f7fa fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8006174:	b148      	cbz	r0, 800618a <_printf_float+0xe2>
 8006176:	f1ba 0f00 	cmp.w	sl, #0
 800617a:	bfb8      	it	lt
 800617c:	232d      	movlt	r3, #45	; 0x2d
 800617e:	4880      	ldr	r0, [pc, #512]	; (8006380 <_printf_float+0x2d8>)
 8006180:	bfb8      	it	lt
 8006182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006186:	4b7f      	ldr	r3, [pc, #508]	; (8006384 <_printf_float+0x2dc>)
 8006188:	e7d3      	b.n	8006132 <_printf_float+0x8a>
 800618a:	6863      	ldr	r3, [r4, #4]
 800618c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	d142      	bne.n	800621a <_printf_float+0x172>
 8006194:	2306      	movs	r3, #6
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	9206      	str	r2, [sp, #24]
 800619c:	aa0e      	add	r2, sp, #56	; 0x38
 800619e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80061a2:	aa0d      	add	r2, sp, #52	; 0x34
 80061a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80061a8:	9203      	str	r2, [sp, #12]
 80061aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80061ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	6863      	ldr	r3, [r4, #4]
 80061b6:	4642      	mov	r2, r8
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	4628      	mov	r0, r5
 80061bc:	4653      	mov	r3, sl
 80061be:	910b      	str	r1, [sp, #44]	; 0x2c
 80061c0:	f7ff fed4 	bl	8005f6c <__cvt>
 80061c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c6:	4680      	mov	r8, r0
 80061c8:	2947      	cmp	r1, #71	; 0x47
 80061ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061cc:	d108      	bne.n	80061e0 <_printf_float+0x138>
 80061ce:	1cc8      	adds	r0, r1, #3
 80061d0:	db02      	blt.n	80061d8 <_printf_float+0x130>
 80061d2:	6863      	ldr	r3, [r4, #4]
 80061d4:	4299      	cmp	r1, r3
 80061d6:	dd40      	ble.n	800625a <_printf_float+0x1b2>
 80061d8:	f1a9 0902 	sub.w	r9, r9, #2
 80061dc:	fa5f f989 	uxtb.w	r9, r9
 80061e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80061e4:	d81f      	bhi.n	8006226 <_printf_float+0x17e>
 80061e6:	464a      	mov	r2, r9
 80061e8:	3901      	subs	r1, #1
 80061ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061ee:	910d      	str	r1, [sp, #52]	; 0x34
 80061f0:	f7ff ff1b 	bl	800602a <__exponent>
 80061f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061f6:	4682      	mov	sl, r0
 80061f8:	1813      	adds	r3, r2, r0
 80061fa:	2a01      	cmp	r2, #1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	dc02      	bgt.n	8006206 <_printf_float+0x15e>
 8006200:	6822      	ldr	r2, [r4, #0]
 8006202:	07d2      	lsls	r2, r2, #31
 8006204:	d501      	bpl.n	800620a <_printf_float+0x162>
 8006206:	3301      	adds	r3, #1
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800620e:	2b00      	cmp	r3, #0
 8006210:	d09b      	beq.n	800614a <_printf_float+0xa2>
 8006212:	232d      	movs	r3, #45	; 0x2d
 8006214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006218:	e797      	b.n	800614a <_printf_float+0xa2>
 800621a:	2947      	cmp	r1, #71	; 0x47
 800621c:	d1bc      	bne.n	8006198 <_printf_float+0xf0>
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1ba      	bne.n	8006198 <_printf_float+0xf0>
 8006222:	2301      	movs	r3, #1
 8006224:	e7b7      	b.n	8006196 <_printf_float+0xee>
 8006226:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800622a:	d118      	bne.n	800625e <_printf_float+0x1b6>
 800622c:	2900      	cmp	r1, #0
 800622e:	6863      	ldr	r3, [r4, #4]
 8006230:	dd0b      	ble.n	800624a <_printf_float+0x1a2>
 8006232:	6121      	str	r1, [r4, #16]
 8006234:	b913      	cbnz	r3, 800623c <_printf_float+0x194>
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	07d0      	lsls	r0, r2, #31
 800623a:	d502      	bpl.n	8006242 <_printf_float+0x19a>
 800623c:	3301      	adds	r3, #1
 800623e:	440b      	add	r3, r1
 8006240:	6123      	str	r3, [r4, #16]
 8006242:	f04f 0a00 	mov.w	sl, #0
 8006246:	65a1      	str	r1, [r4, #88]	; 0x58
 8006248:	e7df      	b.n	800620a <_printf_float+0x162>
 800624a:	b913      	cbnz	r3, 8006252 <_printf_float+0x1aa>
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	07d2      	lsls	r2, r2, #31
 8006250:	d501      	bpl.n	8006256 <_printf_float+0x1ae>
 8006252:	3302      	adds	r3, #2
 8006254:	e7f4      	b.n	8006240 <_printf_float+0x198>
 8006256:	2301      	movs	r3, #1
 8006258:	e7f2      	b.n	8006240 <_printf_float+0x198>
 800625a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800625e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006260:	4299      	cmp	r1, r3
 8006262:	db05      	blt.n	8006270 <_printf_float+0x1c8>
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	6121      	str	r1, [r4, #16]
 8006268:	07d8      	lsls	r0, r3, #31
 800626a:	d5ea      	bpl.n	8006242 <_printf_float+0x19a>
 800626c:	1c4b      	adds	r3, r1, #1
 800626e:	e7e7      	b.n	8006240 <_printf_float+0x198>
 8006270:	2900      	cmp	r1, #0
 8006272:	bfcc      	ite	gt
 8006274:	2201      	movgt	r2, #1
 8006276:	f1c1 0202 	rsble	r2, r1, #2
 800627a:	4413      	add	r3, r2
 800627c:	e7e0      	b.n	8006240 <_printf_float+0x198>
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	055a      	lsls	r2, r3, #21
 8006282:	d407      	bmi.n	8006294 <_printf_float+0x1ec>
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	4642      	mov	r2, r8
 8006288:	4631      	mov	r1, r6
 800628a:	4628      	mov	r0, r5
 800628c:	47b8      	blx	r7
 800628e:	3001      	adds	r0, #1
 8006290:	d12b      	bne.n	80062ea <_printf_float+0x242>
 8006292:	e764      	b.n	800615e <_printf_float+0xb6>
 8006294:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006298:	f240 80dd 	bls.w	8006456 <_printf_float+0x3ae>
 800629c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062a0:	2200      	movs	r2, #0
 80062a2:	2300      	movs	r3, #0
 80062a4:	f7fa fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d033      	beq.n	8006314 <_printf_float+0x26c>
 80062ac:	2301      	movs	r3, #1
 80062ae:	4631      	mov	r1, r6
 80062b0:	4628      	mov	r0, r5
 80062b2:	4a35      	ldr	r2, [pc, #212]	; (8006388 <_printf_float+0x2e0>)
 80062b4:	47b8      	blx	r7
 80062b6:	3001      	adds	r0, #1
 80062b8:	f43f af51 	beq.w	800615e <_printf_float+0xb6>
 80062bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062c0:	429a      	cmp	r2, r3
 80062c2:	db02      	blt.n	80062ca <_printf_float+0x222>
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	07d8      	lsls	r0, r3, #31
 80062c8:	d50f      	bpl.n	80062ea <_printf_float+0x242>
 80062ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80062ce:	4631      	mov	r1, r6
 80062d0:	4628      	mov	r0, r5
 80062d2:	47b8      	blx	r7
 80062d4:	3001      	adds	r0, #1
 80062d6:	f43f af42 	beq.w	800615e <_printf_float+0xb6>
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	f104 091a 	add.w	r9, r4, #26
 80062e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062e4:	3b01      	subs	r3, #1
 80062e6:	4543      	cmp	r3, r8
 80062e8:	dc09      	bgt.n	80062fe <_printf_float+0x256>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	079b      	lsls	r3, r3, #30
 80062ee:	f100 8102 	bmi.w	80064f6 <_printf_float+0x44e>
 80062f2:	68e0      	ldr	r0, [r4, #12]
 80062f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80062f6:	4298      	cmp	r0, r3
 80062f8:	bfb8      	it	lt
 80062fa:	4618      	movlt	r0, r3
 80062fc:	e731      	b.n	8006162 <_printf_float+0xba>
 80062fe:	2301      	movs	r3, #1
 8006300:	464a      	mov	r2, r9
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	f43f af28 	beq.w	800615e <_printf_float+0xb6>
 800630e:	f108 0801 	add.w	r8, r8, #1
 8006312:	e7e6      	b.n	80062e2 <_printf_float+0x23a>
 8006314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006316:	2b00      	cmp	r3, #0
 8006318:	dc38      	bgt.n	800638c <_printf_float+0x2e4>
 800631a:	2301      	movs	r3, #1
 800631c:	4631      	mov	r1, r6
 800631e:	4628      	mov	r0, r5
 8006320:	4a19      	ldr	r2, [pc, #100]	; (8006388 <_printf_float+0x2e0>)
 8006322:	47b8      	blx	r7
 8006324:	3001      	adds	r0, #1
 8006326:	f43f af1a 	beq.w	800615e <_printf_float+0xb6>
 800632a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800632e:	4313      	orrs	r3, r2
 8006330:	d102      	bne.n	8006338 <_printf_float+0x290>
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	07d9      	lsls	r1, r3, #31
 8006336:	d5d8      	bpl.n	80062ea <_printf_float+0x242>
 8006338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af0b 	beq.w	800615e <_printf_float+0xb6>
 8006348:	f04f 0900 	mov.w	r9, #0
 800634c:	f104 0a1a 	add.w	sl, r4, #26
 8006350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006352:	425b      	negs	r3, r3
 8006354:	454b      	cmp	r3, r9
 8006356:	dc01      	bgt.n	800635c <_printf_float+0x2b4>
 8006358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800635a:	e794      	b.n	8006286 <_printf_float+0x1de>
 800635c:	2301      	movs	r3, #1
 800635e:	4652      	mov	r2, sl
 8006360:	4631      	mov	r1, r6
 8006362:	4628      	mov	r0, r5
 8006364:	47b8      	blx	r7
 8006366:	3001      	adds	r0, #1
 8006368:	f43f aef9 	beq.w	800615e <_printf_float+0xb6>
 800636c:	f109 0901 	add.w	r9, r9, #1
 8006370:	e7ee      	b.n	8006350 <_printf_float+0x2a8>
 8006372:	bf00      	nop
 8006374:	7fefffff 	.word	0x7fefffff
 8006378:	0800a87c 	.word	0x0800a87c
 800637c:	0800a880 	.word	0x0800a880
 8006380:	0800a888 	.word	0x0800a888
 8006384:	0800a884 	.word	0x0800a884
 8006388:	0800a88c 	.word	0x0800a88c
 800638c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800638e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006390:	429a      	cmp	r2, r3
 8006392:	bfa8      	it	ge
 8006394:	461a      	movge	r2, r3
 8006396:	2a00      	cmp	r2, #0
 8006398:	4691      	mov	r9, r2
 800639a:	dc37      	bgt.n	800640c <_printf_float+0x364>
 800639c:	f04f 0b00 	mov.w	fp, #0
 80063a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063a4:	f104 021a 	add.w	r2, r4, #26
 80063a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80063ac:	ebaa 0309 	sub.w	r3, sl, r9
 80063b0:	455b      	cmp	r3, fp
 80063b2:	dc33      	bgt.n	800641c <_printf_float+0x374>
 80063b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063b8:	429a      	cmp	r2, r3
 80063ba:	db3b      	blt.n	8006434 <_printf_float+0x38c>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	07da      	lsls	r2, r3, #31
 80063c0:	d438      	bmi.n	8006434 <_printf_float+0x38c>
 80063c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063c6:	eba3 020a 	sub.w	r2, r3, sl
 80063ca:	eba3 0901 	sub.w	r9, r3, r1
 80063ce:	4591      	cmp	r9, r2
 80063d0:	bfa8      	it	ge
 80063d2:	4691      	movge	r9, r2
 80063d4:	f1b9 0f00 	cmp.w	r9, #0
 80063d8:	dc34      	bgt.n	8006444 <_printf_float+0x39c>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 0a1a 	add.w	sl, r4, #26
 80063e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80063ea:	1a9b      	subs	r3, r3, r2
 80063ec:	eba3 0309 	sub.w	r3, r3, r9
 80063f0:	4543      	cmp	r3, r8
 80063f2:	f77f af7a 	ble.w	80062ea <_printf_float+0x242>
 80063f6:	2301      	movs	r3, #1
 80063f8:	4652      	mov	r2, sl
 80063fa:	4631      	mov	r1, r6
 80063fc:	4628      	mov	r0, r5
 80063fe:	47b8      	blx	r7
 8006400:	3001      	adds	r0, #1
 8006402:	f43f aeac 	beq.w	800615e <_printf_float+0xb6>
 8006406:	f108 0801 	add.w	r8, r8, #1
 800640a:	e7ec      	b.n	80063e6 <_printf_float+0x33e>
 800640c:	4613      	mov	r3, r2
 800640e:	4631      	mov	r1, r6
 8006410:	4642      	mov	r2, r8
 8006412:	4628      	mov	r0, r5
 8006414:	47b8      	blx	r7
 8006416:	3001      	adds	r0, #1
 8006418:	d1c0      	bne.n	800639c <_printf_float+0x2f4>
 800641a:	e6a0      	b.n	800615e <_printf_float+0xb6>
 800641c:	2301      	movs	r3, #1
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	920b      	str	r2, [sp, #44]	; 0x2c
 8006424:	47b8      	blx	r7
 8006426:	3001      	adds	r0, #1
 8006428:	f43f ae99 	beq.w	800615e <_printf_float+0xb6>
 800642c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800642e:	f10b 0b01 	add.w	fp, fp, #1
 8006432:	e7b9      	b.n	80063a8 <_printf_float+0x300>
 8006434:	4631      	mov	r1, r6
 8006436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	d1bf      	bne.n	80063c2 <_printf_float+0x31a>
 8006442:	e68c      	b.n	800615e <_printf_float+0xb6>
 8006444:	464b      	mov	r3, r9
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	eb08 020a 	add.w	r2, r8, sl
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1c2      	bne.n	80063da <_printf_float+0x332>
 8006454:	e683      	b.n	800615e <_printf_float+0xb6>
 8006456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006458:	2a01      	cmp	r2, #1
 800645a:	dc01      	bgt.n	8006460 <_printf_float+0x3b8>
 800645c:	07db      	lsls	r3, r3, #31
 800645e:	d537      	bpl.n	80064d0 <_printf_float+0x428>
 8006460:	2301      	movs	r3, #1
 8006462:	4642      	mov	r2, r8
 8006464:	4631      	mov	r1, r6
 8006466:	4628      	mov	r0, r5
 8006468:	47b8      	blx	r7
 800646a:	3001      	adds	r0, #1
 800646c:	f43f ae77 	beq.w	800615e <_printf_float+0xb6>
 8006470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006474:	4631      	mov	r1, r6
 8006476:	4628      	mov	r0, r5
 8006478:	47b8      	blx	r7
 800647a:	3001      	adds	r0, #1
 800647c:	f43f ae6f 	beq.w	800615e <_printf_float+0xb6>
 8006480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	f7fa fa8e 	bl	80009a8 <__aeabi_dcmpeq>
 800648c:	b9d8      	cbnz	r0, 80064c6 <_printf_float+0x41e>
 800648e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006490:	f108 0201 	add.w	r2, r8, #1
 8006494:	3b01      	subs	r3, #1
 8006496:	4631      	mov	r1, r6
 8006498:	4628      	mov	r0, r5
 800649a:	47b8      	blx	r7
 800649c:	3001      	adds	r0, #1
 800649e:	d10e      	bne.n	80064be <_printf_float+0x416>
 80064a0:	e65d      	b.n	800615e <_printf_float+0xb6>
 80064a2:	2301      	movs	r3, #1
 80064a4:	464a      	mov	r2, r9
 80064a6:	4631      	mov	r1, r6
 80064a8:	4628      	mov	r0, r5
 80064aa:	47b8      	blx	r7
 80064ac:	3001      	adds	r0, #1
 80064ae:	f43f ae56 	beq.w	800615e <_printf_float+0xb6>
 80064b2:	f108 0801 	add.w	r8, r8, #1
 80064b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064b8:	3b01      	subs	r3, #1
 80064ba:	4543      	cmp	r3, r8
 80064bc:	dcf1      	bgt.n	80064a2 <_printf_float+0x3fa>
 80064be:	4653      	mov	r3, sl
 80064c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064c4:	e6e0      	b.n	8006288 <_printf_float+0x1e0>
 80064c6:	f04f 0800 	mov.w	r8, #0
 80064ca:	f104 091a 	add.w	r9, r4, #26
 80064ce:	e7f2      	b.n	80064b6 <_printf_float+0x40e>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4642      	mov	r2, r8
 80064d4:	e7df      	b.n	8006496 <_printf_float+0x3ee>
 80064d6:	2301      	movs	r3, #1
 80064d8:	464a      	mov	r2, r9
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	f43f ae3c 	beq.w	800615e <_printf_float+0xb6>
 80064e6:	f108 0801 	add.w	r8, r8, #1
 80064ea:	68e3      	ldr	r3, [r4, #12]
 80064ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80064ee:	1a5b      	subs	r3, r3, r1
 80064f0:	4543      	cmp	r3, r8
 80064f2:	dcf0      	bgt.n	80064d6 <_printf_float+0x42e>
 80064f4:	e6fd      	b.n	80062f2 <_printf_float+0x24a>
 80064f6:	f04f 0800 	mov.w	r8, #0
 80064fa:	f104 0919 	add.w	r9, r4, #25
 80064fe:	e7f4      	b.n	80064ea <_printf_float+0x442>

08006500 <_printf_common>:
 8006500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006504:	4616      	mov	r6, r2
 8006506:	4699      	mov	r9, r3
 8006508:	688a      	ldr	r2, [r1, #8]
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	4607      	mov	r7, r0
 800650e:	4293      	cmp	r3, r2
 8006510:	bfb8      	it	lt
 8006512:	4613      	movlt	r3, r2
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800651a:	460c      	mov	r4, r1
 800651c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006520:	b10a      	cbz	r2, 8006526 <_printf_common+0x26>
 8006522:	3301      	adds	r3, #1
 8006524:	6033      	str	r3, [r6, #0]
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	0699      	lsls	r1, r3, #26
 800652a:	bf42      	ittt	mi
 800652c:	6833      	ldrmi	r3, [r6, #0]
 800652e:	3302      	addmi	r3, #2
 8006530:	6033      	strmi	r3, [r6, #0]
 8006532:	6825      	ldr	r5, [r4, #0]
 8006534:	f015 0506 	ands.w	r5, r5, #6
 8006538:	d106      	bne.n	8006548 <_printf_common+0x48>
 800653a:	f104 0a19 	add.w	sl, r4, #25
 800653e:	68e3      	ldr	r3, [r4, #12]
 8006540:	6832      	ldr	r2, [r6, #0]
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	42ab      	cmp	r3, r5
 8006546:	dc28      	bgt.n	800659a <_printf_common+0x9a>
 8006548:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800654c:	1e13      	subs	r3, r2, #0
 800654e:	6822      	ldr	r2, [r4, #0]
 8006550:	bf18      	it	ne
 8006552:	2301      	movne	r3, #1
 8006554:	0692      	lsls	r2, r2, #26
 8006556:	d42d      	bmi.n	80065b4 <_printf_common+0xb4>
 8006558:	4649      	mov	r1, r9
 800655a:	4638      	mov	r0, r7
 800655c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006560:	47c0      	blx	r8
 8006562:	3001      	adds	r0, #1
 8006564:	d020      	beq.n	80065a8 <_printf_common+0xa8>
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	68e5      	ldr	r5, [r4, #12]
 800656a:	f003 0306 	and.w	r3, r3, #6
 800656e:	2b04      	cmp	r3, #4
 8006570:	bf18      	it	ne
 8006572:	2500      	movne	r5, #0
 8006574:	6832      	ldr	r2, [r6, #0]
 8006576:	f04f 0600 	mov.w	r6, #0
 800657a:	68a3      	ldr	r3, [r4, #8]
 800657c:	bf08      	it	eq
 800657e:	1aad      	subeq	r5, r5, r2
 8006580:	6922      	ldr	r2, [r4, #16]
 8006582:	bf08      	it	eq
 8006584:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006588:	4293      	cmp	r3, r2
 800658a:	bfc4      	itt	gt
 800658c:	1a9b      	subgt	r3, r3, r2
 800658e:	18ed      	addgt	r5, r5, r3
 8006590:	341a      	adds	r4, #26
 8006592:	42b5      	cmp	r5, r6
 8006594:	d11a      	bne.n	80065cc <_printf_common+0xcc>
 8006596:	2000      	movs	r0, #0
 8006598:	e008      	b.n	80065ac <_printf_common+0xac>
 800659a:	2301      	movs	r3, #1
 800659c:	4652      	mov	r2, sl
 800659e:	4649      	mov	r1, r9
 80065a0:	4638      	mov	r0, r7
 80065a2:	47c0      	blx	r8
 80065a4:	3001      	adds	r0, #1
 80065a6:	d103      	bne.n	80065b0 <_printf_common+0xb0>
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065b0:	3501      	adds	r5, #1
 80065b2:	e7c4      	b.n	800653e <_printf_common+0x3e>
 80065b4:	2030      	movs	r0, #48	; 0x30
 80065b6:	18e1      	adds	r1, r4, r3
 80065b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065bc:	1c5a      	adds	r2, r3, #1
 80065be:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065c2:	4422      	add	r2, r4
 80065c4:	3302      	adds	r3, #2
 80065c6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065ca:	e7c5      	b.n	8006558 <_printf_common+0x58>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4622      	mov	r2, r4
 80065d0:	4649      	mov	r1, r9
 80065d2:	4638      	mov	r0, r7
 80065d4:	47c0      	blx	r8
 80065d6:	3001      	adds	r0, #1
 80065d8:	d0e6      	beq.n	80065a8 <_printf_common+0xa8>
 80065da:	3601      	adds	r6, #1
 80065dc:	e7d9      	b.n	8006592 <_printf_common+0x92>
	...

080065e0 <_printf_i>:
 80065e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065e4:	7e0f      	ldrb	r7, [r1, #24]
 80065e6:	4691      	mov	r9, r2
 80065e8:	2f78      	cmp	r7, #120	; 0x78
 80065ea:	4680      	mov	r8, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	469a      	mov	sl, r3
 80065f0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80065f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80065f6:	d807      	bhi.n	8006608 <_printf_i+0x28>
 80065f8:	2f62      	cmp	r7, #98	; 0x62
 80065fa:	d80a      	bhi.n	8006612 <_printf_i+0x32>
 80065fc:	2f00      	cmp	r7, #0
 80065fe:	f000 80d9 	beq.w	80067b4 <_printf_i+0x1d4>
 8006602:	2f58      	cmp	r7, #88	; 0x58
 8006604:	f000 80a4 	beq.w	8006750 <_printf_i+0x170>
 8006608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800660c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006610:	e03a      	b.n	8006688 <_printf_i+0xa8>
 8006612:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006616:	2b15      	cmp	r3, #21
 8006618:	d8f6      	bhi.n	8006608 <_printf_i+0x28>
 800661a:	a101      	add	r1, pc, #4	; (adr r1, 8006620 <_printf_i+0x40>)
 800661c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006620:	08006679 	.word	0x08006679
 8006624:	0800668d 	.word	0x0800668d
 8006628:	08006609 	.word	0x08006609
 800662c:	08006609 	.word	0x08006609
 8006630:	08006609 	.word	0x08006609
 8006634:	08006609 	.word	0x08006609
 8006638:	0800668d 	.word	0x0800668d
 800663c:	08006609 	.word	0x08006609
 8006640:	08006609 	.word	0x08006609
 8006644:	08006609 	.word	0x08006609
 8006648:	08006609 	.word	0x08006609
 800664c:	0800679b 	.word	0x0800679b
 8006650:	080066bd 	.word	0x080066bd
 8006654:	0800677d 	.word	0x0800677d
 8006658:	08006609 	.word	0x08006609
 800665c:	08006609 	.word	0x08006609
 8006660:	080067bd 	.word	0x080067bd
 8006664:	08006609 	.word	0x08006609
 8006668:	080066bd 	.word	0x080066bd
 800666c:	08006609 	.word	0x08006609
 8006670:	08006609 	.word	0x08006609
 8006674:	08006785 	.word	0x08006785
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	1d1a      	adds	r2, r3, #4
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	602a      	str	r2, [r5, #0]
 8006680:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006684:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006688:	2301      	movs	r3, #1
 800668a:	e0a4      	b.n	80067d6 <_printf_i+0x1f6>
 800668c:	6820      	ldr	r0, [r4, #0]
 800668e:	6829      	ldr	r1, [r5, #0]
 8006690:	0606      	lsls	r6, r0, #24
 8006692:	f101 0304 	add.w	r3, r1, #4
 8006696:	d50a      	bpl.n	80066ae <_printf_i+0xce>
 8006698:	680e      	ldr	r6, [r1, #0]
 800669a:	602b      	str	r3, [r5, #0]
 800669c:	2e00      	cmp	r6, #0
 800669e:	da03      	bge.n	80066a8 <_printf_i+0xc8>
 80066a0:	232d      	movs	r3, #45	; 0x2d
 80066a2:	4276      	negs	r6, r6
 80066a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066a8:	230a      	movs	r3, #10
 80066aa:	485e      	ldr	r0, [pc, #376]	; (8006824 <_printf_i+0x244>)
 80066ac:	e019      	b.n	80066e2 <_printf_i+0x102>
 80066ae:	680e      	ldr	r6, [r1, #0]
 80066b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066b4:	602b      	str	r3, [r5, #0]
 80066b6:	bf18      	it	ne
 80066b8:	b236      	sxthne	r6, r6
 80066ba:	e7ef      	b.n	800669c <_printf_i+0xbc>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	6820      	ldr	r0, [r4, #0]
 80066c0:	1d19      	adds	r1, r3, #4
 80066c2:	6029      	str	r1, [r5, #0]
 80066c4:	0601      	lsls	r1, r0, #24
 80066c6:	d501      	bpl.n	80066cc <_printf_i+0xec>
 80066c8:	681e      	ldr	r6, [r3, #0]
 80066ca:	e002      	b.n	80066d2 <_printf_i+0xf2>
 80066cc:	0646      	lsls	r6, r0, #25
 80066ce:	d5fb      	bpl.n	80066c8 <_printf_i+0xe8>
 80066d0:	881e      	ldrh	r6, [r3, #0]
 80066d2:	2f6f      	cmp	r7, #111	; 0x6f
 80066d4:	bf0c      	ite	eq
 80066d6:	2308      	moveq	r3, #8
 80066d8:	230a      	movne	r3, #10
 80066da:	4852      	ldr	r0, [pc, #328]	; (8006824 <_printf_i+0x244>)
 80066dc:	2100      	movs	r1, #0
 80066de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80066e2:	6865      	ldr	r5, [r4, #4]
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	bfa8      	it	ge
 80066e8:	6821      	ldrge	r1, [r4, #0]
 80066ea:	60a5      	str	r5, [r4, #8]
 80066ec:	bfa4      	itt	ge
 80066ee:	f021 0104 	bicge.w	r1, r1, #4
 80066f2:	6021      	strge	r1, [r4, #0]
 80066f4:	b90e      	cbnz	r6, 80066fa <_printf_i+0x11a>
 80066f6:	2d00      	cmp	r5, #0
 80066f8:	d04d      	beq.n	8006796 <_printf_i+0x1b6>
 80066fa:	4615      	mov	r5, r2
 80066fc:	fbb6 f1f3 	udiv	r1, r6, r3
 8006700:	fb03 6711 	mls	r7, r3, r1, r6
 8006704:	5dc7      	ldrb	r7, [r0, r7]
 8006706:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800670a:	4637      	mov	r7, r6
 800670c:	42bb      	cmp	r3, r7
 800670e:	460e      	mov	r6, r1
 8006710:	d9f4      	bls.n	80066fc <_printf_i+0x11c>
 8006712:	2b08      	cmp	r3, #8
 8006714:	d10b      	bne.n	800672e <_printf_i+0x14e>
 8006716:	6823      	ldr	r3, [r4, #0]
 8006718:	07de      	lsls	r6, r3, #31
 800671a:	d508      	bpl.n	800672e <_printf_i+0x14e>
 800671c:	6923      	ldr	r3, [r4, #16]
 800671e:	6861      	ldr	r1, [r4, #4]
 8006720:	4299      	cmp	r1, r3
 8006722:	bfde      	ittt	le
 8006724:	2330      	movle	r3, #48	; 0x30
 8006726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800672a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800672e:	1b52      	subs	r2, r2, r5
 8006730:	6122      	str	r2, [r4, #16]
 8006732:	464b      	mov	r3, r9
 8006734:	4621      	mov	r1, r4
 8006736:	4640      	mov	r0, r8
 8006738:	f8cd a000 	str.w	sl, [sp]
 800673c:	aa03      	add	r2, sp, #12
 800673e:	f7ff fedf 	bl	8006500 <_printf_common>
 8006742:	3001      	adds	r0, #1
 8006744:	d14c      	bne.n	80067e0 <_printf_i+0x200>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b004      	add	sp, #16
 800674c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006750:	4834      	ldr	r0, [pc, #208]	; (8006824 <_printf_i+0x244>)
 8006752:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006756:	6829      	ldr	r1, [r5, #0]
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	f851 6b04 	ldr.w	r6, [r1], #4
 800675e:	6029      	str	r1, [r5, #0]
 8006760:	061d      	lsls	r5, r3, #24
 8006762:	d514      	bpl.n	800678e <_printf_i+0x1ae>
 8006764:	07df      	lsls	r7, r3, #31
 8006766:	bf44      	itt	mi
 8006768:	f043 0320 	orrmi.w	r3, r3, #32
 800676c:	6023      	strmi	r3, [r4, #0]
 800676e:	b91e      	cbnz	r6, 8006778 <_printf_i+0x198>
 8006770:	6823      	ldr	r3, [r4, #0]
 8006772:	f023 0320 	bic.w	r3, r3, #32
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	2310      	movs	r3, #16
 800677a:	e7af      	b.n	80066dc <_printf_i+0xfc>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	f043 0320 	orr.w	r3, r3, #32
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	2378      	movs	r3, #120	; 0x78
 8006786:	4828      	ldr	r0, [pc, #160]	; (8006828 <_printf_i+0x248>)
 8006788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800678c:	e7e3      	b.n	8006756 <_printf_i+0x176>
 800678e:	0659      	lsls	r1, r3, #25
 8006790:	bf48      	it	mi
 8006792:	b2b6      	uxthmi	r6, r6
 8006794:	e7e6      	b.n	8006764 <_printf_i+0x184>
 8006796:	4615      	mov	r5, r2
 8006798:	e7bb      	b.n	8006712 <_printf_i+0x132>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	6826      	ldr	r6, [r4, #0]
 800679e:	1d18      	adds	r0, r3, #4
 80067a0:	6961      	ldr	r1, [r4, #20]
 80067a2:	6028      	str	r0, [r5, #0]
 80067a4:	0635      	lsls	r5, r6, #24
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	d501      	bpl.n	80067ae <_printf_i+0x1ce>
 80067aa:	6019      	str	r1, [r3, #0]
 80067ac:	e002      	b.n	80067b4 <_printf_i+0x1d4>
 80067ae:	0670      	lsls	r0, r6, #25
 80067b0:	d5fb      	bpl.n	80067aa <_printf_i+0x1ca>
 80067b2:	8019      	strh	r1, [r3, #0]
 80067b4:	2300      	movs	r3, #0
 80067b6:	4615      	mov	r5, r2
 80067b8:	6123      	str	r3, [r4, #16]
 80067ba:	e7ba      	b.n	8006732 <_printf_i+0x152>
 80067bc:	682b      	ldr	r3, [r5, #0]
 80067be:	2100      	movs	r1, #0
 80067c0:	1d1a      	adds	r2, r3, #4
 80067c2:	602a      	str	r2, [r5, #0]
 80067c4:	681d      	ldr	r5, [r3, #0]
 80067c6:	6862      	ldr	r2, [r4, #4]
 80067c8:	4628      	mov	r0, r5
 80067ca:	f002 faef 	bl	8008dac <memchr>
 80067ce:	b108      	cbz	r0, 80067d4 <_printf_i+0x1f4>
 80067d0:	1b40      	subs	r0, r0, r5
 80067d2:	6060      	str	r0, [r4, #4]
 80067d4:	6863      	ldr	r3, [r4, #4]
 80067d6:	6123      	str	r3, [r4, #16]
 80067d8:	2300      	movs	r3, #0
 80067da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067de:	e7a8      	b.n	8006732 <_printf_i+0x152>
 80067e0:	462a      	mov	r2, r5
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	47d0      	blx	sl
 80067ea:	3001      	adds	r0, #1
 80067ec:	d0ab      	beq.n	8006746 <_printf_i+0x166>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	079b      	lsls	r3, r3, #30
 80067f2:	d413      	bmi.n	800681c <_printf_i+0x23c>
 80067f4:	68e0      	ldr	r0, [r4, #12]
 80067f6:	9b03      	ldr	r3, [sp, #12]
 80067f8:	4298      	cmp	r0, r3
 80067fa:	bfb8      	it	lt
 80067fc:	4618      	movlt	r0, r3
 80067fe:	e7a4      	b.n	800674a <_printf_i+0x16a>
 8006800:	2301      	movs	r3, #1
 8006802:	4632      	mov	r2, r6
 8006804:	4649      	mov	r1, r9
 8006806:	4640      	mov	r0, r8
 8006808:	47d0      	blx	sl
 800680a:	3001      	adds	r0, #1
 800680c:	d09b      	beq.n	8006746 <_printf_i+0x166>
 800680e:	3501      	adds	r5, #1
 8006810:	68e3      	ldr	r3, [r4, #12]
 8006812:	9903      	ldr	r1, [sp, #12]
 8006814:	1a5b      	subs	r3, r3, r1
 8006816:	42ab      	cmp	r3, r5
 8006818:	dcf2      	bgt.n	8006800 <_printf_i+0x220>
 800681a:	e7eb      	b.n	80067f4 <_printf_i+0x214>
 800681c:	2500      	movs	r5, #0
 800681e:	f104 0619 	add.w	r6, r4, #25
 8006822:	e7f5      	b.n	8006810 <_printf_i+0x230>
 8006824:	0800a88e 	.word	0x0800a88e
 8006828:	0800a89f 	.word	0x0800a89f

0800682c <_scanf_float>:
 800682c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006830:	b087      	sub	sp, #28
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	688b      	ldr	r3, [r1, #8]
 8006836:	4617      	mov	r7, r2
 8006838:	1e5a      	subs	r2, r3, #1
 800683a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800683e:	bf85      	ittet	hi
 8006840:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006844:	195b      	addhi	r3, r3, r5
 8006846:	2300      	movls	r3, #0
 8006848:	9302      	strhi	r3, [sp, #8]
 800684a:	bf88      	it	hi
 800684c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006850:	468b      	mov	fp, r1
 8006852:	f04f 0500 	mov.w	r5, #0
 8006856:	bf8c      	ite	hi
 8006858:	608b      	strhi	r3, [r1, #8]
 800685a:	9302      	strls	r3, [sp, #8]
 800685c:	680b      	ldr	r3, [r1, #0]
 800685e:	4680      	mov	r8, r0
 8006860:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006864:	f84b 3b1c 	str.w	r3, [fp], #28
 8006868:	460c      	mov	r4, r1
 800686a:	465e      	mov	r6, fp
 800686c:	46aa      	mov	sl, r5
 800686e:	46a9      	mov	r9, r5
 8006870:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006874:	9501      	str	r5, [sp, #4]
 8006876:	68a2      	ldr	r2, [r4, #8]
 8006878:	b152      	cbz	r2, 8006890 <_scanf_float+0x64>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b4e      	cmp	r3, #78	; 0x4e
 8006880:	d864      	bhi.n	800694c <_scanf_float+0x120>
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d83c      	bhi.n	8006900 <_scanf_float+0xd4>
 8006886:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800688a:	b2c8      	uxtb	r0, r1
 800688c:	280e      	cmp	r0, #14
 800688e:	d93a      	bls.n	8006906 <_scanf_float+0xda>
 8006890:	f1b9 0f00 	cmp.w	r9, #0
 8006894:	d003      	beq.n	800689e <_scanf_float+0x72>
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800689c:	6023      	str	r3, [r4, #0]
 800689e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068a2:	f1ba 0f01 	cmp.w	sl, #1
 80068a6:	f200 8113 	bhi.w	8006ad0 <_scanf_float+0x2a4>
 80068aa:	455e      	cmp	r6, fp
 80068ac:	f200 8105 	bhi.w	8006aba <_scanf_float+0x28e>
 80068b0:	2501      	movs	r5, #1
 80068b2:	4628      	mov	r0, r5
 80068b4:	b007      	add	sp, #28
 80068b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80068be:	2a0d      	cmp	r2, #13
 80068c0:	d8e6      	bhi.n	8006890 <_scanf_float+0x64>
 80068c2:	a101      	add	r1, pc, #4	; (adr r1, 80068c8 <_scanf_float+0x9c>)
 80068c4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80068c8:	08006a07 	.word	0x08006a07
 80068cc:	08006891 	.word	0x08006891
 80068d0:	08006891 	.word	0x08006891
 80068d4:	08006891 	.word	0x08006891
 80068d8:	08006a67 	.word	0x08006a67
 80068dc:	08006a3f 	.word	0x08006a3f
 80068e0:	08006891 	.word	0x08006891
 80068e4:	08006891 	.word	0x08006891
 80068e8:	08006a15 	.word	0x08006a15
 80068ec:	08006891 	.word	0x08006891
 80068f0:	08006891 	.word	0x08006891
 80068f4:	08006891 	.word	0x08006891
 80068f8:	08006891 	.word	0x08006891
 80068fc:	080069cd 	.word	0x080069cd
 8006900:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006904:	e7db      	b.n	80068be <_scanf_float+0x92>
 8006906:	290e      	cmp	r1, #14
 8006908:	d8c2      	bhi.n	8006890 <_scanf_float+0x64>
 800690a:	a001      	add	r0, pc, #4	; (adr r0, 8006910 <_scanf_float+0xe4>)
 800690c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006910:	080069bf 	.word	0x080069bf
 8006914:	08006891 	.word	0x08006891
 8006918:	080069bf 	.word	0x080069bf
 800691c:	08006a53 	.word	0x08006a53
 8006920:	08006891 	.word	0x08006891
 8006924:	0800696d 	.word	0x0800696d
 8006928:	080069a9 	.word	0x080069a9
 800692c:	080069a9 	.word	0x080069a9
 8006930:	080069a9 	.word	0x080069a9
 8006934:	080069a9 	.word	0x080069a9
 8006938:	080069a9 	.word	0x080069a9
 800693c:	080069a9 	.word	0x080069a9
 8006940:	080069a9 	.word	0x080069a9
 8006944:	080069a9 	.word	0x080069a9
 8006948:	080069a9 	.word	0x080069a9
 800694c:	2b6e      	cmp	r3, #110	; 0x6e
 800694e:	d809      	bhi.n	8006964 <_scanf_float+0x138>
 8006950:	2b60      	cmp	r3, #96	; 0x60
 8006952:	d8b2      	bhi.n	80068ba <_scanf_float+0x8e>
 8006954:	2b54      	cmp	r3, #84	; 0x54
 8006956:	d077      	beq.n	8006a48 <_scanf_float+0x21c>
 8006958:	2b59      	cmp	r3, #89	; 0x59
 800695a:	d199      	bne.n	8006890 <_scanf_float+0x64>
 800695c:	2d07      	cmp	r5, #7
 800695e:	d197      	bne.n	8006890 <_scanf_float+0x64>
 8006960:	2508      	movs	r5, #8
 8006962:	e029      	b.n	80069b8 <_scanf_float+0x18c>
 8006964:	2b74      	cmp	r3, #116	; 0x74
 8006966:	d06f      	beq.n	8006a48 <_scanf_float+0x21c>
 8006968:	2b79      	cmp	r3, #121	; 0x79
 800696a:	e7f6      	b.n	800695a <_scanf_float+0x12e>
 800696c:	6821      	ldr	r1, [r4, #0]
 800696e:	05c8      	lsls	r0, r1, #23
 8006970:	d51a      	bpl.n	80069a8 <_scanf_float+0x17c>
 8006972:	9b02      	ldr	r3, [sp, #8]
 8006974:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006978:	6021      	str	r1, [r4, #0]
 800697a:	f109 0901 	add.w	r9, r9, #1
 800697e:	b11b      	cbz	r3, 8006988 <_scanf_float+0x15c>
 8006980:	3b01      	subs	r3, #1
 8006982:	3201      	adds	r2, #1
 8006984:	9302      	str	r3, [sp, #8]
 8006986:	60a2      	str	r2, [r4, #8]
 8006988:	68a3      	ldr	r3, [r4, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	60a3      	str	r3, [r4, #8]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	3301      	adds	r3, #1
 8006992:	6123      	str	r3, [r4, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	3b01      	subs	r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	f340 8084 	ble.w	8006aa8 <_scanf_float+0x27c>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	e766      	b.n	8006876 <_scanf_float+0x4a>
 80069a8:	eb1a 0f05 	cmn.w	sl, r5
 80069ac:	f47f af70 	bne.w	8006890 <_scanf_float+0x64>
 80069b0:	6822      	ldr	r2, [r4, #0]
 80069b2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80069b6:	6022      	str	r2, [r4, #0]
 80069b8:	f806 3b01 	strb.w	r3, [r6], #1
 80069bc:	e7e4      	b.n	8006988 <_scanf_float+0x15c>
 80069be:	6822      	ldr	r2, [r4, #0]
 80069c0:	0610      	lsls	r0, r2, #24
 80069c2:	f57f af65 	bpl.w	8006890 <_scanf_float+0x64>
 80069c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ca:	e7f4      	b.n	80069b6 <_scanf_float+0x18a>
 80069cc:	f1ba 0f00 	cmp.w	sl, #0
 80069d0:	d10e      	bne.n	80069f0 <_scanf_float+0x1c4>
 80069d2:	f1b9 0f00 	cmp.w	r9, #0
 80069d6:	d10e      	bne.n	80069f6 <_scanf_float+0x1ca>
 80069d8:	6822      	ldr	r2, [r4, #0]
 80069da:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80069de:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80069e2:	d108      	bne.n	80069f6 <_scanf_float+0x1ca>
 80069e4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80069e8:	f04f 0a01 	mov.w	sl, #1
 80069ec:	6022      	str	r2, [r4, #0]
 80069ee:	e7e3      	b.n	80069b8 <_scanf_float+0x18c>
 80069f0:	f1ba 0f02 	cmp.w	sl, #2
 80069f4:	d055      	beq.n	8006aa2 <_scanf_float+0x276>
 80069f6:	2d01      	cmp	r5, #1
 80069f8:	d002      	beq.n	8006a00 <_scanf_float+0x1d4>
 80069fa:	2d04      	cmp	r5, #4
 80069fc:	f47f af48 	bne.w	8006890 <_scanf_float+0x64>
 8006a00:	3501      	adds	r5, #1
 8006a02:	b2ed      	uxtb	r5, r5
 8006a04:	e7d8      	b.n	80069b8 <_scanf_float+0x18c>
 8006a06:	f1ba 0f01 	cmp.w	sl, #1
 8006a0a:	f47f af41 	bne.w	8006890 <_scanf_float+0x64>
 8006a0e:	f04f 0a02 	mov.w	sl, #2
 8006a12:	e7d1      	b.n	80069b8 <_scanf_float+0x18c>
 8006a14:	b97d      	cbnz	r5, 8006a36 <_scanf_float+0x20a>
 8006a16:	f1b9 0f00 	cmp.w	r9, #0
 8006a1a:	f47f af3c 	bne.w	8006896 <_scanf_float+0x6a>
 8006a1e:	6822      	ldr	r2, [r4, #0]
 8006a20:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006a24:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006a28:	f47f af39 	bne.w	800689e <_scanf_float+0x72>
 8006a2c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a30:	2501      	movs	r5, #1
 8006a32:	6022      	str	r2, [r4, #0]
 8006a34:	e7c0      	b.n	80069b8 <_scanf_float+0x18c>
 8006a36:	2d03      	cmp	r5, #3
 8006a38:	d0e2      	beq.n	8006a00 <_scanf_float+0x1d4>
 8006a3a:	2d05      	cmp	r5, #5
 8006a3c:	e7de      	b.n	80069fc <_scanf_float+0x1d0>
 8006a3e:	2d02      	cmp	r5, #2
 8006a40:	f47f af26 	bne.w	8006890 <_scanf_float+0x64>
 8006a44:	2503      	movs	r5, #3
 8006a46:	e7b7      	b.n	80069b8 <_scanf_float+0x18c>
 8006a48:	2d06      	cmp	r5, #6
 8006a4a:	f47f af21 	bne.w	8006890 <_scanf_float+0x64>
 8006a4e:	2507      	movs	r5, #7
 8006a50:	e7b2      	b.n	80069b8 <_scanf_float+0x18c>
 8006a52:	6822      	ldr	r2, [r4, #0]
 8006a54:	0591      	lsls	r1, r2, #22
 8006a56:	f57f af1b 	bpl.w	8006890 <_scanf_float+0x64>
 8006a5a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006a5e:	6022      	str	r2, [r4, #0]
 8006a60:	f8cd 9004 	str.w	r9, [sp, #4]
 8006a64:	e7a8      	b.n	80069b8 <_scanf_float+0x18c>
 8006a66:	6822      	ldr	r2, [r4, #0]
 8006a68:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006a6c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006a70:	d006      	beq.n	8006a80 <_scanf_float+0x254>
 8006a72:	0550      	lsls	r0, r2, #21
 8006a74:	f57f af0c 	bpl.w	8006890 <_scanf_float+0x64>
 8006a78:	f1b9 0f00 	cmp.w	r9, #0
 8006a7c:	f43f af0f 	beq.w	800689e <_scanf_float+0x72>
 8006a80:	0591      	lsls	r1, r2, #22
 8006a82:	bf58      	it	pl
 8006a84:	9901      	ldrpl	r1, [sp, #4]
 8006a86:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006a8a:	bf58      	it	pl
 8006a8c:	eba9 0101 	subpl.w	r1, r9, r1
 8006a90:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006a94:	f04f 0900 	mov.w	r9, #0
 8006a98:	bf58      	it	pl
 8006a9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006a9e:	6022      	str	r2, [r4, #0]
 8006aa0:	e78a      	b.n	80069b8 <_scanf_float+0x18c>
 8006aa2:	f04f 0a03 	mov.w	sl, #3
 8006aa6:	e787      	b.n	80069b8 <_scanf_float+0x18c>
 8006aa8:	4639      	mov	r1, r7
 8006aaa:	4640      	mov	r0, r8
 8006aac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ab0:	4798      	blx	r3
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f43f aedf 	beq.w	8006876 <_scanf_float+0x4a>
 8006ab8:	e6ea      	b.n	8006890 <_scanf_float+0x64>
 8006aba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006abe:	463a      	mov	r2, r7
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ac6:	4798      	blx	r3
 8006ac8:	6923      	ldr	r3, [r4, #16]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	e6ec      	b.n	80068aa <_scanf_float+0x7e>
 8006ad0:	1e6b      	subs	r3, r5, #1
 8006ad2:	2b06      	cmp	r3, #6
 8006ad4:	d825      	bhi.n	8006b22 <_scanf_float+0x2f6>
 8006ad6:	2d02      	cmp	r5, #2
 8006ad8:	d836      	bhi.n	8006b48 <_scanf_float+0x31c>
 8006ada:	455e      	cmp	r6, fp
 8006adc:	f67f aee8 	bls.w	80068b0 <_scanf_float+0x84>
 8006ae0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	4640      	mov	r0, r8
 8006ae8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006aec:	4798      	blx	r3
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	e7f1      	b.n	8006ada <_scanf_float+0x2ae>
 8006af6:	9802      	ldr	r0, [sp, #8]
 8006af8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006afc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006b00:	463a      	mov	r2, r7
 8006b02:	9002      	str	r0, [sp, #8]
 8006b04:	4640      	mov	r0, r8
 8006b06:	4798      	blx	r3
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6123      	str	r3, [r4, #16]
 8006b0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b12:	fa5f fa8a 	uxtb.w	sl, sl
 8006b16:	f1ba 0f02 	cmp.w	sl, #2
 8006b1a:	d1ec      	bne.n	8006af6 <_scanf_float+0x2ca>
 8006b1c:	3d03      	subs	r5, #3
 8006b1e:	b2ed      	uxtb	r5, r5
 8006b20:	1b76      	subs	r6, r6, r5
 8006b22:	6823      	ldr	r3, [r4, #0]
 8006b24:	05da      	lsls	r2, r3, #23
 8006b26:	d52f      	bpl.n	8006b88 <_scanf_float+0x35c>
 8006b28:	055b      	lsls	r3, r3, #21
 8006b2a:	d510      	bpl.n	8006b4e <_scanf_float+0x322>
 8006b2c:	455e      	cmp	r6, fp
 8006b2e:	f67f aebf 	bls.w	80068b0 <_scanf_float+0x84>
 8006b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b36:	463a      	mov	r2, r7
 8006b38:	4640      	mov	r0, r8
 8006b3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b3e:	4798      	blx	r3
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	e7f1      	b.n	8006b2c <_scanf_float+0x300>
 8006b48:	46aa      	mov	sl, r5
 8006b4a:	9602      	str	r6, [sp, #8]
 8006b4c:	e7df      	b.n	8006b0e <_scanf_float+0x2e2>
 8006b4e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	2965      	cmp	r1, #101	; 0x65
 8006b56:	f103 33ff 	add.w	r3, r3, #4294967295
 8006b5a:	f106 35ff 	add.w	r5, r6, #4294967295
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	d00c      	beq.n	8006b7c <_scanf_float+0x350>
 8006b62:	2945      	cmp	r1, #69	; 0x45
 8006b64:	d00a      	beq.n	8006b7c <_scanf_float+0x350>
 8006b66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b6a:	463a      	mov	r2, r7
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4798      	blx	r3
 8006b70:	6923      	ldr	r3, [r4, #16]
 8006b72:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	1eb5      	subs	r5, r6, #2
 8006b7a:	6123      	str	r3, [r4, #16]
 8006b7c:	463a      	mov	r2, r7
 8006b7e:	4640      	mov	r0, r8
 8006b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006b84:	4798      	blx	r3
 8006b86:	462e      	mov	r6, r5
 8006b88:	6825      	ldr	r5, [r4, #0]
 8006b8a:	f015 0510 	ands.w	r5, r5, #16
 8006b8e:	d155      	bne.n	8006c3c <_scanf_float+0x410>
 8006b90:	7035      	strb	r5, [r6, #0]
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9c:	d11b      	bne.n	8006bd6 <_scanf_float+0x3aa>
 8006b9e:	9b01      	ldr	r3, [sp, #4]
 8006ba0:	454b      	cmp	r3, r9
 8006ba2:	eba3 0209 	sub.w	r2, r3, r9
 8006ba6:	d123      	bne.n	8006bf0 <_scanf_float+0x3c4>
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4659      	mov	r1, fp
 8006bac:	4640      	mov	r0, r8
 8006bae:	f000 fe7b 	bl	80078a8 <_strtod_r>
 8006bb2:	6822      	ldr	r2, [r4, #0]
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	f012 0f02 	tst.w	r2, #2
 8006bba:	4606      	mov	r6, r0
 8006bbc:	460f      	mov	r7, r1
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	d021      	beq.n	8006c06 <_scanf_float+0x3da>
 8006bc2:	1d1a      	adds	r2, r3, #4
 8006bc4:	9903      	ldr	r1, [sp, #12]
 8006bc6:	600a      	str	r2, [r1, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	e9c3 6700 	strd	r6, r7, [r3]
 8006bce:	68e3      	ldr	r3, [r4, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60e3      	str	r3, [r4, #12]
 8006bd4:	e66d      	b.n	80068b2 <_scanf_float+0x86>
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0e5      	beq.n	8006ba8 <_scanf_float+0x37c>
 8006bdc:	9905      	ldr	r1, [sp, #20]
 8006bde:	230a      	movs	r3, #10
 8006be0:	462a      	mov	r2, r5
 8006be2:	4640      	mov	r0, r8
 8006be4:	3101      	adds	r1, #1
 8006be6:	f000 fee1 	bl	80079ac <_strtol_r>
 8006bea:	9b04      	ldr	r3, [sp, #16]
 8006bec:	9e05      	ldr	r6, [sp, #20]
 8006bee:	1ac2      	subs	r2, r0, r3
 8006bf0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006bf4:	429e      	cmp	r6, r3
 8006bf6:	bf28      	it	cs
 8006bf8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	4910      	ldr	r1, [pc, #64]	; (8006c40 <_scanf_float+0x414>)
 8006c00:	f000 f826 	bl	8006c50 <siprintf>
 8006c04:	e7d0      	b.n	8006ba8 <_scanf_float+0x37c>
 8006c06:	f012 0f04 	tst.w	r2, #4
 8006c0a:	f103 0204 	add.w	r2, r3, #4
 8006c0e:	d1d9      	bne.n	8006bc4 <_scanf_float+0x398>
 8006c10:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006c14:	f8cc 2000 	str.w	r2, [ip]
 8006c18:	f8d3 8000 	ldr.w	r8, [r3]
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	f7f9 fef4 	bl	8000a0c <__aeabi_dcmpun>
 8006c24:	b128      	cbz	r0, 8006c32 <_scanf_float+0x406>
 8006c26:	4807      	ldr	r0, [pc, #28]	; (8006c44 <_scanf_float+0x418>)
 8006c28:	f000 f80e 	bl	8006c48 <nanf>
 8006c2c:	f8c8 0000 	str.w	r0, [r8]
 8006c30:	e7cd      	b.n	8006bce <_scanf_float+0x3a2>
 8006c32:	4630      	mov	r0, r6
 8006c34:	4639      	mov	r1, r7
 8006c36:	f7f9 ff47 	bl	8000ac8 <__aeabi_d2f>
 8006c3a:	e7f7      	b.n	8006c2c <_scanf_float+0x400>
 8006c3c:	2500      	movs	r5, #0
 8006c3e:	e638      	b.n	80068b2 <_scanf_float+0x86>
 8006c40:	0800a8b0 	.word	0x0800a8b0
 8006c44:	0800acb8 	.word	0x0800acb8

08006c48 <nanf>:
 8006c48:	4800      	ldr	r0, [pc, #0]	; (8006c4c <nanf+0x4>)
 8006c4a:	4770      	bx	lr
 8006c4c:	7fc00000 	.word	0x7fc00000

08006c50 <siprintf>:
 8006c50:	b40e      	push	{r1, r2, r3}
 8006c52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c56:	b500      	push	{lr}
 8006c58:	b09c      	sub	sp, #112	; 0x70
 8006c5a:	ab1d      	add	r3, sp, #116	; 0x74
 8006c5c:	9002      	str	r0, [sp, #8]
 8006c5e:	9006      	str	r0, [sp, #24]
 8006c60:	9107      	str	r1, [sp, #28]
 8006c62:	9104      	str	r1, [sp, #16]
 8006c64:	4808      	ldr	r0, [pc, #32]	; (8006c88 <siprintf+0x38>)
 8006c66:	4909      	ldr	r1, [pc, #36]	; (8006c8c <siprintf+0x3c>)
 8006c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6c:	9105      	str	r1, [sp, #20]
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	a902      	add	r1, sp, #8
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	f002 feac 	bl	80099d0 <_svfiprintf_r>
 8006c78:	2200      	movs	r2, #0
 8006c7a:	9b02      	ldr	r3, [sp, #8]
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	b01c      	add	sp, #112	; 0x70
 8006c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c84:	b003      	add	sp, #12
 8006c86:	4770      	bx	lr
 8006c88:	20000010 	.word	0x20000010
 8006c8c:	ffff0208 	.word	0xffff0208

08006c90 <sulp>:
 8006c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c94:	460f      	mov	r7, r1
 8006c96:	4690      	mov	r8, r2
 8006c98:	f002 fc06 	bl	80094a8 <__ulp>
 8006c9c:	4604      	mov	r4, r0
 8006c9e:	460d      	mov	r5, r1
 8006ca0:	f1b8 0f00 	cmp.w	r8, #0
 8006ca4:	d011      	beq.n	8006cca <sulp+0x3a>
 8006ca6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006caa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	dd0b      	ble.n	8006cca <sulp+0x3a>
 8006cb2:	2400      	movs	r4, #0
 8006cb4:	051b      	lsls	r3, r3, #20
 8006cb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006cba:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	f7f9 fc09 	bl	80004d8 <__aeabi_dmul>
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	4620      	mov	r0, r4
 8006ccc:	4629      	mov	r1, r5
 8006cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cd2:	0000      	movs	r0, r0
 8006cd4:	0000      	movs	r0, r0
	...

08006cd8 <_strtod_l>:
 8006cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cdc:	469b      	mov	fp, r3
 8006cde:	2300      	movs	r3, #0
 8006ce0:	b09f      	sub	sp, #124	; 0x7c
 8006ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ce4:	4b9e      	ldr	r3, [pc, #632]	; (8006f60 <_strtod_l+0x288>)
 8006ce6:	4682      	mov	sl, r0
 8006ce8:	681f      	ldr	r7, [r3, #0]
 8006cea:	460e      	mov	r6, r1
 8006cec:	4638      	mov	r0, r7
 8006cee:	9215      	str	r2, [sp, #84]	; 0x54
 8006cf0:	f7f9 fa2e 	bl	8000150 <strlen>
 8006cf4:	f04f 0800 	mov.w	r8, #0
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	f04f 0900 	mov.w	r9, #0
 8006cfe:	9619      	str	r6, [sp, #100]	; 0x64
 8006d00:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	2a2b      	cmp	r2, #43	; 0x2b
 8006d06:	d04c      	beq.n	8006da2 <_strtod_l+0xca>
 8006d08:	d83a      	bhi.n	8006d80 <_strtod_l+0xa8>
 8006d0a:	2a0d      	cmp	r2, #13
 8006d0c:	d833      	bhi.n	8006d76 <_strtod_l+0x9e>
 8006d0e:	2a08      	cmp	r2, #8
 8006d10:	d833      	bhi.n	8006d7a <_strtod_l+0xa2>
 8006d12:	2a00      	cmp	r2, #0
 8006d14:	d03d      	beq.n	8006d92 <_strtod_l+0xba>
 8006d16:	2300      	movs	r3, #0
 8006d18:	930a      	str	r3, [sp, #40]	; 0x28
 8006d1a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006d1c:	782b      	ldrb	r3, [r5, #0]
 8006d1e:	2b30      	cmp	r3, #48	; 0x30
 8006d20:	f040 80aa 	bne.w	8006e78 <_strtod_l+0x1a0>
 8006d24:	786b      	ldrb	r3, [r5, #1]
 8006d26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006d2a:	2b58      	cmp	r3, #88	; 0x58
 8006d2c:	d166      	bne.n	8006dfc <_strtod_l+0x124>
 8006d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d30:	4650      	mov	r0, sl
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	ab1a      	add	r3, sp, #104	; 0x68
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	4a8a      	ldr	r2, [pc, #552]	; (8006f64 <_strtod_l+0x28c>)
 8006d3a:	f8cd b008 	str.w	fp, [sp, #8]
 8006d3e:	ab1b      	add	r3, sp, #108	; 0x6c
 8006d40:	a919      	add	r1, sp, #100	; 0x64
 8006d42:	f001 fd17 	bl	8008774 <__gethex>
 8006d46:	f010 0607 	ands.w	r6, r0, #7
 8006d4a:	4604      	mov	r4, r0
 8006d4c:	d005      	beq.n	8006d5a <_strtod_l+0x82>
 8006d4e:	2e06      	cmp	r6, #6
 8006d50:	d129      	bne.n	8006da6 <_strtod_l+0xce>
 8006d52:	2300      	movs	r3, #0
 8006d54:	3501      	adds	r5, #1
 8006d56:	9519      	str	r5, [sp, #100]	; 0x64
 8006d58:	930a      	str	r3, [sp, #40]	; 0x28
 8006d5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f040 858a 	bne.w	8007876 <_strtod_l+0xb9e>
 8006d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d64:	b1d3      	cbz	r3, 8006d9c <_strtod_l+0xc4>
 8006d66:	4642      	mov	r2, r8
 8006d68:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	4619      	mov	r1, r3
 8006d70:	b01f      	add	sp, #124	; 0x7c
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	2a20      	cmp	r2, #32
 8006d78:	d1cd      	bne.n	8006d16 <_strtod_l+0x3e>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	9319      	str	r3, [sp, #100]	; 0x64
 8006d7e:	e7bf      	b.n	8006d00 <_strtod_l+0x28>
 8006d80:	2a2d      	cmp	r2, #45	; 0x2d
 8006d82:	d1c8      	bne.n	8006d16 <_strtod_l+0x3e>
 8006d84:	2201      	movs	r2, #1
 8006d86:	920a      	str	r2, [sp, #40]	; 0x28
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	9219      	str	r2, [sp, #100]	; 0x64
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d1c3      	bne.n	8006d1a <_strtod_l+0x42>
 8006d92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d94:	9619      	str	r6, [sp, #100]	; 0x64
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f040 856b 	bne.w	8007872 <_strtod_l+0xb9a>
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	e7e4      	b.n	8006d6c <_strtod_l+0x94>
 8006da2:	2200      	movs	r2, #0
 8006da4:	e7ef      	b.n	8006d86 <_strtod_l+0xae>
 8006da6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006da8:	b13a      	cbz	r2, 8006dba <_strtod_l+0xe2>
 8006daa:	2135      	movs	r1, #53	; 0x35
 8006dac:	a81c      	add	r0, sp, #112	; 0x70
 8006dae:	f002 fc7f 	bl	80096b0 <__copybits>
 8006db2:	4650      	mov	r0, sl
 8006db4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006db6:	f002 f847 	bl	8008e48 <_Bfree>
 8006dba:	3e01      	subs	r6, #1
 8006dbc:	2e04      	cmp	r6, #4
 8006dbe:	d806      	bhi.n	8006dce <_strtod_l+0xf6>
 8006dc0:	e8df f006 	tbb	[pc, r6]
 8006dc4:	1714030a 	.word	0x1714030a
 8006dc8:	0a          	.byte	0x0a
 8006dc9:	00          	.byte	0x00
 8006dca:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8006dce:	0721      	lsls	r1, r4, #28
 8006dd0:	d5c3      	bpl.n	8006d5a <_strtod_l+0x82>
 8006dd2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8006dd6:	e7c0      	b.n	8006d5a <_strtod_l+0x82>
 8006dd8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006dda:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8006dde:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006de2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006de6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006dea:	e7f0      	b.n	8006dce <_strtod_l+0xf6>
 8006dec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006f68 <_strtod_l+0x290>
 8006df0:	e7ed      	b.n	8006dce <_strtod_l+0xf6>
 8006df2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006df6:	f04f 38ff 	mov.w	r8, #4294967295
 8006dfa:	e7e8      	b.n	8006dce <_strtod_l+0xf6>
 8006dfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006dfe:	1c5a      	adds	r2, r3, #1
 8006e00:	9219      	str	r2, [sp, #100]	; 0x64
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b30      	cmp	r3, #48	; 0x30
 8006e06:	d0f9      	beq.n	8006dfc <_strtod_l+0x124>
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d0a6      	beq.n	8006d5a <_strtod_l+0x82>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	9307      	str	r3, [sp, #28]
 8006e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006e12:	220a      	movs	r2, #10
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	2300      	movs	r3, #0
 8006e18:	469b      	mov	fp, r3
 8006e1a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8006e1e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8006e20:	7805      	ldrb	r5, [r0, #0]
 8006e22:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006e26:	b2d9      	uxtb	r1, r3
 8006e28:	2909      	cmp	r1, #9
 8006e2a:	d927      	bls.n	8006e7c <_strtod_l+0x1a4>
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f002 fee4 	bl	8009bfc <strncmp>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d033      	beq.n	8006ea0 <_strtod_l+0x1c8>
 8006e38:	2000      	movs	r0, #0
 8006e3a:	462a      	mov	r2, r5
 8006e3c:	465c      	mov	r4, fp
 8006e3e:	4603      	mov	r3, r0
 8006e40:	9004      	str	r0, [sp, #16]
 8006e42:	2a65      	cmp	r2, #101	; 0x65
 8006e44:	d001      	beq.n	8006e4a <_strtod_l+0x172>
 8006e46:	2a45      	cmp	r2, #69	; 0x45
 8006e48:	d114      	bne.n	8006e74 <_strtod_l+0x19c>
 8006e4a:	b91c      	cbnz	r4, 8006e54 <_strtod_l+0x17c>
 8006e4c:	9a07      	ldr	r2, [sp, #28]
 8006e4e:	4302      	orrs	r2, r0
 8006e50:	d09f      	beq.n	8006d92 <_strtod_l+0xba>
 8006e52:	2400      	movs	r4, #0
 8006e54:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006e56:	1c72      	adds	r2, r6, #1
 8006e58:	9219      	str	r2, [sp, #100]	; 0x64
 8006e5a:	7872      	ldrb	r2, [r6, #1]
 8006e5c:	2a2b      	cmp	r2, #43	; 0x2b
 8006e5e:	d079      	beq.n	8006f54 <_strtod_l+0x27c>
 8006e60:	2a2d      	cmp	r2, #45	; 0x2d
 8006e62:	f000 8083 	beq.w	8006f6c <_strtod_l+0x294>
 8006e66:	2700      	movs	r7, #0
 8006e68:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e6c:	2909      	cmp	r1, #9
 8006e6e:	f240 8083 	bls.w	8006f78 <_strtod_l+0x2a0>
 8006e72:	9619      	str	r6, [sp, #100]	; 0x64
 8006e74:	2500      	movs	r5, #0
 8006e76:	e09f      	b.n	8006fb8 <_strtod_l+0x2e0>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	e7c8      	b.n	8006e0e <_strtod_l+0x136>
 8006e7c:	f1bb 0f08 	cmp.w	fp, #8
 8006e80:	bfd5      	itete	le
 8006e82:	9906      	ldrle	r1, [sp, #24]
 8006e84:	9905      	ldrgt	r1, [sp, #20]
 8006e86:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e8a:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006e8e:	f100 0001 	add.w	r0, r0, #1
 8006e92:	bfd4      	ite	le
 8006e94:	9306      	strle	r3, [sp, #24]
 8006e96:	9305      	strgt	r3, [sp, #20]
 8006e98:	f10b 0b01 	add.w	fp, fp, #1
 8006e9c:	9019      	str	r0, [sp, #100]	; 0x64
 8006e9e:	e7be      	b.n	8006e1e <_strtod_l+0x146>
 8006ea0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ea2:	191a      	adds	r2, r3, r4
 8006ea4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ea6:	5d1a      	ldrb	r2, [r3, r4]
 8006ea8:	f1bb 0f00 	cmp.w	fp, #0
 8006eac:	d036      	beq.n	8006f1c <_strtod_l+0x244>
 8006eae:	465c      	mov	r4, fp
 8006eb0:	9004      	str	r0, [sp, #16]
 8006eb2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006eb6:	2b09      	cmp	r3, #9
 8006eb8:	d912      	bls.n	8006ee0 <_strtod_l+0x208>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e7c1      	b.n	8006e42 <_strtod_l+0x16a>
 8006ebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ec0:	3001      	adds	r0, #1
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	9219      	str	r2, [sp, #100]	; 0x64
 8006ec6:	785a      	ldrb	r2, [r3, #1]
 8006ec8:	2a30      	cmp	r2, #48	; 0x30
 8006eca:	d0f8      	beq.n	8006ebe <_strtod_l+0x1e6>
 8006ecc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	f200 84d5 	bhi.w	8007880 <_strtod_l+0xba8>
 8006ed6:	9004      	str	r0, [sp, #16]
 8006ed8:	2000      	movs	r0, #0
 8006eda:	4604      	mov	r4, r0
 8006edc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ede:	9308      	str	r3, [sp, #32]
 8006ee0:	3a30      	subs	r2, #48	; 0x30
 8006ee2:	f100 0301 	add.w	r3, r0, #1
 8006ee6:	d013      	beq.n	8006f10 <_strtod_l+0x238>
 8006ee8:	9904      	ldr	r1, [sp, #16]
 8006eea:	1905      	adds	r5, r0, r4
 8006eec:	4419      	add	r1, r3
 8006eee:	9104      	str	r1, [sp, #16]
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	210a      	movs	r1, #10
 8006ef4:	42ab      	cmp	r3, r5
 8006ef6:	d113      	bne.n	8006f20 <_strtod_l+0x248>
 8006ef8:	1823      	adds	r3, r4, r0
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	f104 0401 	add.w	r4, r4, #1
 8006f00:	4404      	add	r4, r0
 8006f02:	dc1b      	bgt.n	8006f3c <_strtod_l+0x264>
 8006f04:	230a      	movs	r3, #10
 8006f06:	9906      	ldr	r1, [sp, #24]
 8006f08:	fb03 2301 	mla	r3, r3, r1, r2
 8006f0c:	9306      	str	r3, [sp, #24]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f12:	4618      	mov	r0, r3
 8006f14:	1c51      	adds	r1, r2, #1
 8006f16:	9119      	str	r1, [sp, #100]	; 0x64
 8006f18:	7852      	ldrb	r2, [r2, #1]
 8006f1a:	e7ca      	b.n	8006eb2 <_strtod_l+0x1da>
 8006f1c:	4658      	mov	r0, fp
 8006f1e:	e7d3      	b.n	8006ec8 <_strtod_l+0x1f0>
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	dc04      	bgt.n	8006f2e <_strtod_l+0x256>
 8006f24:	9f06      	ldr	r7, [sp, #24]
 8006f26:	434f      	muls	r7, r1
 8006f28:	9706      	str	r7, [sp, #24]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	e7e2      	b.n	8006ef4 <_strtod_l+0x21c>
 8006f2e:	1c5f      	adds	r7, r3, #1
 8006f30:	2f10      	cmp	r7, #16
 8006f32:	bfde      	ittt	le
 8006f34:	9f05      	ldrle	r7, [sp, #20]
 8006f36:	434f      	mulle	r7, r1
 8006f38:	9705      	strle	r7, [sp, #20]
 8006f3a:	e7f6      	b.n	8006f2a <_strtod_l+0x252>
 8006f3c:	2c10      	cmp	r4, #16
 8006f3e:	bfdf      	itttt	le
 8006f40:	230a      	movle	r3, #10
 8006f42:	9905      	ldrle	r1, [sp, #20]
 8006f44:	fb03 2301 	mlale	r3, r3, r1, r2
 8006f48:	9305      	strle	r3, [sp, #20]
 8006f4a:	e7e0      	b.n	8006f0e <_strtod_l+0x236>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	9304      	str	r3, [sp, #16]
 8006f50:	2301      	movs	r3, #1
 8006f52:	e77b      	b.n	8006e4c <_strtod_l+0x174>
 8006f54:	2700      	movs	r7, #0
 8006f56:	1cb2      	adds	r2, r6, #2
 8006f58:	9219      	str	r2, [sp, #100]	; 0x64
 8006f5a:	78b2      	ldrb	r2, [r6, #2]
 8006f5c:	e784      	b.n	8006e68 <_strtod_l+0x190>
 8006f5e:	bf00      	nop
 8006f60:	0800ab00 	.word	0x0800ab00
 8006f64:	0800a8b8 	.word	0x0800a8b8
 8006f68:	7ff00000 	.word	0x7ff00000
 8006f6c:	2701      	movs	r7, #1
 8006f6e:	e7f2      	b.n	8006f56 <_strtod_l+0x27e>
 8006f70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f72:	1c51      	adds	r1, r2, #1
 8006f74:	9119      	str	r1, [sp, #100]	; 0x64
 8006f76:	7852      	ldrb	r2, [r2, #1]
 8006f78:	2a30      	cmp	r2, #48	; 0x30
 8006f7a:	d0f9      	beq.n	8006f70 <_strtod_l+0x298>
 8006f7c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006f80:	2908      	cmp	r1, #8
 8006f82:	f63f af77 	bhi.w	8006e74 <_strtod_l+0x19c>
 8006f86:	f04f 0e0a 	mov.w	lr, #10
 8006f8a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8006f8e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f90:	9209      	str	r2, [sp, #36]	; 0x24
 8006f92:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f94:	1c51      	adds	r1, r2, #1
 8006f96:	9119      	str	r1, [sp, #100]	; 0x64
 8006f98:	7852      	ldrb	r2, [r2, #1]
 8006f9a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8006f9e:	2d09      	cmp	r5, #9
 8006fa0:	d935      	bls.n	800700e <_strtod_l+0x336>
 8006fa2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006fa4:	1b49      	subs	r1, r1, r5
 8006fa6:	2908      	cmp	r1, #8
 8006fa8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8006fac:	dc02      	bgt.n	8006fb4 <_strtod_l+0x2dc>
 8006fae:	4565      	cmp	r5, ip
 8006fb0:	bfa8      	it	ge
 8006fb2:	4665      	movge	r5, ip
 8006fb4:	b107      	cbz	r7, 8006fb8 <_strtod_l+0x2e0>
 8006fb6:	426d      	negs	r5, r5
 8006fb8:	2c00      	cmp	r4, #0
 8006fba:	d14c      	bne.n	8007056 <_strtod_l+0x37e>
 8006fbc:	9907      	ldr	r1, [sp, #28]
 8006fbe:	4301      	orrs	r1, r0
 8006fc0:	f47f aecb 	bne.w	8006d5a <_strtod_l+0x82>
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	f47f aee4 	bne.w	8006d92 <_strtod_l+0xba>
 8006fca:	2a69      	cmp	r2, #105	; 0x69
 8006fcc:	d026      	beq.n	800701c <_strtod_l+0x344>
 8006fce:	dc23      	bgt.n	8007018 <_strtod_l+0x340>
 8006fd0:	2a49      	cmp	r2, #73	; 0x49
 8006fd2:	d023      	beq.n	800701c <_strtod_l+0x344>
 8006fd4:	2a4e      	cmp	r2, #78	; 0x4e
 8006fd6:	f47f aedc 	bne.w	8006d92 <_strtod_l+0xba>
 8006fda:	499d      	ldr	r1, [pc, #628]	; (8007250 <_strtod_l+0x578>)
 8006fdc:	a819      	add	r0, sp, #100	; 0x64
 8006fde:	f001 fe17 	bl	8008c10 <__match>
 8006fe2:	2800      	cmp	r0, #0
 8006fe4:	f43f aed5 	beq.w	8006d92 <_strtod_l+0xba>
 8006fe8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	2b28      	cmp	r3, #40	; 0x28
 8006fee:	d12c      	bne.n	800704a <_strtod_l+0x372>
 8006ff0:	4998      	ldr	r1, [pc, #608]	; (8007254 <_strtod_l+0x57c>)
 8006ff2:	aa1c      	add	r2, sp, #112	; 0x70
 8006ff4:	a819      	add	r0, sp, #100	; 0x64
 8006ff6:	f001 fe1f 	bl	8008c38 <__hexnan>
 8006ffa:	2805      	cmp	r0, #5
 8006ffc:	d125      	bne.n	800704a <_strtod_l+0x372>
 8006ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007000:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007004:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007008:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800700c:	e6a5      	b.n	8006d5a <_strtod_l+0x82>
 800700e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8007012:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007016:	e7bc      	b.n	8006f92 <_strtod_l+0x2ba>
 8007018:	2a6e      	cmp	r2, #110	; 0x6e
 800701a:	e7dc      	b.n	8006fd6 <_strtod_l+0x2fe>
 800701c:	498e      	ldr	r1, [pc, #568]	; (8007258 <_strtod_l+0x580>)
 800701e:	a819      	add	r0, sp, #100	; 0x64
 8007020:	f001 fdf6 	bl	8008c10 <__match>
 8007024:	2800      	cmp	r0, #0
 8007026:	f43f aeb4 	beq.w	8006d92 <_strtod_l+0xba>
 800702a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800702c:	498b      	ldr	r1, [pc, #556]	; (800725c <_strtod_l+0x584>)
 800702e:	3b01      	subs	r3, #1
 8007030:	a819      	add	r0, sp, #100	; 0x64
 8007032:	9319      	str	r3, [sp, #100]	; 0x64
 8007034:	f001 fdec 	bl	8008c10 <__match>
 8007038:	b910      	cbnz	r0, 8007040 <_strtod_l+0x368>
 800703a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800703c:	3301      	adds	r3, #1
 800703e:	9319      	str	r3, [sp, #100]	; 0x64
 8007040:	f04f 0800 	mov.w	r8, #0
 8007044:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007260 <_strtod_l+0x588>
 8007048:	e687      	b.n	8006d5a <_strtod_l+0x82>
 800704a:	4886      	ldr	r0, [pc, #536]	; (8007264 <_strtod_l+0x58c>)
 800704c:	f002 fdc0 	bl	8009bd0 <nan>
 8007050:	4680      	mov	r8, r0
 8007052:	4689      	mov	r9, r1
 8007054:	e681      	b.n	8006d5a <_strtod_l+0x82>
 8007056:	9b04      	ldr	r3, [sp, #16]
 8007058:	f1bb 0f00 	cmp.w	fp, #0
 800705c:	bf08      	it	eq
 800705e:	46a3      	moveq	fp, r4
 8007060:	1aeb      	subs	r3, r5, r3
 8007062:	2c10      	cmp	r4, #16
 8007064:	9806      	ldr	r0, [sp, #24]
 8007066:	4626      	mov	r6, r4
 8007068:	9307      	str	r3, [sp, #28]
 800706a:	bfa8      	it	ge
 800706c:	2610      	movge	r6, #16
 800706e:	f7f9 f9b9 	bl	80003e4 <__aeabi_ui2d>
 8007072:	2c09      	cmp	r4, #9
 8007074:	4680      	mov	r8, r0
 8007076:	4689      	mov	r9, r1
 8007078:	dd13      	ble.n	80070a2 <_strtod_l+0x3ca>
 800707a:	4b7b      	ldr	r3, [pc, #492]	; (8007268 <_strtod_l+0x590>)
 800707c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007080:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007084:	f7f9 fa28 	bl	80004d8 <__aeabi_dmul>
 8007088:	4680      	mov	r8, r0
 800708a:	9805      	ldr	r0, [sp, #20]
 800708c:	4689      	mov	r9, r1
 800708e:	f7f9 f9a9 	bl	80003e4 <__aeabi_ui2d>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4640      	mov	r0, r8
 8007098:	4649      	mov	r1, r9
 800709a:	f7f9 f867 	bl	800016c <__adddf3>
 800709e:	4680      	mov	r8, r0
 80070a0:	4689      	mov	r9, r1
 80070a2:	2c0f      	cmp	r4, #15
 80070a4:	dc36      	bgt.n	8007114 <_strtod_l+0x43c>
 80070a6:	9b07      	ldr	r3, [sp, #28]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f43f ae56 	beq.w	8006d5a <_strtod_l+0x82>
 80070ae:	dd22      	ble.n	80070f6 <_strtod_l+0x41e>
 80070b0:	2b16      	cmp	r3, #22
 80070b2:	dc09      	bgt.n	80070c8 <_strtod_l+0x3f0>
 80070b4:	496c      	ldr	r1, [pc, #432]	; (8007268 <_strtod_l+0x590>)
 80070b6:	4642      	mov	r2, r8
 80070b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070bc:	464b      	mov	r3, r9
 80070be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c2:	f7f9 fa09 	bl	80004d8 <__aeabi_dmul>
 80070c6:	e7c3      	b.n	8007050 <_strtod_l+0x378>
 80070c8:	9a07      	ldr	r2, [sp, #28]
 80070ca:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070ce:	4293      	cmp	r3, r2
 80070d0:	db20      	blt.n	8007114 <_strtod_l+0x43c>
 80070d2:	4d65      	ldr	r5, [pc, #404]	; (8007268 <_strtod_l+0x590>)
 80070d4:	f1c4 040f 	rsb	r4, r4, #15
 80070d8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80070dc:	4642      	mov	r2, r8
 80070de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070e2:	464b      	mov	r3, r9
 80070e4:	f7f9 f9f8 	bl	80004d8 <__aeabi_dmul>
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	1b1c      	subs	r4, r3, r4
 80070ec:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070f4:	e7e5      	b.n	80070c2 <_strtod_l+0x3ea>
 80070f6:	9b07      	ldr	r3, [sp, #28]
 80070f8:	3316      	adds	r3, #22
 80070fa:	db0b      	blt.n	8007114 <_strtod_l+0x43c>
 80070fc:	9b04      	ldr	r3, [sp, #16]
 80070fe:	4640      	mov	r0, r8
 8007100:	1b5d      	subs	r5, r3, r5
 8007102:	4b59      	ldr	r3, [pc, #356]	; (8007268 <_strtod_l+0x590>)
 8007104:	4649      	mov	r1, r9
 8007106:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800710a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800710e:	f7f9 fb0d 	bl	800072c <__aeabi_ddiv>
 8007112:	e79d      	b.n	8007050 <_strtod_l+0x378>
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	1ba6      	subs	r6, r4, r6
 8007118:	441e      	add	r6, r3
 800711a:	2e00      	cmp	r6, #0
 800711c:	dd74      	ble.n	8007208 <_strtod_l+0x530>
 800711e:	f016 030f 	ands.w	r3, r6, #15
 8007122:	d00a      	beq.n	800713a <_strtod_l+0x462>
 8007124:	4950      	ldr	r1, [pc, #320]	; (8007268 <_strtod_l+0x590>)
 8007126:	4642      	mov	r2, r8
 8007128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800712c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007130:	464b      	mov	r3, r9
 8007132:	f7f9 f9d1 	bl	80004d8 <__aeabi_dmul>
 8007136:	4680      	mov	r8, r0
 8007138:	4689      	mov	r9, r1
 800713a:	f036 060f 	bics.w	r6, r6, #15
 800713e:	d052      	beq.n	80071e6 <_strtod_l+0x50e>
 8007140:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007144:	dd27      	ble.n	8007196 <_strtod_l+0x4be>
 8007146:	f04f 0b00 	mov.w	fp, #0
 800714a:	f8cd b010 	str.w	fp, [sp, #16]
 800714e:	f8cd b020 	str.w	fp, [sp, #32]
 8007152:	f8cd b018 	str.w	fp, [sp, #24]
 8007156:	2322      	movs	r3, #34	; 0x22
 8007158:	f04f 0800 	mov.w	r8, #0
 800715c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007260 <_strtod_l+0x588>
 8007160:	f8ca 3000 	str.w	r3, [sl]
 8007164:	9b08      	ldr	r3, [sp, #32]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f43f adf7 	beq.w	8006d5a <_strtod_l+0x82>
 800716c:	4650      	mov	r0, sl
 800716e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007170:	f001 fe6a 	bl	8008e48 <_Bfree>
 8007174:	4650      	mov	r0, sl
 8007176:	9906      	ldr	r1, [sp, #24]
 8007178:	f001 fe66 	bl	8008e48 <_Bfree>
 800717c:	4650      	mov	r0, sl
 800717e:	9904      	ldr	r1, [sp, #16]
 8007180:	f001 fe62 	bl	8008e48 <_Bfree>
 8007184:	4650      	mov	r0, sl
 8007186:	9908      	ldr	r1, [sp, #32]
 8007188:	f001 fe5e 	bl	8008e48 <_Bfree>
 800718c:	4659      	mov	r1, fp
 800718e:	4650      	mov	r0, sl
 8007190:	f001 fe5a 	bl	8008e48 <_Bfree>
 8007194:	e5e1      	b.n	8006d5a <_strtod_l+0x82>
 8007196:	4b35      	ldr	r3, [pc, #212]	; (800726c <_strtod_l+0x594>)
 8007198:	4640      	mov	r0, r8
 800719a:	9305      	str	r3, [sp, #20]
 800719c:	2300      	movs	r3, #0
 800719e:	4649      	mov	r1, r9
 80071a0:	461f      	mov	r7, r3
 80071a2:	1136      	asrs	r6, r6, #4
 80071a4:	2e01      	cmp	r6, #1
 80071a6:	dc21      	bgt.n	80071ec <_strtod_l+0x514>
 80071a8:	b10b      	cbz	r3, 80071ae <_strtod_l+0x4d6>
 80071aa:	4680      	mov	r8, r0
 80071ac:	4689      	mov	r9, r1
 80071ae:	4b2f      	ldr	r3, [pc, #188]	; (800726c <_strtod_l+0x594>)
 80071b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80071b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80071b8:	4642      	mov	r2, r8
 80071ba:	e9d7 0100 	ldrd	r0, r1, [r7]
 80071be:	464b      	mov	r3, r9
 80071c0:	f7f9 f98a 	bl	80004d8 <__aeabi_dmul>
 80071c4:	4b26      	ldr	r3, [pc, #152]	; (8007260 <_strtod_l+0x588>)
 80071c6:	460a      	mov	r2, r1
 80071c8:	400b      	ands	r3, r1
 80071ca:	4929      	ldr	r1, [pc, #164]	; (8007270 <_strtod_l+0x598>)
 80071cc:	4680      	mov	r8, r0
 80071ce:	428b      	cmp	r3, r1
 80071d0:	d8b9      	bhi.n	8007146 <_strtod_l+0x46e>
 80071d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80071d6:	428b      	cmp	r3, r1
 80071d8:	bf86      	itte	hi
 80071da:	f04f 38ff 	movhi.w	r8, #4294967295
 80071de:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007274 <_strtod_l+0x59c>
 80071e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80071e6:	2300      	movs	r3, #0
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	e07f      	b.n	80072ec <_strtod_l+0x614>
 80071ec:	07f2      	lsls	r2, r6, #31
 80071ee:	d505      	bpl.n	80071fc <_strtod_l+0x524>
 80071f0:	9b05      	ldr	r3, [sp, #20]
 80071f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f6:	f7f9 f96f 	bl	80004d8 <__aeabi_dmul>
 80071fa:	2301      	movs	r3, #1
 80071fc:	9a05      	ldr	r2, [sp, #20]
 80071fe:	3701      	adds	r7, #1
 8007200:	3208      	adds	r2, #8
 8007202:	1076      	asrs	r6, r6, #1
 8007204:	9205      	str	r2, [sp, #20]
 8007206:	e7cd      	b.n	80071a4 <_strtod_l+0x4cc>
 8007208:	d0ed      	beq.n	80071e6 <_strtod_l+0x50e>
 800720a:	4276      	negs	r6, r6
 800720c:	f016 020f 	ands.w	r2, r6, #15
 8007210:	d00a      	beq.n	8007228 <_strtod_l+0x550>
 8007212:	4b15      	ldr	r3, [pc, #84]	; (8007268 <_strtod_l+0x590>)
 8007214:	4640      	mov	r0, r8
 8007216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721a:	4649      	mov	r1, r9
 800721c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007220:	f7f9 fa84 	bl	800072c <__aeabi_ddiv>
 8007224:	4680      	mov	r8, r0
 8007226:	4689      	mov	r9, r1
 8007228:	1136      	asrs	r6, r6, #4
 800722a:	d0dc      	beq.n	80071e6 <_strtod_l+0x50e>
 800722c:	2e1f      	cmp	r6, #31
 800722e:	dd23      	ble.n	8007278 <_strtod_l+0x5a0>
 8007230:	f04f 0b00 	mov.w	fp, #0
 8007234:	f8cd b010 	str.w	fp, [sp, #16]
 8007238:	f8cd b020 	str.w	fp, [sp, #32]
 800723c:	f8cd b018 	str.w	fp, [sp, #24]
 8007240:	2322      	movs	r3, #34	; 0x22
 8007242:	f04f 0800 	mov.w	r8, #0
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	f8ca 3000 	str.w	r3, [sl]
 800724e:	e789      	b.n	8007164 <_strtod_l+0x48c>
 8007250:	0800a889 	.word	0x0800a889
 8007254:	0800a8cc 	.word	0x0800a8cc
 8007258:	0800a881 	.word	0x0800a881
 800725c:	0800aa0c 	.word	0x0800aa0c
 8007260:	7ff00000 	.word	0x7ff00000
 8007264:	0800acb8 	.word	0x0800acb8
 8007268:	0800ab98 	.word	0x0800ab98
 800726c:	0800ab70 	.word	0x0800ab70
 8007270:	7ca00000 	.word	0x7ca00000
 8007274:	7fefffff 	.word	0x7fefffff
 8007278:	f016 0310 	ands.w	r3, r6, #16
 800727c:	bf18      	it	ne
 800727e:	236a      	movne	r3, #106	; 0x6a
 8007280:	4640      	mov	r0, r8
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	4649      	mov	r1, r9
 8007286:	2300      	movs	r3, #0
 8007288:	4fb0      	ldr	r7, [pc, #704]	; (800754c <_strtod_l+0x874>)
 800728a:	07f2      	lsls	r2, r6, #31
 800728c:	d504      	bpl.n	8007298 <_strtod_l+0x5c0>
 800728e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007292:	f7f9 f921 	bl	80004d8 <__aeabi_dmul>
 8007296:	2301      	movs	r3, #1
 8007298:	1076      	asrs	r6, r6, #1
 800729a:	f107 0708 	add.w	r7, r7, #8
 800729e:	d1f4      	bne.n	800728a <_strtod_l+0x5b2>
 80072a0:	b10b      	cbz	r3, 80072a6 <_strtod_l+0x5ce>
 80072a2:	4680      	mov	r8, r0
 80072a4:	4689      	mov	r9, r1
 80072a6:	9b05      	ldr	r3, [sp, #20]
 80072a8:	b1c3      	cbz	r3, 80072dc <_strtod_l+0x604>
 80072aa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80072ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	4649      	mov	r1, r9
 80072b6:	dd11      	ble.n	80072dc <_strtod_l+0x604>
 80072b8:	2b1f      	cmp	r3, #31
 80072ba:	f340 8127 	ble.w	800750c <_strtod_l+0x834>
 80072be:	2b34      	cmp	r3, #52	; 0x34
 80072c0:	bfd8      	it	le
 80072c2:	f04f 33ff 	movle.w	r3, #4294967295
 80072c6:	f04f 0800 	mov.w	r8, #0
 80072ca:	bfcf      	iteee	gt
 80072cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80072d0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80072d4:	fa03 f202 	lslle.w	r2, r3, r2
 80072d8:	ea02 0901 	andle.w	r9, r2, r1
 80072dc:	2200      	movs	r2, #0
 80072de:	2300      	movs	r3, #0
 80072e0:	4640      	mov	r0, r8
 80072e2:	4649      	mov	r1, r9
 80072e4:	f7f9 fb60 	bl	80009a8 <__aeabi_dcmpeq>
 80072e8:	2800      	cmp	r0, #0
 80072ea:	d1a1      	bne.n	8007230 <_strtod_l+0x558>
 80072ec:	9b06      	ldr	r3, [sp, #24]
 80072ee:	465a      	mov	r2, fp
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	4650      	mov	r0, sl
 80072f4:	4623      	mov	r3, r4
 80072f6:	9908      	ldr	r1, [sp, #32]
 80072f8:	f001 fe0e 	bl	8008f18 <__s2b>
 80072fc:	9008      	str	r0, [sp, #32]
 80072fe:	2800      	cmp	r0, #0
 8007300:	f43f af21 	beq.w	8007146 <_strtod_l+0x46e>
 8007304:	9b04      	ldr	r3, [sp, #16]
 8007306:	f04f 0b00 	mov.w	fp, #0
 800730a:	1b5d      	subs	r5, r3, r5
 800730c:	9b07      	ldr	r3, [sp, #28]
 800730e:	f8cd b010 	str.w	fp, [sp, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfb4      	ite	lt
 8007316:	462b      	movlt	r3, r5
 8007318:	2300      	movge	r3, #0
 800731a:	930e      	str	r3, [sp, #56]	; 0x38
 800731c:	9b07      	ldr	r3, [sp, #28]
 800731e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007322:	9314      	str	r3, [sp, #80]	; 0x50
 8007324:	9b08      	ldr	r3, [sp, #32]
 8007326:	4650      	mov	r0, sl
 8007328:	6859      	ldr	r1, [r3, #4]
 800732a:	f001 fd4d 	bl	8008dc8 <_Balloc>
 800732e:	9006      	str	r0, [sp, #24]
 8007330:	2800      	cmp	r0, #0
 8007332:	f43f af10 	beq.w	8007156 <_strtod_l+0x47e>
 8007336:	9b08      	ldr	r3, [sp, #32]
 8007338:	300c      	adds	r0, #12
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	f103 010c 	add.w	r1, r3, #12
 8007340:	3202      	adds	r2, #2
 8007342:	0092      	lsls	r2, r2, #2
 8007344:	f7fe fdfc 	bl	8005f40 <memcpy>
 8007348:	ab1c      	add	r3, sp, #112	; 0x70
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	ab1b      	add	r3, sp, #108	; 0x6c
 800734e:	9300      	str	r3, [sp, #0]
 8007350:	4642      	mov	r2, r8
 8007352:	464b      	mov	r3, r9
 8007354:	4650      	mov	r0, sl
 8007356:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800735a:	f002 f91f 	bl	800959c <__d2b>
 800735e:	901a      	str	r0, [sp, #104]	; 0x68
 8007360:	2800      	cmp	r0, #0
 8007362:	f43f aef8 	beq.w	8007156 <_strtod_l+0x47e>
 8007366:	2101      	movs	r1, #1
 8007368:	4650      	mov	r0, sl
 800736a:	f001 fe6d 	bl	8009048 <__i2b>
 800736e:	4603      	mov	r3, r0
 8007370:	9004      	str	r0, [sp, #16]
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f aeef 	beq.w	8007156 <_strtod_l+0x47e>
 8007378:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800737a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800737c:	2d00      	cmp	r5, #0
 800737e:	bfab      	itete	ge
 8007380:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007382:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007384:	18ee      	addge	r6, r5, r3
 8007386:	1b5c      	sublt	r4, r3, r5
 8007388:	9b05      	ldr	r3, [sp, #20]
 800738a:	bfa8      	it	ge
 800738c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800738e:	eba5 0503 	sub.w	r5, r5, r3
 8007392:	4415      	add	r5, r2
 8007394:	4b6e      	ldr	r3, [pc, #440]	; (8007550 <_strtod_l+0x878>)
 8007396:	f105 35ff 	add.w	r5, r5, #4294967295
 800739a:	bfb8      	it	lt
 800739c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800739e:	429d      	cmp	r5, r3
 80073a0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80073a4:	f280 80c4 	bge.w	8007530 <_strtod_l+0x858>
 80073a8:	1b5b      	subs	r3, r3, r5
 80073aa:	2b1f      	cmp	r3, #31
 80073ac:	f04f 0701 	mov.w	r7, #1
 80073b0:	eba2 0203 	sub.w	r2, r2, r3
 80073b4:	f300 80b1 	bgt.w	800751a <_strtod_l+0x842>
 80073b8:	2500      	movs	r5, #0
 80073ba:	fa07 f303 	lsl.w	r3, r7, r3
 80073be:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c0:	18b7      	adds	r7, r6, r2
 80073c2:	9b05      	ldr	r3, [sp, #20]
 80073c4:	42be      	cmp	r6, r7
 80073c6:	4414      	add	r4, r2
 80073c8:	441c      	add	r4, r3
 80073ca:	4633      	mov	r3, r6
 80073cc:	bfa8      	it	ge
 80073ce:	463b      	movge	r3, r7
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	bfa8      	it	ge
 80073d4:	4623      	movge	r3, r4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	bfc2      	ittt	gt
 80073da:	1aff      	subgt	r7, r7, r3
 80073dc:	1ae4      	subgt	r4, r4, r3
 80073de:	1af6      	subgt	r6, r6, r3
 80073e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	dd17      	ble.n	8007416 <_strtod_l+0x73e>
 80073e6:	461a      	mov	r2, r3
 80073e8:	4650      	mov	r0, sl
 80073ea:	9904      	ldr	r1, [sp, #16]
 80073ec:	f001 feea 	bl	80091c4 <__pow5mult>
 80073f0:	9004      	str	r0, [sp, #16]
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f aeaf 	beq.w	8007156 <_strtod_l+0x47e>
 80073f8:	4601      	mov	r1, r0
 80073fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80073fc:	4650      	mov	r0, sl
 80073fe:	f001 fe39 	bl	8009074 <__multiply>
 8007402:	9009      	str	r0, [sp, #36]	; 0x24
 8007404:	2800      	cmp	r0, #0
 8007406:	f43f aea6 	beq.w	8007156 <_strtod_l+0x47e>
 800740a:	4650      	mov	r0, sl
 800740c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800740e:	f001 fd1b 	bl	8008e48 <_Bfree>
 8007412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007414:	931a      	str	r3, [sp, #104]	; 0x68
 8007416:	2f00      	cmp	r7, #0
 8007418:	f300 808e 	bgt.w	8007538 <_strtod_l+0x860>
 800741c:	9b07      	ldr	r3, [sp, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	dd08      	ble.n	8007434 <_strtod_l+0x75c>
 8007422:	4650      	mov	r0, sl
 8007424:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007426:	9906      	ldr	r1, [sp, #24]
 8007428:	f001 fecc 	bl	80091c4 <__pow5mult>
 800742c:	9006      	str	r0, [sp, #24]
 800742e:	2800      	cmp	r0, #0
 8007430:	f43f ae91 	beq.w	8007156 <_strtod_l+0x47e>
 8007434:	2c00      	cmp	r4, #0
 8007436:	dd08      	ble.n	800744a <_strtod_l+0x772>
 8007438:	4622      	mov	r2, r4
 800743a:	4650      	mov	r0, sl
 800743c:	9906      	ldr	r1, [sp, #24]
 800743e:	f001 ff1b 	bl	8009278 <__lshift>
 8007442:	9006      	str	r0, [sp, #24]
 8007444:	2800      	cmp	r0, #0
 8007446:	f43f ae86 	beq.w	8007156 <_strtod_l+0x47e>
 800744a:	2e00      	cmp	r6, #0
 800744c:	dd08      	ble.n	8007460 <_strtod_l+0x788>
 800744e:	4632      	mov	r2, r6
 8007450:	4650      	mov	r0, sl
 8007452:	9904      	ldr	r1, [sp, #16]
 8007454:	f001 ff10 	bl	8009278 <__lshift>
 8007458:	9004      	str	r0, [sp, #16]
 800745a:	2800      	cmp	r0, #0
 800745c:	f43f ae7b 	beq.w	8007156 <_strtod_l+0x47e>
 8007460:	4650      	mov	r0, sl
 8007462:	9a06      	ldr	r2, [sp, #24]
 8007464:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007466:	f001 ff93 	bl	8009390 <__mdiff>
 800746a:	4683      	mov	fp, r0
 800746c:	2800      	cmp	r0, #0
 800746e:	f43f ae72 	beq.w	8007156 <_strtod_l+0x47e>
 8007472:	2400      	movs	r4, #0
 8007474:	68c3      	ldr	r3, [r0, #12]
 8007476:	9904      	ldr	r1, [sp, #16]
 8007478:	60c4      	str	r4, [r0, #12]
 800747a:	930b      	str	r3, [sp, #44]	; 0x2c
 800747c:	f001 ff6c 	bl	8009358 <__mcmp>
 8007480:	42a0      	cmp	r0, r4
 8007482:	da6b      	bge.n	800755c <_strtod_l+0x884>
 8007484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007486:	ea53 0308 	orrs.w	r3, r3, r8
 800748a:	f040 8091 	bne.w	80075b0 <_strtod_l+0x8d8>
 800748e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007492:	2b00      	cmp	r3, #0
 8007494:	f040 808c 	bne.w	80075b0 <_strtod_l+0x8d8>
 8007498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800749c:	0d1b      	lsrs	r3, r3, #20
 800749e:	051b      	lsls	r3, r3, #20
 80074a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80074a4:	f240 8084 	bls.w	80075b0 <_strtod_l+0x8d8>
 80074a8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80074ac:	b91b      	cbnz	r3, 80074b6 <_strtod_l+0x7de>
 80074ae:	f8db 3010 	ldr.w	r3, [fp, #16]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	dd7c      	ble.n	80075b0 <_strtod_l+0x8d8>
 80074b6:	4659      	mov	r1, fp
 80074b8:	2201      	movs	r2, #1
 80074ba:	4650      	mov	r0, sl
 80074bc:	f001 fedc 	bl	8009278 <__lshift>
 80074c0:	9904      	ldr	r1, [sp, #16]
 80074c2:	4683      	mov	fp, r0
 80074c4:	f001 ff48 	bl	8009358 <__mcmp>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	dd71      	ble.n	80075b0 <_strtod_l+0x8d8>
 80074cc:	9905      	ldr	r1, [sp, #20]
 80074ce:	464b      	mov	r3, r9
 80074d0:	4a20      	ldr	r2, [pc, #128]	; (8007554 <_strtod_l+0x87c>)
 80074d2:	2900      	cmp	r1, #0
 80074d4:	f000 808c 	beq.w	80075f0 <_strtod_l+0x918>
 80074d8:	ea02 0109 	and.w	r1, r2, r9
 80074dc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074e0:	f300 8086 	bgt.w	80075f0 <_strtod_l+0x918>
 80074e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074e8:	f77f aeaa 	ble.w	8007240 <_strtod_l+0x568>
 80074ec:	4640      	mov	r0, r8
 80074ee:	4649      	mov	r1, r9
 80074f0:	4b19      	ldr	r3, [pc, #100]	; (8007558 <_strtod_l+0x880>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	f7f8 fff0 	bl	80004d8 <__aeabi_dmul>
 80074f8:	460b      	mov	r3, r1
 80074fa:	4303      	orrs	r3, r0
 80074fc:	bf08      	it	eq
 80074fe:	2322      	moveq	r3, #34	; 0x22
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	bf08      	it	eq
 8007506:	f8ca 3000 	streq.w	r3, [sl]
 800750a:	e62f      	b.n	800716c <_strtod_l+0x494>
 800750c:	f04f 32ff 	mov.w	r2, #4294967295
 8007510:	fa02 f303 	lsl.w	r3, r2, r3
 8007514:	ea03 0808 	and.w	r8, r3, r8
 8007518:	e6e0      	b.n	80072dc <_strtod_l+0x604>
 800751a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800751e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007522:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007526:	35e2      	adds	r5, #226	; 0xe2
 8007528:	fa07 f505 	lsl.w	r5, r7, r5
 800752c:	970f      	str	r7, [sp, #60]	; 0x3c
 800752e:	e747      	b.n	80073c0 <_strtod_l+0x6e8>
 8007530:	2301      	movs	r3, #1
 8007532:	2500      	movs	r5, #0
 8007534:	930f      	str	r3, [sp, #60]	; 0x3c
 8007536:	e743      	b.n	80073c0 <_strtod_l+0x6e8>
 8007538:	463a      	mov	r2, r7
 800753a:	4650      	mov	r0, sl
 800753c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800753e:	f001 fe9b 	bl	8009278 <__lshift>
 8007542:	901a      	str	r0, [sp, #104]	; 0x68
 8007544:	2800      	cmp	r0, #0
 8007546:	f47f af69 	bne.w	800741c <_strtod_l+0x744>
 800754a:	e604      	b.n	8007156 <_strtod_l+0x47e>
 800754c:	0800a8e0 	.word	0x0800a8e0
 8007550:	fffffc02 	.word	0xfffffc02
 8007554:	7ff00000 	.word	0x7ff00000
 8007558:	39500000 	.word	0x39500000
 800755c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007560:	d165      	bne.n	800762e <_strtod_l+0x956>
 8007562:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007568:	b35a      	cbz	r2, 80075c2 <_strtod_l+0x8ea>
 800756a:	4a99      	ldr	r2, [pc, #612]	; (80077d0 <_strtod_l+0xaf8>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d12b      	bne.n	80075c8 <_strtod_l+0x8f0>
 8007570:	9b05      	ldr	r3, [sp, #20]
 8007572:	4641      	mov	r1, r8
 8007574:	b303      	cbz	r3, 80075b8 <_strtod_l+0x8e0>
 8007576:	464a      	mov	r2, r9
 8007578:	4b96      	ldr	r3, [pc, #600]	; (80077d4 <_strtod_l+0xafc>)
 800757a:	4013      	ands	r3, r2
 800757c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007580:	f04f 32ff 	mov.w	r2, #4294967295
 8007584:	d81b      	bhi.n	80075be <_strtod_l+0x8e6>
 8007586:	0d1b      	lsrs	r3, r3, #20
 8007588:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800758c:	fa02 f303 	lsl.w	r3, r2, r3
 8007590:	4299      	cmp	r1, r3
 8007592:	d119      	bne.n	80075c8 <_strtod_l+0x8f0>
 8007594:	4b90      	ldr	r3, [pc, #576]	; (80077d8 <_strtod_l+0xb00>)
 8007596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007598:	429a      	cmp	r2, r3
 800759a:	d102      	bne.n	80075a2 <_strtod_l+0x8ca>
 800759c:	3101      	adds	r1, #1
 800759e:	f43f adda 	beq.w	8007156 <_strtod_l+0x47e>
 80075a2:	f04f 0800 	mov.w	r8, #0
 80075a6:	4b8b      	ldr	r3, [pc, #556]	; (80077d4 <_strtod_l+0xafc>)
 80075a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075aa:	401a      	ands	r2, r3
 80075ac:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80075b0:	9b05      	ldr	r3, [sp, #20]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d19a      	bne.n	80074ec <_strtod_l+0x814>
 80075b6:	e5d9      	b.n	800716c <_strtod_l+0x494>
 80075b8:	f04f 33ff 	mov.w	r3, #4294967295
 80075bc:	e7e8      	b.n	8007590 <_strtod_l+0x8b8>
 80075be:	4613      	mov	r3, r2
 80075c0:	e7e6      	b.n	8007590 <_strtod_l+0x8b8>
 80075c2:	ea53 0308 	orrs.w	r3, r3, r8
 80075c6:	d081      	beq.n	80074cc <_strtod_l+0x7f4>
 80075c8:	b1e5      	cbz	r5, 8007604 <_strtod_l+0x92c>
 80075ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075cc:	421d      	tst	r5, r3
 80075ce:	d0ef      	beq.n	80075b0 <_strtod_l+0x8d8>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d2:	4640      	mov	r0, r8
 80075d4:	4649      	mov	r1, r9
 80075d6:	9a05      	ldr	r2, [sp, #20]
 80075d8:	b1c3      	cbz	r3, 800760c <_strtod_l+0x934>
 80075da:	f7ff fb59 	bl	8006c90 <sulp>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075e6:	f7f8 fdc1 	bl	800016c <__adddf3>
 80075ea:	4680      	mov	r8, r0
 80075ec:	4689      	mov	r9, r1
 80075ee:	e7df      	b.n	80075b0 <_strtod_l+0x8d8>
 80075f0:	4013      	ands	r3, r2
 80075f2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80075f6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80075fa:	f04f 38ff 	mov.w	r8, #4294967295
 80075fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007602:	e7d5      	b.n	80075b0 <_strtod_l+0x8d8>
 8007604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007606:	ea13 0f08 	tst.w	r3, r8
 800760a:	e7e0      	b.n	80075ce <_strtod_l+0x8f6>
 800760c:	f7ff fb40 	bl	8006c90 <sulp>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007618:	f7f8 fda6 	bl	8000168 <__aeabi_dsub>
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	4680      	mov	r8, r0
 8007622:	4689      	mov	r9, r1
 8007624:	f7f9 f9c0 	bl	80009a8 <__aeabi_dcmpeq>
 8007628:	2800      	cmp	r0, #0
 800762a:	d0c1      	beq.n	80075b0 <_strtod_l+0x8d8>
 800762c:	e608      	b.n	8007240 <_strtod_l+0x568>
 800762e:	4658      	mov	r0, fp
 8007630:	9904      	ldr	r1, [sp, #16]
 8007632:	f002 f80f 	bl	8009654 <__ratio>
 8007636:	2200      	movs	r2, #0
 8007638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800763c:	4606      	mov	r6, r0
 800763e:	460f      	mov	r7, r1
 8007640:	f7f9 f9c6 	bl	80009d0 <__aeabi_dcmple>
 8007644:	2800      	cmp	r0, #0
 8007646:	d070      	beq.n	800772a <_strtod_l+0xa52>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	2b00      	cmp	r3, #0
 800764c:	d042      	beq.n	80076d4 <_strtod_l+0x9fc>
 800764e:	2600      	movs	r6, #0
 8007650:	4f62      	ldr	r7, [pc, #392]	; (80077dc <_strtod_l+0xb04>)
 8007652:	4d62      	ldr	r5, [pc, #392]	; (80077dc <_strtod_l+0xb04>)
 8007654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800765a:	0d1b      	lsrs	r3, r3, #20
 800765c:	051b      	lsls	r3, r3, #20
 800765e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007662:	4b5f      	ldr	r3, [pc, #380]	; (80077e0 <_strtod_l+0xb08>)
 8007664:	429a      	cmp	r2, r3
 8007666:	f040 80c3 	bne.w	80077f0 <_strtod_l+0xb18>
 800766a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800766c:	4640      	mov	r0, r8
 800766e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007672:	4649      	mov	r1, r9
 8007674:	f001 ff18 	bl	80094a8 <__ulp>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4630      	mov	r0, r6
 800767e:	4639      	mov	r1, r7
 8007680:	f7f8 ff2a 	bl	80004d8 <__aeabi_dmul>
 8007684:	4642      	mov	r2, r8
 8007686:	464b      	mov	r3, r9
 8007688:	f7f8 fd70 	bl	800016c <__adddf3>
 800768c:	460b      	mov	r3, r1
 800768e:	4951      	ldr	r1, [pc, #324]	; (80077d4 <_strtod_l+0xafc>)
 8007690:	4a54      	ldr	r2, [pc, #336]	; (80077e4 <_strtod_l+0xb0c>)
 8007692:	4019      	ands	r1, r3
 8007694:	4291      	cmp	r1, r2
 8007696:	4680      	mov	r8, r0
 8007698:	d95d      	bls.n	8007756 <_strtod_l+0xa7e>
 800769a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800769c:	4b4e      	ldr	r3, [pc, #312]	; (80077d8 <_strtod_l+0xb00>)
 800769e:	429a      	cmp	r2, r3
 80076a0:	d103      	bne.n	80076aa <_strtod_l+0x9d2>
 80076a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076a4:	3301      	adds	r3, #1
 80076a6:	f43f ad56 	beq.w	8007156 <_strtod_l+0x47e>
 80076aa:	f04f 38ff 	mov.w	r8, #4294967295
 80076ae:	f8df 9128 	ldr.w	r9, [pc, #296]	; 80077d8 <_strtod_l+0xb00>
 80076b2:	4650      	mov	r0, sl
 80076b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076b6:	f001 fbc7 	bl	8008e48 <_Bfree>
 80076ba:	4650      	mov	r0, sl
 80076bc:	9906      	ldr	r1, [sp, #24]
 80076be:	f001 fbc3 	bl	8008e48 <_Bfree>
 80076c2:	4650      	mov	r0, sl
 80076c4:	9904      	ldr	r1, [sp, #16]
 80076c6:	f001 fbbf 	bl	8008e48 <_Bfree>
 80076ca:	4659      	mov	r1, fp
 80076cc:	4650      	mov	r0, sl
 80076ce:	f001 fbbb 	bl	8008e48 <_Bfree>
 80076d2:	e627      	b.n	8007324 <_strtod_l+0x64c>
 80076d4:	f1b8 0f00 	cmp.w	r8, #0
 80076d8:	d119      	bne.n	800770e <_strtod_l+0xa36>
 80076da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e0:	b9e3      	cbnz	r3, 800771c <_strtod_l+0xa44>
 80076e2:	2200      	movs	r2, #0
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	4b3c      	ldr	r3, [pc, #240]	; (80077dc <_strtod_l+0xb04>)
 80076ea:	f7f9 f967 	bl	80009bc <__aeabi_dcmplt>
 80076ee:	b9c8      	cbnz	r0, 8007724 <_strtod_l+0xa4c>
 80076f0:	2200      	movs	r2, #0
 80076f2:	4630      	mov	r0, r6
 80076f4:	4639      	mov	r1, r7
 80076f6:	4b3c      	ldr	r3, [pc, #240]	; (80077e8 <_strtod_l+0xb10>)
 80076f8:	f7f8 feee 	bl	80004d8 <__aeabi_dmul>
 80076fc:	4604      	mov	r4, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007704:	9416      	str	r4, [sp, #88]	; 0x58
 8007706:	9317      	str	r3, [sp, #92]	; 0x5c
 8007708:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800770c:	e7a2      	b.n	8007654 <_strtod_l+0x97c>
 800770e:	f1b8 0f01 	cmp.w	r8, #1
 8007712:	d103      	bne.n	800771c <_strtod_l+0xa44>
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	2b00      	cmp	r3, #0
 8007718:	f43f ad92 	beq.w	8007240 <_strtod_l+0x568>
 800771c:	2600      	movs	r6, #0
 800771e:	2400      	movs	r4, #0
 8007720:	4f32      	ldr	r7, [pc, #200]	; (80077ec <_strtod_l+0xb14>)
 8007722:	e796      	b.n	8007652 <_strtod_l+0x97a>
 8007724:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007726:	4d30      	ldr	r5, [pc, #192]	; (80077e8 <_strtod_l+0xb10>)
 8007728:	e7ea      	b.n	8007700 <_strtod_l+0xa28>
 800772a:	4b2f      	ldr	r3, [pc, #188]	; (80077e8 <_strtod_l+0xb10>)
 800772c:	2200      	movs	r2, #0
 800772e:	4630      	mov	r0, r6
 8007730:	4639      	mov	r1, r7
 8007732:	f7f8 fed1 	bl	80004d8 <__aeabi_dmul>
 8007736:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007738:	4604      	mov	r4, r0
 800773a:	460d      	mov	r5, r1
 800773c:	b933      	cbnz	r3, 800774c <_strtod_l+0xa74>
 800773e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007742:	9010      	str	r0, [sp, #64]	; 0x40
 8007744:	9311      	str	r3, [sp, #68]	; 0x44
 8007746:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800774a:	e783      	b.n	8007654 <_strtod_l+0x97c>
 800774c:	4602      	mov	r2, r0
 800774e:	460b      	mov	r3, r1
 8007750:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007754:	e7f7      	b.n	8007746 <_strtod_l+0xa6e>
 8007756:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800775a:	9b05      	ldr	r3, [sp, #20]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d1a8      	bne.n	80076b2 <_strtod_l+0x9da>
 8007760:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007764:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007766:	0d1b      	lsrs	r3, r3, #20
 8007768:	051b      	lsls	r3, r3, #20
 800776a:	429a      	cmp	r2, r3
 800776c:	d1a1      	bne.n	80076b2 <_strtod_l+0x9da>
 800776e:	4620      	mov	r0, r4
 8007770:	4629      	mov	r1, r5
 8007772:	f7f9 f9f9 	bl	8000b68 <__aeabi_d2lz>
 8007776:	f7f8 fe81 	bl	800047c <__aeabi_l2d>
 800777a:	4602      	mov	r2, r0
 800777c:	460b      	mov	r3, r1
 800777e:	4620      	mov	r0, r4
 8007780:	4629      	mov	r1, r5
 8007782:	f7f8 fcf1 	bl	8000168 <__aeabi_dsub>
 8007786:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800778c:	ea43 0308 	orr.w	r3, r3, r8
 8007790:	4313      	orrs	r3, r2
 8007792:	4604      	mov	r4, r0
 8007794:	460d      	mov	r5, r1
 8007796:	d066      	beq.n	8007866 <_strtod_l+0xb8e>
 8007798:	a309      	add	r3, pc, #36	; (adr r3, 80077c0 <_strtod_l+0xae8>)
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	f7f9 f90d 	bl	80009bc <__aeabi_dcmplt>
 80077a2:	2800      	cmp	r0, #0
 80077a4:	f47f ace2 	bne.w	800716c <_strtod_l+0x494>
 80077a8:	a307      	add	r3, pc, #28	; (adr r3, 80077c8 <_strtod_l+0xaf0>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	4620      	mov	r0, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	f7f9 f921 	bl	80009f8 <__aeabi_dcmpgt>
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f af7b 	beq.w	80076b2 <_strtod_l+0x9da>
 80077bc:	e4d6      	b.n	800716c <_strtod_l+0x494>
 80077be:	bf00      	nop
 80077c0:	94a03595 	.word	0x94a03595
 80077c4:	3fdfffff 	.word	0x3fdfffff
 80077c8:	35afe535 	.word	0x35afe535
 80077cc:	3fe00000 	.word	0x3fe00000
 80077d0:	000fffff 	.word	0x000fffff
 80077d4:	7ff00000 	.word	0x7ff00000
 80077d8:	7fefffff 	.word	0x7fefffff
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	7fe00000 	.word	0x7fe00000
 80077e4:	7c9fffff 	.word	0x7c9fffff
 80077e8:	3fe00000 	.word	0x3fe00000
 80077ec:	bff00000 	.word	0xbff00000
 80077f0:	9b05      	ldr	r3, [sp, #20]
 80077f2:	b313      	cbz	r3, 800783a <_strtod_l+0xb62>
 80077f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80077fa:	d81e      	bhi.n	800783a <_strtod_l+0xb62>
 80077fc:	a326      	add	r3, pc, #152	; (adr r3, 8007898 <_strtod_l+0xbc0>)
 80077fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007802:	4620      	mov	r0, r4
 8007804:	4629      	mov	r1, r5
 8007806:	f7f9 f8e3 	bl	80009d0 <__aeabi_dcmple>
 800780a:	b190      	cbz	r0, 8007832 <_strtod_l+0xb5a>
 800780c:	4629      	mov	r1, r5
 800780e:	4620      	mov	r0, r4
 8007810:	f7f9 f93a 	bl	8000a88 <__aeabi_d2uiz>
 8007814:	2801      	cmp	r0, #1
 8007816:	bf38      	it	cc
 8007818:	2001      	movcc	r0, #1
 800781a:	f7f8 fde3 	bl	80003e4 <__aeabi_ui2d>
 800781e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	b9d3      	cbnz	r3, 800785c <_strtod_l+0xb84>
 8007826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800782a:	9012      	str	r0, [sp, #72]	; 0x48
 800782c:	9313      	str	r3, [sp, #76]	; 0x4c
 800782e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007832:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007834:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007838:	1a9f      	subs	r7, r3, r2
 800783a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800783e:	f001 fe33 	bl	80094a8 <__ulp>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f8 fe45 	bl	80004d8 <__aeabi_dmul>
 800784e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007852:	f7f8 fc8b 	bl	800016c <__adddf3>
 8007856:	4680      	mov	r8, r0
 8007858:	4689      	mov	r9, r1
 800785a:	e77e      	b.n	800775a <_strtod_l+0xa82>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007864:	e7e3      	b.n	800782e <_strtod_l+0xb56>
 8007866:	a30e      	add	r3, pc, #56	; (adr r3, 80078a0 <_strtod_l+0xbc8>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	f7f9 f8a6 	bl	80009bc <__aeabi_dcmplt>
 8007870:	e7a1      	b.n	80077b6 <_strtod_l+0xade>
 8007872:	2300      	movs	r3, #0
 8007874:	930a      	str	r3, [sp, #40]	; 0x28
 8007876:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007878:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	f7ff ba71 	b.w	8006d62 <_strtod_l+0x8a>
 8007880:	2a65      	cmp	r2, #101	; 0x65
 8007882:	f43f ab63 	beq.w	8006f4c <_strtod_l+0x274>
 8007886:	2a45      	cmp	r2, #69	; 0x45
 8007888:	f43f ab60 	beq.w	8006f4c <_strtod_l+0x274>
 800788c:	2301      	movs	r3, #1
 800788e:	f7ff bb95 	b.w	8006fbc <_strtod_l+0x2e4>
 8007892:	bf00      	nop
 8007894:	f3af 8000 	nop.w
 8007898:	ffc00000 	.word	0xffc00000
 800789c:	41dfffff 	.word	0x41dfffff
 80078a0:	94a03595 	.word	0x94a03595
 80078a4:	3fcfffff 	.word	0x3fcfffff

080078a8 <_strtod_r>:
 80078a8:	4b01      	ldr	r3, [pc, #4]	; (80078b0 <_strtod_r+0x8>)
 80078aa:	f7ff ba15 	b.w	8006cd8 <_strtod_l>
 80078ae:	bf00      	nop
 80078b0:	20000078 	.word	0x20000078

080078b4 <_strtol_l.constprop.0>:
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078ba:	4680      	mov	r8, r0
 80078bc:	d001      	beq.n	80078c2 <_strtol_l.constprop.0+0xe>
 80078be:	2b24      	cmp	r3, #36	; 0x24
 80078c0:	d906      	bls.n	80078d0 <_strtol_l.constprop.0+0x1c>
 80078c2:	f7fe fb13 	bl	8005eec <__errno>
 80078c6:	2316      	movs	r3, #22
 80078c8:	6003      	str	r3, [r0, #0]
 80078ca:	2000      	movs	r0, #0
 80078cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078d0:	460d      	mov	r5, r1
 80078d2:	4f35      	ldr	r7, [pc, #212]	; (80079a8 <_strtol_l.constprop.0+0xf4>)
 80078d4:	4628      	mov	r0, r5
 80078d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078da:	5de6      	ldrb	r6, [r4, r7]
 80078dc:	f016 0608 	ands.w	r6, r6, #8
 80078e0:	d1f8      	bne.n	80078d4 <_strtol_l.constprop.0+0x20>
 80078e2:	2c2d      	cmp	r4, #45	; 0x2d
 80078e4:	d12f      	bne.n	8007946 <_strtol_l.constprop.0+0x92>
 80078e6:	2601      	movs	r6, #1
 80078e8:	782c      	ldrb	r4, [r5, #0]
 80078ea:	1c85      	adds	r5, r0, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d057      	beq.n	80079a0 <_strtol_l.constprop.0+0xec>
 80078f0:	2b10      	cmp	r3, #16
 80078f2:	d109      	bne.n	8007908 <_strtol_l.constprop.0+0x54>
 80078f4:	2c30      	cmp	r4, #48	; 0x30
 80078f6:	d107      	bne.n	8007908 <_strtol_l.constprop.0+0x54>
 80078f8:	7828      	ldrb	r0, [r5, #0]
 80078fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80078fe:	2858      	cmp	r0, #88	; 0x58
 8007900:	d149      	bne.n	8007996 <_strtol_l.constprop.0+0xe2>
 8007902:	2310      	movs	r3, #16
 8007904:	786c      	ldrb	r4, [r5, #1]
 8007906:	3502      	adds	r5, #2
 8007908:	2700      	movs	r7, #0
 800790a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800790e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007912:	fbbe f9f3 	udiv	r9, lr, r3
 8007916:	4638      	mov	r0, r7
 8007918:	fb03 ea19 	mls	sl, r3, r9, lr
 800791c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007920:	f1bc 0f09 	cmp.w	ip, #9
 8007924:	d814      	bhi.n	8007950 <_strtol_l.constprop.0+0x9c>
 8007926:	4664      	mov	r4, ip
 8007928:	42a3      	cmp	r3, r4
 800792a:	dd22      	ble.n	8007972 <_strtol_l.constprop.0+0xbe>
 800792c:	2f00      	cmp	r7, #0
 800792e:	db1d      	blt.n	800796c <_strtol_l.constprop.0+0xb8>
 8007930:	4581      	cmp	r9, r0
 8007932:	d31b      	bcc.n	800796c <_strtol_l.constprop.0+0xb8>
 8007934:	d101      	bne.n	800793a <_strtol_l.constprop.0+0x86>
 8007936:	45a2      	cmp	sl, r4
 8007938:	db18      	blt.n	800796c <_strtol_l.constprop.0+0xb8>
 800793a:	2701      	movs	r7, #1
 800793c:	fb00 4003 	mla	r0, r0, r3, r4
 8007940:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007944:	e7ea      	b.n	800791c <_strtol_l.constprop.0+0x68>
 8007946:	2c2b      	cmp	r4, #43	; 0x2b
 8007948:	bf04      	itt	eq
 800794a:	782c      	ldrbeq	r4, [r5, #0]
 800794c:	1c85      	addeq	r5, r0, #2
 800794e:	e7cd      	b.n	80078ec <_strtol_l.constprop.0+0x38>
 8007950:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007954:	f1bc 0f19 	cmp.w	ip, #25
 8007958:	d801      	bhi.n	800795e <_strtol_l.constprop.0+0xaa>
 800795a:	3c37      	subs	r4, #55	; 0x37
 800795c:	e7e4      	b.n	8007928 <_strtol_l.constprop.0+0x74>
 800795e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007962:	f1bc 0f19 	cmp.w	ip, #25
 8007966:	d804      	bhi.n	8007972 <_strtol_l.constprop.0+0xbe>
 8007968:	3c57      	subs	r4, #87	; 0x57
 800796a:	e7dd      	b.n	8007928 <_strtol_l.constprop.0+0x74>
 800796c:	f04f 37ff 	mov.w	r7, #4294967295
 8007970:	e7e6      	b.n	8007940 <_strtol_l.constprop.0+0x8c>
 8007972:	2f00      	cmp	r7, #0
 8007974:	da07      	bge.n	8007986 <_strtol_l.constprop.0+0xd2>
 8007976:	2322      	movs	r3, #34	; 0x22
 8007978:	4670      	mov	r0, lr
 800797a:	f8c8 3000 	str.w	r3, [r8]
 800797e:	2a00      	cmp	r2, #0
 8007980:	d0a4      	beq.n	80078cc <_strtol_l.constprop.0+0x18>
 8007982:	1e69      	subs	r1, r5, #1
 8007984:	e005      	b.n	8007992 <_strtol_l.constprop.0+0xde>
 8007986:	b106      	cbz	r6, 800798a <_strtol_l.constprop.0+0xd6>
 8007988:	4240      	negs	r0, r0
 800798a:	2a00      	cmp	r2, #0
 800798c:	d09e      	beq.n	80078cc <_strtol_l.constprop.0+0x18>
 800798e:	2f00      	cmp	r7, #0
 8007990:	d1f7      	bne.n	8007982 <_strtol_l.constprop.0+0xce>
 8007992:	6011      	str	r1, [r2, #0]
 8007994:	e79a      	b.n	80078cc <_strtol_l.constprop.0+0x18>
 8007996:	2430      	movs	r4, #48	; 0x30
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1b5      	bne.n	8007908 <_strtol_l.constprop.0+0x54>
 800799c:	2308      	movs	r3, #8
 800799e:	e7b3      	b.n	8007908 <_strtol_l.constprop.0+0x54>
 80079a0:	2c30      	cmp	r4, #48	; 0x30
 80079a2:	d0a9      	beq.n	80078f8 <_strtol_l.constprop.0+0x44>
 80079a4:	230a      	movs	r3, #10
 80079a6:	e7af      	b.n	8007908 <_strtol_l.constprop.0+0x54>
 80079a8:	0800a909 	.word	0x0800a909

080079ac <_strtol_r>:
 80079ac:	f7ff bf82 	b.w	80078b4 <_strtol_l.constprop.0>

080079b0 <quorem>:
 80079b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b4:	6903      	ldr	r3, [r0, #16]
 80079b6:	690c      	ldr	r4, [r1, #16]
 80079b8:	4607      	mov	r7, r0
 80079ba:	42a3      	cmp	r3, r4
 80079bc:	f2c0 8082 	blt.w	8007ac4 <quorem+0x114>
 80079c0:	3c01      	subs	r4, #1
 80079c2:	f100 0514 	add.w	r5, r0, #20
 80079c6:	f101 0814 	add.w	r8, r1, #20
 80079ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ce:	9301      	str	r3, [sp, #4]
 80079d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079d8:	3301      	adds	r3, #1
 80079da:	429a      	cmp	r2, r3
 80079dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80079e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079e8:	d331      	bcc.n	8007a4e <quorem+0x9e>
 80079ea:	f04f 0e00 	mov.w	lr, #0
 80079ee:	4640      	mov	r0, r8
 80079f0:	46ac      	mov	ip, r5
 80079f2:	46f2      	mov	sl, lr
 80079f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80079f8:	b293      	uxth	r3, r2
 80079fa:	fb06 e303 	mla	r3, r6, r3, lr
 80079fe:	0c12      	lsrs	r2, r2, #16
 8007a00:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	fb06 e202 	mla	r2, r6, r2, lr
 8007a0a:	ebaa 0303 	sub.w	r3, sl, r3
 8007a0e:	f8dc a000 	ldr.w	sl, [ip]
 8007a12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a16:	fa1f fa8a 	uxth.w	sl, sl
 8007a1a:	4453      	add	r3, sl
 8007a1c:	f8dc a000 	ldr.w	sl, [ip]
 8007a20:	b292      	uxth	r2, r2
 8007a22:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007a26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a30:	4581      	cmp	r9, r0
 8007a32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a36:	f84c 3b04 	str.w	r3, [ip], #4
 8007a3a:	d2db      	bcs.n	80079f4 <quorem+0x44>
 8007a3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a40:	b92b      	cbnz	r3, 8007a4e <quorem+0x9e>
 8007a42:	9b01      	ldr	r3, [sp, #4]
 8007a44:	3b04      	subs	r3, #4
 8007a46:	429d      	cmp	r5, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	d32f      	bcc.n	8007aac <quorem+0xfc>
 8007a4c:	613c      	str	r4, [r7, #16]
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f001 fc82 	bl	8009358 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	db25      	blt.n	8007aa4 <quorem+0xf4>
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f04f 0c00 	mov.w	ip, #0
 8007a5e:	3601      	adds	r6, #1
 8007a60:	f858 1b04 	ldr.w	r1, [r8], #4
 8007a64:	f8d0 e000 	ldr.w	lr, [r0]
 8007a68:	b28b      	uxth	r3, r1
 8007a6a:	ebac 0303 	sub.w	r3, ip, r3
 8007a6e:	fa1f f28e 	uxth.w	r2, lr
 8007a72:	4413      	add	r3, r2
 8007a74:	0c0a      	lsrs	r2, r1, #16
 8007a76:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a84:	45c1      	cmp	r9, r8
 8007a86:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a8a:	f840 3b04 	str.w	r3, [r0], #4
 8007a8e:	d2e7      	bcs.n	8007a60 <quorem+0xb0>
 8007a90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a98:	b922      	cbnz	r2, 8007aa4 <quorem+0xf4>
 8007a9a:	3b04      	subs	r3, #4
 8007a9c:	429d      	cmp	r5, r3
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	d30a      	bcc.n	8007ab8 <quorem+0x108>
 8007aa2:	613c      	str	r4, [r7, #16]
 8007aa4:	4630      	mov	r0, r6
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	6812      	ldr	r2, [r2, #0]
 8007aae:	3b04      	subs	r3, #4
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d1cb      	bne.n	8007a4c <quorem+0x9c>
 8007ab4:	3c01      	subs	r4, #1
 8007ab6:	e7c6      	b.n	8007a46 <quorem+0x96>
 8007ab8:	6812      	ldr	r2, [r2, #0]
 8007aba:	3b04      	subs	r3, #4
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d1f0      	bne.n	8007aa2 <quorem+0xf2>
 8007ac0:	3c01      	subs	r4, #1
 8007ac2:	e7eb      	b.n	8007a9c <quorem+0xec>
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	e7ee      	b.n	8007aa6 <quorem+0xf6>

08007ac8 <_dtoa_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4616      	mov	r6, r2
 8007ace:	461f      	mov	r7, r3
 8007ad0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ad2:	b099      	sub	sp, #100	; 0x64
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ada:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007ade:	b974      	cbnz	r4, 8007afe <_dtoa_r+0x36>
 8007ae0:	2010      	movs	r0, #16
 8007ae2:	f001 f949 	bl	8008d78 <malloc>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	6268      	str	r0, [r5, #36]	; 0x24
 8007aea:	b920      	cbnz	r0, 8007af6 <_dtoa_r+0x2e>
 8007aec:	21ea      	movs	r1, #234	; 0xea
 8007aee:	4ba8      	ldr	r3, [pc, #672]	; (8007d90 <_dtoa_r+0x2c8>)
 8007af0:	48a8      	ldr	r0, [pc, #672]	; (8007d94 <_dtoa_r+0x2cc>)
 8007af2:	f002 f8a5 	bl	8009c40 <__assert_func>
 8007af6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007afa:	6004      	str	r4, [r0, #0]
 8007afc:	60c4      	str	r4, [r0, #12]
 8007afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	b151      	cbz	r1, 8007b1a <_dtoa_r+0x52>
 8007b04:	685a      	ldr	r2, [r3, #4]
 8007b06:	2301      	movs	r3, #1
 8007b08:	4093      	lsls	r3, r2
 8007b0a:	604a      	str	r2, [r1, #4]
 8007b0c:	608b      	str	r3, [r1, #8]
 8007b0e:	4628      	mov	r0, r5
 8007b10:	f001 f99a 	bl	8008e48 <_Bfree>
 8007b14:	2200      	movs	r2, #0
 8007b16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b18:	601a      	str	r2, [r3, #0]
 8007b1a:	1e3b      	subs	r3, r7, #0
 8007b1c:	bfaf      	iteee	ge
 8007b1e:	2300      	movge	r3, #0
 8007b20:	2201      	movlt	r2, #1
 8007b22:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b26:	9305      	strlt	r3, [sp, #20]
 8007b28:	bfa8      	it	ge
 8007b2a:	f8c8 3000 	strge.w	r3, [r8]
 8007b2e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007b32:	4b99      	ldr	r3, [pc, #612]	; (8007d98 <_dtoa_r+0x2d0>)
 8007b34:	bfb8      	it	lt
 8007b36:	f8c8 2000 	strlt.w	r2, [r8]
 8007b3a:	ea33 0309 	bics.w	r3, r3, r9
 8007b3e:	d119      	bne.n	8007b74 <_dtoa_r+0xac>
 8007b40:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b44:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b4c:	4333      	orrs	r3, r6
 8007b4e:	f000 857f 	beq.w	8008650 <_dtoa_r+0xb88>
 8007b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b54:	b953      	cbnz	r3, 8007b6c <_dtoa_r+0xa4>
 8007b56:	4b91      	ldr	r3, [pc, #580]	; (8007d9c <_dtoa_r+0x2d4>)
 8007b58:	e022      	b.n	8007ba0 <_dtoa_r+0xd8>
 8007b5a:	4b91      	ldr	r3, [pc, #580]	; (8007da0 <_dtoa_r+0x2d8>)
 8007b5c:	9303      	str	r3, [sp, #12]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007b62:	6013      	str	r3, [r2, #0]
 8007b64:	9803      	ldr	r0, [sp, #12]
 8007b66:	b019      	add	sp, #100	; 0x64
 8007b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6c:	4b8b      	ldr	r3, [pc, #556]	; (8007d9c <_dtoa_r+0x2d4>)
 8007b6e:	9303      	str	r3, [sp, #12]
 8007b70:	3303      	adds	r3, #3
 8007b72:	e7f5      	b.n	8007b60 <_dtoa_r+0x98>
 8007b74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007b78:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007b7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b80:	2200      	movs	r2, #0
 8007b82:	2300      	movs	r3, #0
 8007b84:	f7f8 ff10 	bl	80009a8 <__aeabi_dcmpeq>
 8007b88:	4680      	mov	r8, r0
 8007b8a:	b158      	cbz	r0, 8007ba4 <_dtoa_r+0xdc>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	f000 8558 	beq.w	800864a <_dtoa_r+0xb82>
 8007b9a:	4882      	ldr	r0, [pc, #520]	; (8007da4 <_dtoa_r+0x2dc>)
 8007b9c:	6018      	str	r0, [r3, #0]
 8007b9e:	1e43      	subs	r3, r0, #1
 8007ba0:	9303      	str	r3, [sp, #12]
 8007ba2:	e7df      	b.n	8007b64 <_dtoa_r+0x9c>
 8007ba4:	ab16      	add	r3, sp, #88	; 0x58
 8007ba6:	9301      	str	r3, [sp, #4]
 8007ba8:	ab17      	add	r3, sp, #92	; 0x5c
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4628      	mov	r0, r5
 8007bae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bb2:	f001 fcf3 	bl	800959c <__d2b>
 8007bb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007bba:	4683      	mov	fp, r0
 8007bbc:	2c00      	cmp	r4, #0
 8007bbe:	d07f      	beq.n	8007cc0 <_dtoa_r+0x1f8>
 8007bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bc6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007bca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007bd2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007bd6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	4b72      	ldr	r3, [pc, #456]	; (8007da8 <_dtoa_r+0x2e0>)
 8007bde:	f7f8 fac3 	bl	8000168 <__aeabi_dsub>
 8007be2:	a365      	add	r3, pc, #404	; (adr r3, 8007d78 <_dtoa_r+0x2b0>)
 8007be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be8:	f7f8 fc76 	bl	80004d8 <__aeabi_dmul>
 8007bec:	a364      	add	r3, pc, #400	; (adr r3, 8007d80 <_dtoa_r+0x2b8>)
 8007bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf2:	f7f8 fabb 	bl	800016c <__adddf3>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	f7f8 fc02 	bl	8000404 <__aeabi_i2d>
 8007c00:	a361      	add	r3, pc, #388	; (adr r3, 8007d88 <_dtoa_r+0x2c0>)
 8007c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c06:	f7f8 fc67 	bl	80004d8 <__aeabi_dmul>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	460b      	mov	r3, r1
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 faab 	bl	800016c <__adddf3>
 8007c16:	4606      	mov	r6, r0
 8007c18:	460f      	mov	r7, r1
 8007c1a:	f7f8 ff0d 	bl	8000a38 <__aeabi_d2iz>
 8007c1e:	2200      	movs	r2, #0
 8007c20:	4682      	mov	sl, r0
 8007c22:	2300      	movs	r3, #0
 8007c24:	4630      	mov	r0, r6
 8007c26:	4639      	mov	r1, r7
 8007c28:	f7f8 fec8 	bl	80009bc <__aeabi_dcmplt>
 8007c2c:	b148      	cbz	r0, 8007c42 <_dtoa_r+0x17a>
 8007c2e:	4650      	mov	r0, sl
 8007c30:	f7f8 fbe8 	bl	8000404 <__aeabi_i2d>
 8007c34:	4632      	mov	r2, r6
 8007c36:	463b      	mov	r3, r7
 8007c38:	f7f8 feb6 	bl	80009a8 <__aeabi_dcmpeq>
 8007c3c:	b908      	cbnz	r0, 8007c42 <_dtoa_r+0x17a>
 8007c3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c42:	f1ba 0f16 	cmp.w	sl, #22
 8007c46:	d858      	bhi.n	8007cfa <_dtoa_r+0x232>
 8007c48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007c4c:	4b57      	ldr	r3, [pc, #348]	; (8007dac <_dtoa_r+0x2e4>)
 8007c4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c56:	f7f8 feb1 	bl	80009bc <__aeabi_dcmplt>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d04f      	beq.n	8007cfe <_dtoa_r+0x236>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c64:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c66:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c68:	1b1c      	subs	r4, r3, r4
 8007c6a:	1e63      	subs	r3, r4, #1
 8007c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c6e:	bf49      	itett	mi
 8007c70:	f1c4 0301 	rsbmi	r3, r4, #1
 8007c74:	2300      	movpl	r3, #0
 8007c76:	9306      	strmi	r3, [sp, #24]
 8007c78:	2300      	movmi	r3, #0
 8007c7a:	bf54      	ite	pl
 8007c7c:	9306      	strpl	r3, [sp, #24]
 8007c7e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c80:	f1ba 0f00 	cmp.w	sl, #0
 8007c84:	db3d      	blt.n	8007d02 <_dtoa_r+0x23a>
 8007c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c88:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c8c:	4453      	add	r3, sl
 8007c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c90:	2300      	movs	r3, #0
 8007c92:	930a      	str	r3, [sp, #40]	; 0x28
 8007c94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	f200 808c 	bhi.w	8007db4 <_dtoa_r+0x2ec>
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	bfc4      	itt	gt
 8007ca0:	3b04      	subgt	r3, #4
 8007ca2:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007ca4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ca6:	bfc8      	it	gt
 8007ca8:	2400      	movgt	r4, #0
 8007caa:	f1a3 0302 	sub.w	r3, r3, #2
 8007cae:	bfd8      	it	le
 8007cb0:	2401      	movle	r4, #1
 8007cb2:	2b03      	cmp	r3, #3
 8007cb4:	f200 808a 	bhi.w	8007dcc <_dtoa_r+0x304>
 8007cb8:	e8df f003 	tbb	[pc, r3]
 8007cbc:	5b4d4f2d 	.word	0x5b4d4f2d
 8007cc0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007cc4:	441c      	add	r4, r3
 8007cc6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007cca:	2b20      	cmp	r3, #32
 8007ccc:	bfc3      	ittte	gt
 8007cce:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cd2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007cd6:	fa09 f303 	lslgt.w	r3, r9, r3
 8007cda:	f1c3 0320 	rsble	r3, r3, #32
 8007cde:	bfc6      	itte	gt
 8007ce0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ce4:	4318      	orrgt	r0, r3
 8007ce6:	fa06 f003 	lslle.w	r0, r6, r3
 8007cea:	f7f8 fb7b 	bl	80003e4 <__aeabi_ui2d>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007cf4:	3c01      	subs	r4, #1
 8007cf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8007cf8:	e76f      	b.n	8007bda <_dtoa_r+0x112>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e7b2      	b.n	8007c64 <_dtoa_r+0x19c>
 8007cfe:	900f      	str	r0, [sp, #60]	; 0x3c
 8007d00:	e7b1      	b.n	8007c66 <_dtoa_r+0x19e>
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	eba3 030a 	sub.w	r3, r3, sl
 8007d08:	9306      	str	r3, [sp, #24]
 8007d0a:	f1ca 0300 	rsb	r3, sl, #0
 8007d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d10:	2300      	movs	r3, #0
 8007d12:	930e      	str	r3, [sp, #56]	; 0x38
 8007d14:	e7be      	b.n	8007c94 <_dtoa_r+0x1cc>
 8007d16:	2300      	movs	r3, #0
 8007d18:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d1a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	dc58      	bgt.n	8007dd2 <_dtoa_r+0x30a>
 8007d20:	f04f 0901 	mov.w	r9, #1
 8007d24:	464b      	mov	r3, r9
 8007d26:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d2a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007d2e:	2200      	movs	r2, #0
 8007d30:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007d32:	6042      	str	r2, [r0, #4]
 8007d34:	2204      	movs	r2, #4
 8007d36:	f102 0614 	add.w	r6, r2, #20
 8007d3a:	429e      	cmp	r6, r3
 8007d3c:	6841      	ldr	r1, [r0, #4]
 8007d3e:	d94e      	bls.n	8007dde <_dtoa_r+0x316>
 8007d40:	4628      	mov	r0, r5
 8007d42:	f001 f841 	bl	8008dc8 <_Balloc>
 8007d46:	9003      	str	r0, [sp, #12]
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d14c      	bne.n	8007de6 <_dtoa_r+0x31e>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007d52:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <_dtoa_r+0x2e8>)
 8007d54:	e6cc      	b.n	8007af0 <_dtoa_r+0x28>
 8007d56:	2301      	movs	r3, #1
 8007d58:	e7de      	b.n	8007d18 <_dtoa_r+0x250>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007d60:	eb0a 0903 	add.w	r9, sl, r3
 8007d64:	f109 0301 	add.w	r3, r9, #1
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	9308      	str	r3, [sp, #32]
 8007d6c:	bfb8      	it	lt
 8007d6e:	2301      	movlt	r3, #1
 8007d70:	e7dd      	b.n	8007d2e <_dtoa_r+0x266>
 8007d72:	2301      	movs	r3, #1
 8007d74:	e7f2      	b.n	8007d5c <_dtoa_r+0x294>
 8007d76:	bf00      	nop
 8007d78:	636f4361 	.word	0x636f4361
 8007d7c:	3fd287a7 	.word	0x3fd287a7
 8007d80:	8b60c8b3 	.word	0x8b60c8b3
 8007d84:	3fc68a28 	.word	0x3fc68a28
 8007d88:	509f79fb 	.word	0x509f79fb
 8007d8c:	3fd34413 	.word	0x3fd34413
 8007d90:	0800aa16 	.word	0x0800aa16
 8007d94:	0800aa2d 	.word	0x0800aa2d
 8007d98:	7ff00000 	.word	0x7ff00000
 8007d9c:	0800aa12 	.word	0x0800aa12
 8007da0:	0800aa09 	.word	0x0800aa09
 8007da4:	0800a88d 	.word	0x0800a88d
 8007da8:	3ff80000 	.word	0x3ff80000
 8007dac:	0800ab98 	.word	0x0800ab98
 8007db0:	0800aa88 	.word	0x0800aa88
 8007db4:	2401      	movs	r4, #1
 8007db6:	2300      	movs	r3, #0
 8007db8:	940b      	str	r4, [sp, #44]	; 0x2c
 8007dba:	9322      	str	r3, [sp, #136]	; 0x88
 8007dbc:	f04f 39ff 	mov.w	r9, #4294967295
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2312      	movs	r3, #18
 8007dc4:	f8cd 9020 	str.w	r9, [sp, #32]
 8007dc8:	9223      	str	r2, [sp, #140]	; 0x8c
 8007dca:	e7b0      	b.n	8007d2e <_dtoa_r+0x266>
 8007dcc:	2301      	movs	r3, #1
 8007dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8007dd0:	e7f4      	b.n	8007dbc <_dtoa_r+0x2f4>
 8007dd2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007dd6:	464b      	mov	r3, r9
 8007dd8:	f8cd 9020 	str.w	r9, [sp, #32]
 8007ddc:	e7a7      	b.n	8007d2e <_dtoa_r+0x266>
 8007dde:	3101      	adds	r1, #1
 8007de0:	6041      	str	r1, [r0, #4]
 8007de2:	0052      	lsls	r2, r2, #1
 8007de4:	e7a7      	b.n	8007d36 <_dtoa_r+0x26e>
 8007de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007de8:	9a03      	ldr	r2, [sp, #12]
 8007dea:	601a      	str	r2, [r3, #0]
 8007dec:	9b08      	ldr	r3, [sp, #32]
 8007dee:	2b0e      	cmp	r3, #14
 8007df0:	f200 80a8 	bhi.w	8007f44 <_dtoa_r+0x47c>
 8007df4:	2c00      	cmp	r4, #0
 8007df6:	f000 80a5 	beq.w	8007f44 <_dtoa_r+0x47c>
 8007dfa:	f1ba 0f00 	cmp.w	sl, #0
 8007dfe:	dd34      	ble.n	8007e6a <_dtoa_r+0x3a2>
 8007e00:	4a9a      	ldr	r2, [pc, #616]	; (800806c <_dtoa_r+0x5a4>)
 8007e02:	f00a 030f 	and.w	r3, sl, #15
 8007e06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e0a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e12:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e16:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007e1a:	d016      	beq.n	8007e4a <_dtoa_r+0x382>
 8007e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e20:	4b93      	ldr	r3, [pc, #588]	; (8008070 <_dtoa_r+0x5a8>)
 8007e22:	2703      	movs	r7, #3
 8007e24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e28:	f7f8 fc80 	bl	800072c <__aeabi_ddiv>
 8007e2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e30:	f004 040f 	and.w	r4, r4, #15
 8007e34:	4e8e      	ldr	r6, [pc, #568]	; (8008070 <_dtoa_r+0x5a8>)
 8007e36:	b954      	cbnz	r4, 8007e4e <_dtoa_r+0x386>
 8007e38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007e3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e40:	f7f8 fc74 	bl	800072c <__aeabi_ddiv>
 8007e44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e48:	e029      	b.n	8007e9e <_dtoa_r+0x3d6>
 8007e4a:	2702      	movs	r7, #2
 8007e4c:	e7f2      	b.n	8007e34 <_dtoa_r+0x36c>
 8007e4e:	07e1      	lsls	r1, r4, #31
 8007e50:	d508      	bpl.n	8007e64 <_dtoa_r+0x39c>
 8007e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e56:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e5a:	f7f8 fb3d 	bl	80004d8 <__aeabi_dmul>
 8007e5e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e62:	3701      	adds	r7, #1
 8007e64:	1064      	asrs	r4, r4, #1
 8007e66:	3608      	adds	r6, #8
 8007e68:	e7e5      	b.n	8007e36 <_dtoa_r+0x36e>
 8007e6a:	f000 80a5 	beq.w	8007fb8 <_dtoa_r+0x4f0>
 8007e6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e72:	f1ca 0400 	rsb	r4, sl, #0
 8007e76:	4b7d      	ldr	r3, [pc, #500]	; (800806c <_dtoa_r+0x5a4>)
 8007e78:	f004 020f 	and.w	r2, r4, #15
 8007e7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	f7f8 fb28 	bl	80004d8 <__aeabi_dmul>
 8007e88:	2702      	movs	r7, #2
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e90:	4e77      	ldr	r6, [pc, #476]	; (8008070 <_dtoa_r+0x5a8>)
 8007e92:	1124      	asrs	r4, r4, #4
 8007e94:	2c00      	cmp	r4, #0
 8007e96:	f040 8084 	bne.w	8007fa2 <_dtoa_r+0x4da>
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1d2      	bne.n	8007e44 <_dtoa_r+0x37c>
 8007e9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 808b 	beq.w	8007fbc <_dtoa_r+0x4f4>
 8007ea6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007eaa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007eae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <_dtoa_r+0x5ac>)
 8007eb6:	f7f8 fd81 	bl	80009bc <__aeabi_dcmplt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d07e      	beq.n	8007fbc <_dtoa_r+0x4f4>
 8007ebe:	9b08      	ldr	r3, [sp, #32]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d07b      	beq.n	8007fbc <_dtoa_r+0x4f4>
 8007ec4:	f1b9 0f00 	cmp.w	r9, #0
 8007ec8:	dd38      	ble.n	8007f3c <_dtoa_r+0x474>
 8007eca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007ece:	2200      	movs	r2, #0
 8007ed0:	4b69      	ldr	r3, [pc, #420]	; (8008078 <_dtoa_r+0x5b0>)
 8007ed2:	f7f8 fb01 	bl	80004d8 <__aeabi_dmul>
 8007ed6:	464c      	mov	r4, r9
 8007ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007edc:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007ee0:	3701      	adds	r7, #1
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f7f8 fa8e 	bl	8000404 <__aeabi_i2d>
 8007ee8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eec:	f7f8 faf4 	bl	80004d8 <__aeabi_dmul>
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4b62      	ldr	r3, [pc, #392]	; (800807c <_dtoa_r+0x5b4>)
 8007ef4:	f7f8 f93a 	bl	800016c <__adddf3>
 8007ef8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007efc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f00:	9611      	str	r6, [sp, #68]	; 0x44
 8007f02:	2c00      	cmp	r4, #0
 8007f04:	d15d      	bne.n	8007fc2 <_dtoa_r+0x4fa>
 8007f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	4b5c      	ldr	r3, [pc, #368]	; (8008080 <_dtoa_r+0x5b8>)
 8007f0e:	f7f8 f92b 	bl	8000168 <__aeabi_dsub>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f1a:	4633      	mov	r3, r6
 8007f1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f1e:	f7f8 fd6b 	bl	80009f8 <__aeabi_dcmpgt>
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f040 829c 	bne.w	8008460 <_dtoa_r+0x998>
 8007f28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f2e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007f32:	f7f8 fd43 	bl	80009bc <__aeabi_dcmplt>
 8007f36:	2800      	cmp	r0, #0
 8007f38:	f040 8290 	bne.w	800845c <_dtoa_r+0x994>
 8007f3c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007f40:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f44:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f2c0 8152 	blt.w	80081f0 <_dtoa_r+0x728>
 8007f4c:	f1ba 0f0e 	cmp.w	sl, #14
 8007f50:	f300 814e 	bgt.w	80081f0 <_dtoa_r+0x728>
 8007f54:	4b45      	ldr	r3, [pc, #276]	; (800806c <_dtoa_r+0x5a4>)
 8007f56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007f5e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007f62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f280 80db 	bge.w	8008120 <_dtoa_r+0x658>
 8007f6a:	9b08      	ldr	r3, [sp, #32]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f300 80d7 	bgt.w	8008120 <_dtoa_r+0x658>
 8007f72:	f040 8272 	bne.w	800845a <_dtoa_r+0x992>
 8007f76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	4b40      	ldr	r3, [pc, #256]	; (8008080 <_dtoa_r+0x5b8>)
 8007f7e:	f7f8 faab 	bl	80004d8 <__aeabi_dmul>
 8007f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f86:	f7f8 fd2d 	bl	80009e4 <__aeabi_dcmpge>
 8007f8a:	9c08      	ldr	r4, [sp, #32]
 8007f8c:	4626      	mov	r6, r4
 8007f8e:	2800      	cmp	r0, #0
 8007f90:	f040 8248 	bne.w	8008424 <_dtoa_r+0x95c>
 8007f94:	2331      	movs	r3, #49	; 0x31
 8007f96:	9f03      	ldr	r7, [sp, #12]
 8007f98:	f10a 0a01 	add.w	sl, sl, #1
 8007f9c:	f807 3b01 	strb.w	r3, [r7], #1
 8007fa0:	e244      	b.n	800842c <_dtoa_r+0x964>
 8007fa2:	07e2      	lsls	r2, r4, #31
 8007fa4:	d505      	bpl.n	8007fb2 <_dtoa_r+0x4ea>
 8007fa6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007faa:	f7f8 fa95 	bl	80004d8 <__aeabi_dmul>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	3701      	adds	r7, #1
 8007fb2:	1064      	asrs	r4, r4, #1
 8007fb4:	3608      	adds	r6, #8
 8007fb6:	e76d      	b.n	8007e94 <_dtoa_r+0x3cc>
 8007fb8:	2702      	movs	r7, #2
 8007fba:	e770      	b.n	8007e9e <_dtoa_r+0x3d6>
 8007fbc:	46d0      	mov	r8, sl
 8007fbe:	9c08      	ldr	r4, [sp, #32]
 8007fc0:	e78f      	b.n	8007ee2 <_dtoa_r+0x41a>
 8007fc2:	9903      	ldr	r1, [sp, #12]
 8007fc4:	4b29      	ldr	r3, [pc, #164]	; (800806c <_dtoa_r+0x5a4>)
 8007fc6:	4421      	add	r1, r4
 8007fc8:	9112      	str	r1, [sp, #72]	; 0x48
 8007fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fd0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007fd4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fd8:	2900      	cmp	r1, #0
 8007fda:	d055      	beq.n	8008088 <_dtoa_r+0x5c0>
 8007fdc:	2000      	movs	r0, #0
 8007fde:	4929      	ldr	r1, [pc, #164]	; (8008084 <_dtoa_r+0x5bc>)
 8007fe0:	f7f8 fba4 	bl	800072c <__aeabi_ddiv>
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	4632      	mov	r2, r6
 8007fe8:	f7f8 f8be 	bl	8000168 <__aeabi_dsub>
 8007fec:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007ff0:	9f03      	ldr	r7, [sp, #12]
 8007ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff6:	f7f8 fd1f 	bl	8000a38 <__aeabi_d2iz>
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	f7f8 fa02 	bl	8000404 <__aeabi_i2d>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008008:	f7f8 f8ae 	bl	8000168 <__aeabi_dsub>
 800800c:	4602      	mov	r2, r0
 800800e:	460b      	mov	r3, r1
 8008010:	3430      	adds	r4, #48	; 0x30
 8008012:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008016:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800801a:	f807 4b01 	strb.w	r4, [r7], #1
 800801e:	f7f8 fccd 	bl	80009bc <__aeabi_dcmplt>
 8008022:	2800      	cmp	r0, #0
 8008024:	d174      	bne.n	8008110 <_dtoa_r+0x648>
 8008026:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802a:	2000      	movs	r0, #0
 800802c:	4911      	ldr	r1, [pc, #68]	; (8008074 <_dtoa_r+0x5ac>)
 800802e:	f7f8 f89b 	bl	8000168 <__aeabi_dsub>
 8008032:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008036:	f7f8 fcc1 	bl	80009bc <__aeabi_dcmplt>
 800803a:	2800      	cmp	r0, #0
 800803c:	f040 80b7 	bne.w	80081ae <_dtoa_r+0x6e6>
 8008040:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008042:	429f      	cmp	r7, r3
 8008044:	f43f af7a 	beq.w	8007f3c <_dtoa_r+0x474>
 8008048:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800804c:	2200      	movs	r2, #0
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <_dtoa_r+0x5b0>)
 8008050:	f7f8 fa42 	bl	80004d8 <__aeabi_dmul>
 8008054:	2200      	movs	r2, #0
 8008056:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800805a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800805e:	4b06      	ldr	r3, [pc, #24]	; (8008078 <_dtoa_r+0x5b0>)
 8008060:	f7f8 fa3a 	bl	80004d8 <__aeabi_dmul>
 8008064:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008068:	e7c3      	b.n	8007ff2 <_dtoa_r+0x52a>
 800806a:	bf00      	nop
 800806c:	0800ab98 	.word	0x0800ab98
 8008070:	0800ab70 	.word	0x0800ab70
 8008074:	3ff00000 	.word	0x3ff00000
 8008078:	40240000 	.word	0x40240000
 800807c:	401c0000 	.word	0x401c0000
 8008080:	40140000 	.word	0x40140000
 8008084:	3fe00000 	.word	0x3fe00000
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 fa24 	bl	80004d8 <__aeabi_dmul>
 8008090:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008092:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008096:	9c03      	ldr	r4, [sp, #12]
 8008098:	9314      	str	r3, [sp, #80]	; 0x50
 800809a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800809e:	f7f8 fccb 	bl	8000a38 <__aeabi_d2iz>
 80080a2:	9015      	str	r0, [sp, #84]	; 0x54
 80080a4:	f7f8 f9ae 	bl	8000404 <__aeabi_i2d>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080b0:	f7f8 f85a 	bl	8000168 <__aeabi_dsub>
 80080b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80080b6:	4606      	mov	r6, r0
 80080b8:	3330      	adds	r3, #48	; 0x30
 80080ba:	f804 3b01 	strb.w	r3, [r4], #1
 80080be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080c0:	460f      	mov	r7, r1
 80080c2:	429c      	cmp	r4, r3
 80080c4:	f04f 0200 	mov.w	r2, #0
 80080c8:	d124      	bne.n	8008114 <_dtoa_r+0x64c>
 80080ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080ce:	4bb0      	ldr	r3, [pc, #704]	; (8008390 <_dtoa_r+0x8c8>)
 80080d0:	f7f8 f84c 	bl	800016c <__adddf3>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4630      	mov	r0, r6
 80080da:	4639      	mov	r1, r7
 80080dc:	f7f8 fc8c 	bl	80009f8 <__aeabi_dcmpgt>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d163      	bne.n	80081ac <_dtoa_r+0x6e4>
 80080e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80080e8:	2000      	movs	r0, #0
 80080ea:	49a9      	ldr	r1, [pc, #676]	; (8008390 <_dtoa_r+0x8c8>)
 80080ec:	f7f8 f83c 	bl	8000168 <__aeabi_dsub>
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 fc60 	bl	80009bc <__aeabi_dcmplt>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	f43f af1d 	beq.w	8007f3c <_dtoa_r+0x474>
 8008102:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008104:	1e7b      	subs	r3, r7, #1
 8008106:	9314      	str	r3, [sp, #80]	; 0x50
 8008108:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800810c:	2b30      	cmp	r3, #48	; 0x30
 800810e:	d0f8      	beq.n	8008102 <_dtoa_r+0x63a>
 8008110:	46c2      	mov	sl, r8
 8008112:	e03b      	b.n	800818c <_dtoa_r+0x6c4>
 8008114:	4b9f      	ldr	r3, [pc, #636]	; (8008394 <_dtoa_r+0x8cc>)
 8008116:	f7f8 f9df 	bl	80004d8 <__aeabi_dmul>
 800811a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800811e:	e7bc      	b.n	800809a <_dtoa_r+0x5d2>
 8008120:	9f03      	ldr	r7, [sp, #12]
 8008122:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008126:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800812a:	4640      	mov	r0, r8
 800812c:	4649      	mov	r1, r9
 800812e:	f7f8 fafd 	bl	800072c <__aeabi_ddiv>
 8008132:	f7f8 fc81 	bl	8000a38 <__aeabi_d2iz>
 8008136:	4604      	mov	r4, r0
 8008138:	f7f8 f964 	bl	8000404 <__aeabi_i2d>
 800813c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008140:	f7f8 f9ca 	bl	80004d8 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4640      	mov	r0, r8
 800814a:	4649      	mov	r1, r9
 800814c:	f7f8 f80c 	bl	8000168 <__aeabi_dsub>
 8008150:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008154:	f807 6b01 	strb.w	r6, [r7], #1
 8008158:	9e03      	ldr	r6, [sp, #12]
 800815a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800815e:	1bbe      	subs	r6, r7, r6
 8008160:	45b4      	cmp	ip, r6
 8008162:	4602      	mov	r2, r0
 8008164:	460b      	mov	r3, r1
 8008166:	d136      	bne.n	80081d6 <_dtoa_r+0x70e>
 8008168:	f7f8 f800 	bl	800016c <__adddf3>
 800816c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008170:	4680      	mov	r8, r0
 8008172:	4689      	mov	r9, r1
 8008174:	f7f8 fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8008178:	bb58      	cbnz	r0, 80081d2 <_dtoa_r+0x70a>
 800817a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800817e:	4640      	mov	r0, r8
 8008180:	4649      	mov	r1, r9
 8008182:	f7f8 fc11 	bl	80009a8 <__aeabi_dcmpeq>
 8008186:	b108      	cbz	r0, 800818c <_dtoa_r+0x6c4>
 8008188:	07e1      	lsls	r1, r4, #31
 800818a:	d422      	bmi.n	80081d2 <_dtoa_r+0x70a>
 800818c:	4628      	mov	r0, r5
 800818e:	4659      	mov	r1, fp
 8008190:	f000 fe5a 	bl	8008e48 <_Bfree>
 8008194:	2300      	movs	r3, #0
 8008196:	703b      	strb	r3, [r7, #0]
 8008198:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800819a:	f10a 0001 	add.w	r0, sl, #1
 800819e:	6018      	str	r0, [r3, #0]
 80081a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	f43f acde 	beq.w	8007b64 <_dtoa_r+0x9c>
 80081a8:	601f      	str	r7, [r3, #0]
 80081aa:	e4db      	b.n	8007b64 <_dtoa_r+0x9c>
 80081ac:	4627      	mov	r7, r4
 80081ae:	463b      	mov	r3, r7
 80081b0:	461f      	mov	r7, r3
 80081b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80081b6:	2a39      	cmp	r2, #57	; 0x39
 80081b8:	d107      	bne.n	80081ca <_dtoa_r+0x702>
 80081ba:	9a03      	ldr	r2, [sp, #12]
 80081bc:	429a      	cmp	r2, r3
 80081be:	d1f7      	bne.n	80081b0 <_dtoa_r+0x6e8>
 80081c0:	2230      	movs	r2, #48	; 0x30
 80081c2:	9903      	ldr	r1, [sp, #12]
 80081c4:	f108 0801 	add.w	r8, r8, #1
 80081c8:	700a      	strb	r2, [r1, #0]
 80081ca:	781a      	ldrb	r2, [r3, #0]
 80081cc:	3201      	adds	r2, #1
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e79e      	b.n	8008110 <_dtoa_r+0x648>
 80081d2:	46d0      	mov	r8, sl
 80081d4:	e7eb      	b.n	80081ae <_dtoa_r+0x6e6>
 80081d6:	2200      	movs	r2, #0
 80081d8:	4b6e      	ldr	r3, [pc, #440]	; (8008394 <_dtoa_r+0x8cc>)
 80081da:	f7f8 f97d 	bl	80004d8 <__aeabi_dmul>
 80081de:	2200      	movs	r2, #0
 80081e0:	2300      	movs	r3, #0
 80081e2:	4680      	mov	r8, r0
 80081e4:	4689      	mov	r9, r1
 80081e6:	f7f8 fbdf 	bl	80009a8 <__aeabi_dcmpeq>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d09b      	beq.n	8008126 <_dtoa_r+0x65e>
 80081ee:	e7cd      	b.n	800818c <_dtoa_r+0x6c4>
 80081f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081f2:	2a00      	cmp	r2, #0
 80081f4:	f000 80d0 	beq.w	8008398 <_dtoa_r+0x8d0>
 80081f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80081fa:	2a01      	cmp	r2, #1
 80081fc:	f300 80ae 	bgt.w	800835c <_dtoa_r+0x894>
 8008200:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008202:	2a00      	cmp	r2, #0
 8008204:	f000 80a6 	beq.w	8008354 <_dtoa_r+0x88c>
 8008208:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800820c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800820e:	9f06      	ldr	r7, [sp, #24]
 8008210:	9a06      	ldr	r2, [sp, #24]
 8008212:	2101      	movs	r1, #1
 8008214:	441a      	add	r2, r3
 8008216:	9206      	str	r2, [sp, #24]
 8008218:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821a:	4628      	mov	r0, r5
 800821c:	441a      	add	r2, r3
 800821e:	9209      	str	r2, [sp, #36]	; 0x24
 8008220:	f000 ff12 	bl	8009048 <__i2b>
 8008224:	4606      	mov	r6, r0
 8008226:	2f00      	cmp	r7, #0
 8008228:	dd0c      	ble.n	8008244 <_dtoa_r+0x77c>
 800822a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	dd09      	ble.n	8008244 <_dtoa_r+0x77c>
 8008230:	42bb      	cmp	r3, r7
 8008232:	bfa8      	it	ge
 8008234:	463b      	movge	r3, r7
 8008236:	9a06      	ldr	r2, [sp, #24]
 8008238:	1aff      	subs	r7, r7, r3
 800823a:	1ad2      	subs	r2, r2, r3
 800823c:	9206      	str	r2, [sp, #24]
 800823e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	9309      	str	r3, [sp, #36]	; 0x24
 8008244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008246:	b1f3      	cbz	r3, 8008286 <_dtoa_r+0x7be>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 80a8 	beq.w	80083a0 <_dtoa_r+0x8d8>
 8008250:	2c00      	cmp	r4, #0
 8008252:	dd10      	ble.n	8008276 <_dtoa_r+0x7ae>
 8008254:	4631      	mov	r1, r6
 8008256:	4622      	mov	r2, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f000 ffb3 	bl	80091c4 <__pow5mult>
 800825e:	465a      	mov	r2, fp
 8008260:	4601      	mov	r1, r0
 8008262:	4606      	mov	r6, r0
 8008264:	4628      	mov	r0, r5
 8008266:	f000 ff05 	bl	8009074 <__multiply>
 800826a:	4680      	mov	r8, r0
 800826c:	4659      	mov	r1, fp
 800826e:	4628      	mov	r0, r5
 8008270:	f000 fdea 	bl	8008e48 <_Bfree>
 8008274:	46c3      	mov	fp, r8
 8008276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008278:	1b1a      	subs	r2, r3, r4
 800827a:	d004      	beq.n	8008286 <_dtoa_r+0x7be>
 800827c:	4659      	mov	r1, fp
 800827e:	4628      	mov	r0, r5
 8008280:	f000 ffa0 	bl	80091c4 <__pow5mult>
 8008284:	4683      	mov	fp, r0
 8008286:	2101      	movs	r1, #1
 8008288:	4628      	mov	r0, r5
 800828a:	f000 fedd 	bl	8009048 <__i2b>
 800828e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008290:	4604      	mov	r4, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	f340 8086 	ble.w	80083a4 <_dtoa_r+0x8dc>
 8008298:	461a      	mov	r2, r3
 800829a:	4601      	mov	r1, r0
 800829c:	4628      	mov	r0, r5
 800829e:	f000 ff91 	bl	80091c4 <__pow5mult>
 80082a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082a4:	4604      	mov	r4, r0
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	dd7f      	ble.n	80083aa <_dtoa_r+0x8e2>
 80082aa:	f04f 0800 	mov.w	r8, #0
 80082ae:	6923      	ldr	r3, [r4, #16]
 80082b0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082b4:	6918      	ldr	r0, [r3, #16]
 80082b6:	f000 fe79 	bl	8008fac <__hi0bits>
 80082ba:	f1c0 0020 	rsb	r0, r0, #32
 80082be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082c0:	4418      	add	r0, r3
 80082c2:	f010 001f 	ands.w	r0, r0, #31
 80082c6:	f000 8092 	beq.w	80083ee <_dtoa_r+0x926>
 80082ca:	f1c0 0320 	rsb	r3, r0, #32
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	f340 808a 	ble.w	80083e8 <_dtoa_r+0x920>
 80082d4:	f1c0 001c 	rsb	r0, r0, #28
 80082d8:	9b06      	ldr	r3, [sp, #24]
 80082da:	4407      	add	r7, r0
 80082dc:	4403      	add	r3, r0
 80082de:	9306      	str	r3, [sp, #24]
 80082e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082e2:	4403      	add	r3, r0
 80082e4:	9309      	str	r3, [sp, #36]	; 0x24
 80082e6:	9b06      	ldr	r3, [sp, #24]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	dd05      	ble.n	80082f8 <_dtoa_r+0x830>
 80082ec:	4659      	mov	r1, fp
 80082ee:	461a      	mov	r2, r3
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 ffc1 	bl	8009278 <__lshift>
 80082f6:	4683      	mov	fp, r0
 80082f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	dd05      	ble.n	800830a <_dtoa_r+0x842>
 80082fe:	4621      	mov	r1, r4
 8008300:	461a      	mov	r2, r3
 8008302:	4628      	mov	r0, r5
 8008304:	f000 ffb8 	bl	8009278 <__lshift>
 8008308:	4604      	mov	r4, r0
 800830a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800830c:	2b00      	cmp	r3, #0
 800830e:	d070      	beq.n	80083f2 <_dtoa_r+0x92a>
 8008310:	4621      	mov	r1, r4
 8008312:	4658      	mov	r0, fp
 8008314:	f001 f820 	bl	8009358 <__mcmp>
 8008318:	2800      	cmp	r0, #0
 800831a:	da6a      	bge.n	80083f2 <_dtoa_r+0x92a>
 800831c:	2300      	movs	r3, #0
 800831e:	4659      	mov	r1, fp
 8008320:	220a      	movs	r2, #10
 8008322:	4628      	mov	r0, r5
 8008324:	f000 fdb2 	bl	8008e8c <__multadd>
 8008328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800832a:	4683      	mov	fp, r0
 800832c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 8194 	beq.w	800865e <_dtoa_r+0xb96>
 8008336:	4631      	mov	r1, r6
 8008338:	2300      	movs	r3, #0
 800833a:	220a      	movs	r2, #10
 800833c:	4628      	mov	r0, r5
 800833e:	f000 fda5 	bl	8008e8c <__multadd>
 8008342:	f1b9 0f00 	cmp.w	r9, #0
 8008346:	4606      	mov	r6, r0
 8008348:	f300 8093 	bgt.w	8008472 <_dtoa_r+0x9aa>
 800834c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800834e:	2b02      	cmp	r3, #2
 8008350:	dc57      	bgt.n	8008402 <_dtoa_r+0x93a>
 8008352:	e08e      	b.n	8008472 <_dtoa_r+0x9aa>
 8008354:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008356:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800835a:	e757      	b.n	800820c <_dtoa_r+0x744>
 800835c:	9b08      	ldr	r3, [sp, #32]
 800835e:	1e5c      	subs	r4, r3, #1
 8008360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008362:	42a3      	cmp	r3, r4
 8008364:	bfb7      	itett	lt
 8008366:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008368:	1b1c      	subge	r4, r3, r4
 800836a:	1ae2      	sublt	r2, r4, r3
 800836c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800836e:	bfbe      	ittt	lt
 8008370:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008372:	189b      	addlt	r3, r3, r2
 8008374:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008376:	9b08      	ldr	r3, [sp, #32]
 8008378:	bfb8      	it	lt
 800837a:	2400      	movlt	r4, #0
 800837c:	2b00      	cmp	r3, #0
 800837e:	bfbb      	ittet	lt
 8008380:	9b06      	ldrlt	r3, [sp, #24]
 8008382:	9a08      	ldrlt	r2, [sp, #32]
 8008384:	9f06      	ldrge	r7, [sp, #24]
 8008386:	1a9f      	sublt	r7, r3, r2
 8008388:	bfac      	ite	ge
 800838a:	9b08      	ldrge	r3, [sp, #32]
 800838c:	2300      	movlt	r3, #0
 800838e:	e73f      	b.n	8008210 <_dtoa_r+0x748>
 8008390:	3fe00000 	.word	0x3fe00000
 8008394:	40240000 	.word	0x40240000
 8008398:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800839a:	9f06      	ldr	r7, [sp, #24]
 800839c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800839e:	e742      	b.n	8008226 <_dtoa_r+0x75e>
 80083a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083a2:	e76b      	b.n	800827c <_dtoa_r+0x7b4>
 80083a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	dc19      	bgt.n	80083de <_dtoa_r+0x916>
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	b9bb      	cbnz	r3, 80083de <_dtoa_r+0x916>
 80083ae:	9b05      	ldr	r3, [sp, #20]
 80083b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083b4:	b99b      	cbnz	r3, 80083de <_dtoa_r+0x916>
 80083b6:	9b05      	ldr	r3, [sp, #20]
 80083b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083bc:	0d1b      	lsrs	r3, r3, #20
 80083be:	051b      	lsls	r3, r3, #20
 80083c0:	b183      	cbz	r3, 80083e4 <_dtoa_r+0x91c>
 80083c2:	f04f 0801 	mov.w	r8, #1
 80083c6:	9b06      	ldr	r3, [sp, #24]
 80083c8:	3301      	adds	r3, #1
 80083ca:	9306      	str	r3, [sp, #24]
 80083cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ce:	3301      	adds	r3, #1
 80083d0:	9309      	str	r3, [sp, #36]	; 0x24
 80083d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f47f af6a 	bne.w	80082ae <_dtoa_r+0x7e6>
 80083da:	2001      	movs	r0, #1
 80083dc:	e76f      	b.n	80082be <_dtoa_r+0x7f6>
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	e7f6      	b.n	80083d2 <_dtoa_r+0x90a>
 80083e4:	4698      	mov	r8, r3
 80083e6:	e7f4      	b.n	80083d2 <_dtoa_r+0x90a>
 80083e8:	f43f af7d 	beq.w	80082e6 <_dtoa_r+0x81e>
 80083ec:	4618      	mov	r0, r3
 80083ee:	301c      	adds	r0, #28
 80083f0:	e772      	b.n	80082d8 <_dtoa_r+0x810>
 80083f2:	9b08      	ldr	r3, [sp, #32]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	dc36      	bgt.n	8008466 <_dtoa_r+0x99e>
 80083f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083fa:	2b02      	cmp	r3, #2
 80083fc:	dd33      	ble.n	8008466 <_dtoa_r+0x99e>
 80083fe:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008402:	f1b9 0f00 	cmp.w	r9, #0
 8008406:	d10d      	bne.n	8008424 <_dtoa_r+0x95c>
 8008408:	4621      	mov	r1, r4
 800840a:	464b      	mov	r3, r9
 800840c:	2205      	movs	r2, #5
 800840e:	4628      	mov	r0, r5
 8008410:	f000 fd3c 	bl	8008e8c <__multadd>
 8008414:	4601      	mov	r1, r0
 8008416:	4604      	mov	r4, r0
 8008418:	4658      	mov	r0, fp
 800841a:	f000 ff9d 	bl	8009358 <__mcmp>
 800841e:	2800      	cmp	r0, #0
 8008420:	f73f adb8 	bgt.w	8007f94 <_dtoa_r+0x4cc>
 8008424:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008426:	9f03      	ldr	r7, [sp, #12]
 8008428:	ea6f 0a03 	mvn.w	sl, r3
 800842c:	f04f 0800 	mov.w	r8, #0
 8008430:	4621      	mov	r1, r4
 8008432:	4628      	mov	r0, r5
 8008434:	f000 fd08 	bl	8008e48 <_Bfree>
 8008438:	2e00      	cmp	r6, #0
 800843a:	f43f aea7 	beq.w	800818c <_dtoa_r+0x6c4>
 800843e:	f1b8 0f00 	cmp.w	r8, #0
 8008442:	d005      	beq.n	8008450 <_dtoa_r+0x988>
 8008444:	45b0      	cmp	r8, r6
 8008446:	d003      	beq.n	8008450 <_dtoa_r+0x988>
 8008448:	4641      	mov	r1, r8
 800844a:	4628      	mov	r0, r5
 800844c:	f000 fcfc 	bl	8008e48 <_Bfree>
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	f000 fcf8 	bl	8008e48 <_Bfree>
 8008458:	e698      	b.n	800818c <_dtoa_r+0x6c4>
 800845a:	2400      	movs	r4, #0
 800845c:	4626      	mov	r6, r4
 800845e:	e7e1      	b.n	8008424 <_dtoa_r+0x95c>
 8008460:	46c2      	mov	sl, r8
 8008462:	4626      	mov	r6, r4
 8008464:	e596      	b.n	8007f94 <_dtoa_r+0x4cc>
 8008466:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800846c:	2b00      	cmp	r3, #0
 800846e:	f000 80fd 	beq.w	800866c <_dtoa_r+0xba4>
 8008472:	2f00      	cmp	r7, #0
 8008474:	dd05      	ble.n	8008482 <_dtoa_r+0x9ba>
 8008476:	4631      	mov	r1, r6
 8008478:	463a      	mov	r2, r7
 800847a:	4628      	mov	r0, r5
 800847c:	f000 fefc 	bl	8009278 <__lshift>
 8008480:	4606      	mov	r6, r0
 8008482:	f1b8 0f00 	cmp.w	r8, #0
 8008486:	d05c      	beq.n	8008542 <_dtoa_r+0xa7a>
 8008488:	4628      	mov	r0, r5
 800848a:	6871      	ldr	r1, [r6, #4]
 800848c:	f000 fc9c 	bl	8008dc8 <_Balloc>
 8008490:	4607      	mov	r7, r0
 8008492:	b928      	cbnz	r0, 80084a0 <_dtoa_r+0x9d8>
 8008494:	4602      	mov	r2, r0
 8008496:	f240 21ea 	movw	r1, #746	; 0x2ea
 800849a:	4b7f      	ldr	r3, [pc, #508]	; (8008698 <_dtoa_r+0xbd0>)
 800849c:	f7ff bb28 	b.w	8007af0 <_dtoa_r+0x28>
 80084a0:	6932      	ldr	r2, [r6, #16]
 80084a2:	f106 010c 	add.w	r1, r6, #12
 80084a6:	3202      	adds	r2, #2
 80084a8:	0092      	lsls	r2, r2, #2
 80084aa:	300c      	adds	r0, #12
 80084ac:	f7fd fd48 	bl	8005f40 <memcpy>
 80084b0:	2201      	movs	r2, #1
 80084b2:	4639      	mov	r1, r7
 80084b4:	4628      	mov	r0, r5
 80084b6:	f000 fedf 	bl	8009278 <__lshift>
 80084ba:	46b0      	mov	r8, r6
 80084bc:	4606      	mov	r6, r0
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	3301      	adds	r3, #1
 80084c2:	9308      	str	r3, [sp, #32]
 80084c4:	9b03      	ldr	r3, [sp, #12]
 80084c6:	444b      	add	r3, r9
 80084c8:	930a      	str	r3, [sp, #40]	; 0x28
 80084ca:	9b04      	ldr	r3, [sp, #16]
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	9309      	str	r3, [sp, #36]	; 0x24
 80084d2:	9b08      	ldr	r3, [sp, #32]
 80084d4:	4621      	mov	r1, r4
 80084d6:	3b01      	subs	r3, #1
 80084d8:	4658      	mov	r0, fp
 80084da:	9304      	str	r3, [sp, #16]
 80084dc:	f7ff fa68 	bl	80079b0 <quorem>
 80084e0:	4603      	mov	r3, r0
 80084e2:	4641      	mov	r1, r8
 80084e4:	3330      	adds	r3, #48	; 0x30
 80084e6:	9006      	str	r0, [sp, #24]
 80084e8:	4658      	mov	r0, fp
 80084ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80084ec:	f000 ff34 	bl	8009358 <__mcmp>
 80084f0:	4632      	mov	r2, r6
 80084f2:	4681      	mov	r9, r0
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 ff4a 	bl	8009390 <__mdiff>
 80084fc:	68c2      	ldr	r2, [r0, #12]
 80084fe:	4607      	mov	r7, r0
 8008500:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008502:	bb02      	cbnz	r2, 8008546 <_dtoa_r+0xa7e>
 8008504:	4601      	mov	r1, r0
 8008506:	4658      	mov	r0, fp
 8008508:	f000 ff26 	bl	8009358 <__mcmp>
 800850c:	4602      	mov	r2, r0
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	4639      	mov	r1, r7
 8008512:	4628      	mov	r0, r5
 8008514:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008518:	f000 fc96 	bl	8008e48 <_Bfree>
 800851c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800851e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008520:	9f08      	ldr	r7, [sp, #32]
 8008522:	ea43 0102 	orr.w	r1, r3, r2
 8008526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008528:	430b      	orrs	r3, r1
 800852a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800852c:	d10d      	bne.n	800854a <_dtoa_r+0xa82>
 800852e:	2b39      	cmp	r3, #57	; 0x39
 8008530:	d029      	beq.n	8008586 <_dtoa_r+0xabe>
 8008532:	f1b9 0f00 	cmp.w	r9, #0
 8008536:	dd01      	ble.n	800853c <_dtoa_r+0xa74>
 8008538:	9b06      	ldr	r3, [sp, #24]
 800853a:	3331      	adds	r3, #49	; 0x31
 800853c:	9a04      	ldr	r2, [sp, #16]
 800853e:	7013      	strb	r3, [r2, #0]
 8008540:	e776      	b.n	8008430 <_dtoa_r+0x968>
 8008542:	4630      	mov	r0, r6
 8008544:	e7b9      	b.n	80084ba <_dtoa_r+0x9f2>
 8008546:	2201      	movs	r2, #1
 8008548:	e7e2      	b.n	8008510 <_dtoa_r+0xa48>
 800854a:	f1b9 0f00 	cmp.w	r9, #0
 800854e:	db06      	blt.n	800855e <_dtoa_r+0xa96>
 8008550:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008552:	ea41 0909 	orr.w	r9, r1, r9
 8008556:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008558:	ea59 0101 	orrs.w	r1, r9, r1
 800855c:	d120      	bne.n	80085a0 <_dtoa_r+0xad8>
 800855e:	2a00      	cmp	r2, #0
 8008560:	ddec      	ble.n	800853c <_dtoa_r+0xa74>
 8008562:	4659      	mov	r1, fp
 8008564:	2201      	movs	r2, #1
 8008566:	4628      	mov	r0, r5
 8008568:	9308      	str	r3, [sp, #32]
 800856a:	f000 fe85 	bl	8009278 <__lshift>
 800856e:	4621      	mov	r1, r4
 8008570:	4683      	mov	fp, r0
 8008572:	f000 fef1 	bl	8009358 <__mcmp>
 8008576:	2800      	cmp	r0, #0
 8008578:	9b08      	ldr	r3, [sp, #32]
 800857a:	dc02      	bgt.n	8008582 <_dtoa_r+0xaba>
 800857c:	d1de      	bne.n	800853c <_dtoa_r+0xa74>
 800857e:	07da      	lsls	r2, r3, #31
 8008580:	d5dc      	bpl.n	800853c <_dtoa_r+0xa74>
 8008582:	2b39      	cmp	r3, #57	; 0x39
 8008584:	d1d8      	bne.n	8008538 <_dtoa_r+0xa70>
 8008586:	2339      	movs	r3, #57	; 0x39
 8008588:	9a04      	ldr	r2, [sp, #16]
 800858a:	7013      	strb	r3, [r2, #0]
 800858c:	463b      	mov	r3, r7
 800858e:	461f      	mov	r7, r3
 8008590:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008594:	3b01      	subs	r3, #1
 8008596:	2a39      	cmp	r2, #57	; 0x39
 8008598:	d050      	beq.n	800863c <_dtoa_r+0xb74>
 800859a:	3201      	adds	r2, #1
 800859c:	701a      	strb	r2, [r3, #0]
 800859e:	e747      	b.n	8008430 <_dtoa_r+0x968>
 80085a0:	2a00      	cmp	r2, #0
 80085a2:	dd03      	ble.n	80085ac <_dtoa_r+0xae4>
 80085a4:	2b39      	cmp	r3, #57	; 0x39
 80085a6:	d0ee      	beq.n	8008586 <_dtoa_r+0xabe>
 80085a8:	3301      	adds	r3, #1
 80085aa:	e7c7      	b.n	800853c <_dtoa_r+0xa74>
 80085ac:	9a08      	ldr	r2, [sp, #32]
 80085ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80085b4:	428a      	cmp	r2, r1
 80085b6:	d02a      	beq.n	800860e <_dtoa_r+0xb46>
 80085b8:	4659      	mov	r1, fp
 80085ba:	2300      	movs	r3, #0
 80085bc:	220a      	movs	r2, #10
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 fc64 	bl	8008e8c <__multadd>
 80085c4:	45b0      	cmp	r8, r6
 80085c6:	4683      	mov	fp, r0
 80085c8:	f04f 0300 	mov.w	r3, #0
 80085cc:	f04f 020a 	mov.w	r2, #10
 80085d0:	4641      	mov	r1, r8
 80085d2:	4628      	mov	r0, r5
 80085d4:	d107      	bne.n	80085e6 <_dtoa_r+0xb1e>
 80085d6:	f000 fc59 	bl	8008e8c <__multadd>
 80085da:	4680      	mov	r8, r0
 80085dc:	4606      	mov	r6, r0
 80085de:	9b08      	ldr	r3, [sp, #32]
 80085e0:	3301      	adds	r3, #1
 80085e2:	9308      	str	r3, [sp, #32]
 80085e4:	e775      	b.n	80084d2 <_dtoa_r+0xa0a>
 80085e6:	f000 fc51 	bl	8008e8c <__multadd>
 80085ea:	4631      	mov	r1, r6
 80085ec:	4680      	mov	r8, r0
 80085ee:	2300      	movs	r3, #0
 80085f0:	220a      	movs	r2, #10
 80085f2:	4628      	mov	r0, r5
 80085f4:	f000 fc4a 	bl	8008e8c <__multadd>
 80085f8:	4606      	mov	r6, r0
 80085fa:	e7f0      	b.n	80085de <_dtoa_r+0xb16>
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	bfcc      	ite	gt
 8008602:	464f      	movgt	r7, r9
 8008604:	2701      	movle	r7, #1
 8008606:	f04f 0800 	mov.w	r8, #0
 800860a:	9a03      	ldr	r2, [sp, #12]
 800860c:	4417      	add	r7, r2
 800860e:	4659      	mov	r1, fp
 8008610:	2201      	movs	r2, #1
 8008612:	4628      	mov	r0, r5
 8008614:	9308      	str	r3, [sp, #32]
 8008616:	f000 fe2f 	bl	8009278 <__lshift>
 800861a:	4621      	mov	r1, r4
 800861c:	4683      	mov	fp, r0
 800861e:	f000 fe9b 	bl	8009358 <__mcmp>
 8008622:	2800      	cmp	r0, #0
 8008624:	dcb2      	bgt.n	800858c <_dtoa_r+0xac4>
 8008626:	d102      	bne.n	800862e <_dtoa_r+0xb66>
 8008628:	9b08      	ldr	r3, [sp, #32]
 800862a:	07db      	lsls	r3, r3, #31
 800862c:	d4ae      	bmi.n	800858c <_dtoa_r+0xac4>
 800862e:	463b      	mov	r3, r7
 8008630:	461f      	mov	r7, r3
 8008632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008636:	2a30      	cmp	r2, #48	; 0x30
 8008638:	d0fa      	beq.n	8008630 <_dtoa_r+0xb68>
 800863a:	e6f9      	b.n	8008430 <_dtoa_r+0x968>
 800863c:	9a03      	ldr	r2, [sp, #12]
 800863e:	429a      	cmp	r2, r3
 8008640:	d1a5      	bne.n	800858e <_dtoa_r+0xac6>
 8008642:	2331      	movs	r3, #49	; 0x31
 8008644:	f10a 0a01 	add.w	sl, sl, #1
 8008648:	e779      	b.n	800853e <_dtoa_r+0xa76>
 800864a:	4b14      	ldr	r3, [pc, #80]	; (800869c <_dtoa_r+0xbd4>)
 800864c:	f7ff baa8 	b.w	8007ba0 <_dtoa_r+0xd8>
 8008650:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008652:	2b00      	cmp	r3, #0
 8008654:	f47f aa81 	bne.w	8007b5a <_dtoa_r+0x92>
 8008658:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <_dtoa_r+0xbd8>)
 800865a:	f7ff baa1 	b.w	8007ba0 <_dtoa_r+0xd8>
 800865e:	f1b9 0f00 	cmp.w	r9, #0
 8008662:	dc03      	bgt.n	800866c <_dtoa_r+0xba4>
 8008664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008666:	2b02      	cmp	r3, #2
 8008668:	f73f aecb 	bgt.w	8008402 <_dtoa_r+0x93a>
 800866c:	9f03      	ldr	r7, [sp, #12]
 800866e:	4621      	mov	r1, r4
 8008670:	4658      	mov	r0, fp
 8008672:	f7ff f99d 	bl	80079b0 <quorem>
 8008676:	9a03      	ldr	r2, [sp, #12]
 8008678:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800867c:	f807 3b01 	strb.w	r3, [r7], #1
 8008680:	1aba      	subs	r2, r7, r2
 8008682:	4591      	cmp	r9, r2
 8008684:	ddba      	ble.n	80085fc <_dtoa_r+0xb34>
 8008686:	4659      	mov	r1, fp
 8008688:	2300      	movs	r3, #0
 800868a:	220a      	movs	r2, #10
 800868c:	4628      	mov	r0, r5
 800868e:	f000 fbfd 	bl	8008e8c <__multadd>
 8008692:	4683      	mov	fp, r0
 8008694:	e7eb      	b.n	800866e <_dtoa_r+0xba6>
 8008696:	bf00      	nop
 8008698:	0800aa88 	.word	0x0800aa88
 800869c:	0800a88c 	.word	0x0800a88c
 80086a0:	0800aa09 	.word	0x0800aa09

080086a4 <rshift>:
 80086a4:	6903      	ldr	r3, [r0, #16]
 80086a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80086ae:	f100 0414 	add.w	r4, r0, #20
 80086b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80086b6:	dd46      	ble.n	8008746 <rshift+0xa2>
 80086b8:	f011 011f 	ands.w	r1, r1, #31
 80086bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80086c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80086c4:	d10c      	bne.n	80086e0 <rshift+0x3c>
 80086c6:	4629      	mov	r1, r5
 80086c8:	f100 0710 	add.w	r7, r0, #16
 80086cc:	42b1      	cmp	r1, r6
 80086ce:	d335      	bcc.n	800873c <rshift+0x98>
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	1eea      	subs	r2, r5, #3
 80086d6:	4296      	cmp	r6, r2
 80086d8:	bf38      	it	cc
 80086da:	2300      	movcc	r3, #0
 80086dc:	4423      	add	r3, r4
 80086de:	e015      	b.n	800870c <rshift+0x68>
 80086e0:	46a1      	mov	r9, r4
 80086e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80086e6:	f1c1 0820 	rsb	r8, r1, #32
 80086ea:	40cf      	lsrs	r7, r1
 80086ec:	f105 0e04 	add.w	lr, r5, #4
 80086f0:	4576      	cmp	r6, lr
 80086f2:	46f4      	mov	ip, lr
 80086f4:	d816      	bhi.n	8008724 <rshift+0x80>
 80086f6:	1a9a      	subs	r2, r3, r2
 80086f8:	0092      	lsls	r2, r2, #2
 80086fa:	3a04      	subs	r2, #4
 80086fc:	3501      	adds	r5, #1
 80086fe:	42ae      	cmp	r6, r5
 8008700:	bf38      	it	cc
 8008702:	2200      	movcc	r2, #0
 8008704:	18a3      	adds	r3, r4, r2
 8008706:	50a7      	str	r7, [r4, r2]
 8008708:	b107      	cbz	r7, 800870c <rshift+0x68>
 800870a:	3304      	adds	r3, #4
 800870c:	42a3      	cmp	r3, r4
 800870e:	eba3 0204 	sub.w	r2, r3, r4
 8008712:	bf08      	it	eq
 8008714:	2300      	moveq	r3, #0
 8008716:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800871a:	6102      	str	r2, [r0, #16]
 800871c:	bf08      	it	eq
 800871e:	6143      	streq	r3, [r0, #20]
 8008720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008724:	f8dc c000 	ldr.w	ip, [ip]
 8008728:	fa0c fc08 	lsl.w	ip, ip, r8
 800872c:	ea4c 0707 	orr.w	r7, ip, r7
 8008730:	f849 7b04 	str.w	r7, [r9], #4
 8008734:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008738:	40cf      	lsrs	r7, r1
 800873a:	e7d9      	b.n	80086f0 <rshift+0x4c>
 800873c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008740:	f847 cf04 	str.w	ip, [r7, #4]!
 8008744:	e7c2      	b.n	80086cc <rshift+0x28>
 8008746:	4623      	mov	r3, r4
 8008748:	e7e0      	b.n	800870c <rshift+0x68>

0800874a <__hexdig_fun>:
 800874a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800874e:	2b09      	cmp	r3, #9
 8008750:	d802      	bhi.n	8008758 <__hexdig_fun+0xe>
 8008752:	3820      	subs	r0, #32
 8008754:	b2c0      	uxtb	r0, r0
 8008756:	4770      	bx	lr
 8008758:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800875c:	2b05      	cmp	r3, #5
 800875e:	d801      	bhi.n	8008764 <__hexdig_fun+0x1a>
 8008760:	3847      	subs	r0, #71	; 0x47
 8008762:	e7f7      	b.n	8008754 <__hexdig_fun+0xa>
 8008764:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008768:	2b05      	cmp	r3, #5
 800876a:	d801      	bhi.n	8008770 <__hexdig_fun+0x26>
 800876c:	3827      	subs	r0, #39	; 0x27
 800876e:	e7f1      	b.n	8008754 <__hexdig_fun+0xa>
 8008770:	2000      	movs	r0, #0
 8008772:	4770      	bx	lr

08008774 <__gethex>:
 8008774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008778:	b08b      	sub	sp, #44	; 0x2c
 800877a:	9305      	str	r3, [sp, #20]
 800877c:	4bb2      	ldr	r3, [pc, #712]	; (8008a48 <__gethex+0x2d4>)
 800877e:	9002      	str	r0, [sp, #8]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	468b      	mov	fp, r1
 8008784:	4618      	mov	r0, r3
 8008786:	4690      	mov	r8, r2
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	f7f7 fce1 	bl	8000150 <strlen>
 800878e:	4682      	mov	sl, r0
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	f8db 2000 	ldr.w	r2, [fp]
 8008796:	4403      	add	r3, r0
 8008798:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800879c:	9306      	str	r3, [sp, #24]
 800879e:	1c93      	adds	r3, r2, #2
 80087a0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80087a4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80087a8:	32fe      	adds	r2, #254	; 0xfe
 80087aa:	18d1      	adds	r1, r2, r3
 80087ac:	461f      	mov	r7, r3
 80087ae:	f813 0b01 	ldrb.w	r0, [r3], #1
 80087b2:	9101      	str	r1, [sp, #4]
 80087b4:	2830      	cmp	r0, #48	; 0x30
 80087b6:	d0f8      	beq.n	80087aa <__gethex+0x36>
 80087b8:	f7ff ffc7 	bl	800874a <__hexdig_fun>
 80087bc:	4604      	mov	r4, r0
 80087be:	2800      	cmp	r0, #0
 80087c0:	d13a      	bne.n	8008838 <__gethex+0xc4>
 80087c2:	4652      	mov	r2, sl
 80087c4:	4638      	mov	r0, r7
 80087c6:	9903      	ldr	r1, [sp, #12]
 80087c8:	f001 fa18 	bl	8009bfc <strncmp>
 80087cc:	4605      	mov	r5, r0
 80087ce:	2800      	cmp	r0, #0
 80087d0:	d166      	bne.n	80088a0 <__gethex+0x12c>
 80087d2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80087d6:	eb07 060a 	add.w	r6, r7, sl
 80087da:	f7ff ffb6 	bl	800874a <__hexdig_fun>
 80087de:	2800      	cmp	r0, #0
 80087e0:	d060      	beq.n	80088a4 <__gethex+0x130>
 80087e2:	4633      	mov	r3, r6
 80087e4:	7818      	ldrb	r0, [r3, #0]
 80087e6:	461f      	mov	r7, r3
 80087e8:	2830      	cmp	r0, #48	; 0x30
 80087ea:	f103 0301 	add.w	r3, r3, #1
 80087ee:	d0f9      	beq.n	80087e4 <__gethex+0x70>
 80087f0:	f7ff ffab 	bl	800874a <__hexdig_fun>
 80087f4:	2301      	movs	r3, #1
 80087f6:	fab0 f480 	clz	r4, r0
 80087fa:	4635      	mov	r5, r6
 80087fc:	0964      	lsrs	r4, r4, #5
 80087fe:	9301      	str	r3, [sp, #4]
 8008800:	463a      	mov	r2, r7
 8008802:	4616      	mov	r6, r2
 8008804:	7830      	ldrb	r0, [r6, #0]
 8008806:	3201      	adds	r2, #1
 8008808:	f7ff ff9f 	bl	800874a <__hexdig_fun>
 800880c:	2800      	cmp	r0, #0
 800880e:	d1f8      	bne.n	8008802 <__gethex+0x8e>
 8008810:	4652      	mov	r2, sl
 8008812:	4630      	mov	r0, r6
 8008814:	9903      	ldr	r1, [sp, #12]
 8008816:	f001 f9f1 	bl	8009bfc <strncmp>
 800881a:	b980      	cbnz	r0, 800883e <__gethex+0xca>
 800881c:	b94d      	cbnz	r5, 8008832 <__gethex+0xbe>
 800881e:	eb06 050a 	add.w	r5, r6, sl
 8008822:	462a      	mov	r2, r5
 8008824:	4616      	mov	r6, r2
 8008826:	7830      	ldrb	r0, [r6, #0]
 8008828:	3201      	adds	r2, #1
 800882a:	f7ff ff8e 	bl	800874a <__hexdig_fun>
 800882e:	2800      	cmp	r0, #0
 8008830:	d1f8      	bne.n	8008824 <__gethex+0xb0>
 8008832:	1bad      	subs	r5, r5, r6
 8008834:	00ad      	lsls	r5, r5, #2
 8008836:	e004      	b.n	8008842 <__gethex+0xce>
 8008838:	2400      	movs	r4, #0
 800883a:	4625      	mov	r5, r4
 800883c:	e7e0      	b.n	8008800 <__gethex+0x8c>
 800883e:	2d00      	cmp	r5, #0
 8008840:	d1f7      	bne.n	8008832 <__gethex+0xbe>
 8008842:	7833      	ldrb	r3, [r6, #0]
 8008844:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008848:	2b50      	cmp	r3, #80	; 0x50
 800884a:	d139      	bne.n	80088c0 <__gethex+0x14c>
 800884c:	7873      	ldrb	r3, [r6, #1]
 800884e:	2b2b      	cmp	r3, #43	; 0x2b
 8008850:	d02a      	beq.n	80088a8 <__gethex+0x134>
 8008852:	2b2d      	cmp	r3, #45	; 0x2d
 8008854:	d02c      	beq.n	80088b0 <__gethex+0x13c>
 8008856:	f04f 0900 	mov.w	r9, #0
 800885a:	1c71      	adds	r1, r6, #1
 800885c:	7808      	ldrb	r0, [r1, #0]
 800885e:	f7ff ff74 	bl	800874a <__hexdig_fun>
 8008862:	1e43      	subs	r3, r0, #1
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b18      	cmp	r3, #24
 8008868:	d82a      	bhi.n	80088c0 <__gethex+0x14c>
 800886a:	f1a0 0210 	sub.w	r2, r0, #16
 800886e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008872:	f7ff ff6a 	bl	800874a <__hexdig_fun>
 8008876:	1e43      	subs	r3, r0, #1
 8008878:	b2db      	uxtb	r3, r3
 800887a:	2b18      	cmp	r3, #24
 800887c:	d91b      	bls.n	80088b6 <__gethex+0x142>
 800887e:	f1b9 0f00 	cmp.w	r9, #0
 8008882:	d000      	beq.n	8008886 <__gethex+0x112>
 8008884:	4252      	negs	r2, r2
 8008886:	4415      	add	r5, r2
 8008888:	f8cb 1000 	str.w	r1, [fp]
 800888c:	b1d4      	cbz	r4, 80088c4 <__gethex+0x150>
 800888e:	9b01      	ldr	r3, [sp, #4]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf14      	ite	ne
 8008894:	2700      	movne	r7, #0
 8008896:	2706      	moveq	r7, #6
 8008898:	4638      	mov	r0, r7
 800889a:	b00b      	add	sp, #44	; 0x2c
 800889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a0:	463e      	mov	r6, r7
 80088a2:	4625      	mov	r5, r4
 80088a4:	2401      	movs	r4, #1
 80088a6:	e7cc      	b.n	8008842 <__gethex+0xce>
 80088a8:	f04f 0900 	mov.w	r9, #0
 80088ac:	1cb1      	adds	r1, r6, #2
 80088ae:	e7d5      	b.n	800885c <__gethex+0xe8>
 80088b0:	f04f 0901 	mov.w	r9, #1
 80088b4:	e7fa      	b.n	80088ac <__gethex+0x138>
 80088b6:	230a      	movs	r3, #10
 80088b8:	fb03 0202 	mla	r2, r3, r2, r0
 80088bc:	3a10      	subs	r2, #16
 80088be:	e7d6      	b.n	800886e <__gethex+0xfa>
 80088c0:	4631      	mov	r1, r6
 80088c2:	e7e1      	b.n	8008888 <__gethex+0x114>
 80088c4:	4621      	mov	r1, r4
 80088c6:	1bf3      	subs	r3, r6, r7
 80088c8:	3b01      	subs	r3, #1
 80088ca:	2b07      	cmp	r3, #7
 80088cc:	dc0a      	bgt.n	80088e4 <__gethex+0x170>
 80088ce:	9802      	ldr	r0, [sp, #8]
 80088d0:	f000 fa7a 	bl	8008dc8 <_Balloc>
 80088d4:	4604      	mov	r4, r0
 80088d6:	b940      	cbnz	r0, 80088ea <__gethex+0x176>
 80088d8:	4602      	mov	r2, r0
 80088da:	21de      	movs	r1, #222	; 0xde
 80088dc:	4b5b      	ldr	r3, [pc, #364]	; (8008a4c <__gethex+0x2d8>)
 80088de:	485c      	ldr	r0, [pc, #368]	; (8008a50 <__gethex+0x2dc>)
 80088e0:	f001 f9ae 	bl	8009c40 <__assert_func>
 80088e4:	3101      	adds	r1, #1
 80088e6:	105b      	asrs	r3, r3, #1
 80088e8:	e7ef      	b.n	80088ca <__gethex+0x156>
 80088ea:	f04f 0b00 	mov.w	fp, #0
 80088ee:	f100 0914 	add.w	r9, r0, #20
 80088f2:	f1ca 0301 	rsb	r3, sl, #1
 80088f6:	f8cd 9010 	str.w	r9, [sp, #16]
 80088fa:	f8cd b004 	str.w	fp, [sp, #4]
 80088fe:	9308      	str	r3, [sp, #32]
 8008900:	42b7      	cmp	r7, r6
 8008902:	d33f      	bcc.n	8008984 <__gethex+0x210>
 8008904:	9f04      	ldr	r7, [sp, #16]
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	f847 3b04 	str.w	r3, [r7], #4
 800890c:	eba7 0709 	sub.w	r7, r7, r9
 8008910:	10bf      	asrs	r7, r7, #2
 8008912:	6127      	str	r7, [r4, #16]
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fb49 	bl	8008fac <__hi0bits>
 800891a:	017f      	lsls	r7, r7, #5
 800891c:	f8d8 6000 	ldr.w	r6, [r8]
 8008920:	1a3f      	subs	r7, r7, r0
 8008922:	42b7      	cmp	r7, r6
 8008924:	dd62      	ble.n	80089ec <__gethex+0x278>
 8008926:	1bbf      	subs	r7, r7, r6
 8008928:	4639      	mov	r1, r7
 800892a:	4620      	mov	r0, r4
 800892c:	f000 fee3 	bl	80096f6 <__any_on>
 8008930:	4682      	mov	sl, r0
 8008932:	b1a8      	cbz	r0, 8008960 <__gethex+0x1ec>
 8008934:	f04f 0a01 	mov.w	sl, #1
 8008938:	1e7b      	subs	r3, r7, #1
 800893a:	1159      	asrs	r1, r3, #5
 800893c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008940:	f003 021f 	and.w	r2, r3, #31
 8008944:	fa0a f202 	lsl.w	r2, sl, r2
 8008948:	420a      	tst	r2, r1
 800894a:	d009      	beq.n	8008960 <__gethex+0x1ec>
 800894c:	4553      	cmp	r3, sl
 800894e:	dd05      	ble.n	800895c <__gethex+0x1e8>
 8008950:	4620      	mov	r0, r4
 8008952:	1eb9      	subs	r1, r7, #2
 8008954:	f000 fecf 	bl	80096f6 <__any_on>
 8008958:	2800      	cmp	r0, #0
 800895a:	d144      	bne.n	80089e6 <__gethex+0x272>
 800895c:	f04f 0a02 	mov.w	sl, #2
 8008960:	4639      	mov	r1, r7
 8008962:	4620      	mov	r0, r4
 8008964:	f7ff fe9e 	bl	80086a4 <rshift>
 8008968:	443d      	add	r5, r7
 800896a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800896e:	42ab      	cmp	r3, r5
 8008970:	da4a      	bge.n	8008a08 <__gethex+0x294>
 8008972:	4621      	mov	r1, r4
 8008974:	9802      	ldr	r0, [sp, #8]
 8008976:	f000 fa67 	bl	8008e48 <_Bfree>
 800897a:	2300      	movs	r3, #0
 800897c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800897e:	27a3      	movs	r7, #163	; 0xa3
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	e789      	b.n	8008898 <__gethex+0x124>
 8008984:	1e73      	subs	r3, r6, #1
 8008986:	9a06      	ldr	r2, [sp, #24]
 8008988:	9307      	str	r3, [sp, #28]
 800898a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800898e:	4293      	cmp	r3, r2
 8008990:	d019      	beq.n	80089c6 <__gethex+0x252>
 8008992:	f1bb 0f20 	cmp.w	fp, #32
 8008996:	d107      	bne.n	80089a8 <__gethex+0x234>
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	9a01      	ldr	r2, [sp, #4]
 800899c:	f843 2b04 	str.w	r2, [r3], #4
 80089a0:	9304      	str	r3, [sp, #16]
 80089a2:	2300      	movs	r3, #0
 80089a4:	469b      	mov	fp, r3
 80089a6:	9301      	str	r3, [sp, #4]
 80089a8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80089ac:	f7ff fecd 	bl	800874a <__hexdig_fun>
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	f000 000f 	and.w	r0, r0, #15
 80089b6:	fa00 f00b 	lsl.w	r0, r0, fp
 80089ba:	4303      	orrs	r3, r0
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	f10b 0b04 	add.w	fp, fp, #4
 80089c2:	9b07      	ldr	r3, [sp, #28]
 80089c4:	e00d      	b.n	80089e2 <__gethex+0x26e>
 80089c6:	9a08      	ldr	r2, [sp, #32]
 80089c8:	1e73      	subs	r3, r6, #1
 80089ca:	4413      	add	r3, r2
 80089cc:	42bb      	cmp	r3, r7
 80089ce:	d3e0      	bcc.n	8008992 <__gethex+0x21e>
 80089d0:	4618      	mov	r0, r3
 80089d2:	4652      	mov	r2, sl
 80089d4:	9903      	ldr	r1, [sp, #12]
 80089d6:	9309      	str	r3, [sp, #36]	; 0x24
 80089d8:	f001 f910 	bl	8009bfc <strncmp>
 80089dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089de:	2800      	cmp	r0, #0
 80089e0:	d1d7      	bne.n	8008992 <__gethex+0x21e>
 80089e2:	461e      	mov	r6, r3
 80089e4:	e78c      	b.n	8008900 <__gethex+0x18c>
 80089e6:	f04f 0a03 	mov.w	sl, #3
 80089ea:	e7b9      	b.n	8008960 <__gethex+0x1ec>
 80089ec:	da09      	bge.n	8008a02 <__gethex+0x28e>
 80089ee:	1bf7      	subs	r7, r6, r7
 80089f0:	4621      	mov	r1, r4
 80089f2:	463a      	mov	r2, r7
 80089f4:	9802      	ldr	r0, [sp, #8]
 80089f6:	f000 fc3f 	bl	8009278 <__lshift>
 80089fa:	4604      	mov	r4, r0
 80089fc:	1bed      	subs	r5, r5, r7
 80089fe:	f100 0914 	add.w	r9, r0, #20
 8008a02:	f04f 0a00 	mov.w	sl, #0
 8008a06:	e7b0      	b.n	800896a <__gethex+0x1f6>
 8008a08:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008a0c:	42a8      	cmp	r0, r5
 8008a0e:	dd72      	ble.n	8008af6 <__gethex+0x382>
 8008a10:	1b45      	subs	r5, r0, r5
 8008a12:	42ae      	cmp	r6, r5
 8008a14:	dc35      	bgt.n	8008a82 <__gethex+0x30e>
 8008a16:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d029      	beq.n	8008a72 <__gethex+0x2fe>
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d02b      	beq.n	8008a7a <__gethex+0x306>
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d11c      	bne.n	8008a60 <__gethex+0x2ec>
 8008a26:	42ae      	cmp	r6, r5
 8008a28:	d11a      	bne.n	8008a60 <__gethex+0x2ec>
 8008a2a:	2e01      	cmp	r6, #1
 8008a2c:	d112      	bne.n	8008a54 <__gethex+0x2e0>
 8008a2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008a32:	9a05      	ldr	r2, [sp, #20]
 8008a34:	2762      	movs	r7, #98	; 0x62
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	2301      	movs	r3, #1
 8008a3a:	6123      	str	r3, [r4, #16]
 8008a3c:	f8c9 3000 	str.w	r3, [r9]
 8008a40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a42:	601c      	str	r4, [r3, #0]
 8008a44:	e728      	b.n	8008898 <__gethex+0x124>
 8008a46:	bf00      	nop
 8008a48:	0800ab00 	.word	0x0800ab00
 8008a4c:	0800aa88 	.word	0x0800aa88
 8008a50:	0800aa99 	.word	0x0800aa99
 8008a54:	4620      	mov	r0, r4
 8008a56:	1e71      	subs	r1, r6, #1
 8008a58:	f000 fe4d 	bl	80096f6 <__any_on>
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	d1e6      	bne.n	8008a2e <__gethex+0x2ba>
 8008a60:	4621      	mov	r1, r4
 8008a62:	9802      	ldr	r0, [sp, #8]
 8008a64:	f000 f9f0 	bl	8008e48 <_Bfree>
 8008a68:	2300      	movs	r3, #0
 8008a6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a6c:	2750      	movs	r7, #80	; 0x50
 8008a6e:	6013      	str	r3, [r2, #0]
 8008a70:	e712      	b.n	8008898 <__gethex+0x124>
 8008a72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d1f3      	bne.n	8008a60 <__gethex+0x2ec>
 8008a78:	e7d9      	b.n	8008a2e <__gethex+0x2ba>
 8008a7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1d6      	bne.n	8008a2e <__gethex+0x2ba>
 8008a80:	e7ee      	b.n	8008a60 <__gethex+0x2ec>
 8008a82:	1e6f      	subs	r7, r5, #1
 8008a84:	f1ba 0f00 	cmp.w	sl, #0
 8008a88:	d132      	bne.n	8008af0 <__gethex+0x37c>
 8008a8a:	b127      	cbz	r7, 8008a96 <__gethex+0x322>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fe31 	bl	80096f6 <__any_on>
 8008a94:	4682      	mov	sl, r0
 8008a96:	2101      	movs	r1, #1
 8008a98:	117b      	asrs	r3, r7, #5
 8008a9a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008a9e:	f007 071f 	and.w	r7, r7, #31
 8008aa2:	fa01 f707 	lsl.w	r7, r1, r7
 8008aa6:	421f      	tst	r7, r3
 8008aa8:	f04f 0702 	mov.w	r7, #2
 8008aac:	4629      	mov	r1, r5
 8008aae:	4620      	mov	r0, r4
 8008ab0:	bf18      	it	ne
 8008ab2:	f04a 0a02 	orrne.w	sl, sl, #2
 8008ab6:	1b76      	subs	r6, r6, r5
 8008ab8:	f7ff fdf4 	bl	80086a4 <rshift>
 8008abc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008ac0:	f1ba 0f00 	cmp.w	sl, #0
 8008ac4:	d048      	beq.n	8008b58 <__gethex+0x3e4>
 8008ac6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d015      	beq.n	8008afa <__gethex+0x386>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d017      	beq.n	8008b02 <__gethex+0x38e>
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d109      	bne.n	8008aea <__gethex+0x376>
 8008ad6:	f01a 0f02 	tst.w	sl, #2
 8008ada:	d006      	beq.n	8008aea <__gethex+0x376>
 8008adc:	f8d9 0000 	ldr.w	r0, [r9]
 8008ae0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008ae4:	f01a 0f01 	tst.w	sl, #1
 8008ae8:	d10e      	bne.n	8008b08 <__gethex+0x394>
 8008aea:	f047 0710 	orr.w	r7, r7, #16
 8008aee:	e033      	b.n	8008b58 <__gethex+0x3e4>
 8008af0:	f04f 0a01 	mov.w	sl, #1
 8008af4:	e7cf      	b.n	8008a96 <__gethex+0x322>
 8008af6:	2701      	movs	r7, #1
 8008af8:	e7e2      	b.n	8008ac0 <__gethex+0x34c>
 8008afa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008afc:	f1c3 0301 	rsb	r3, r3, #1
 8008b00:	9315      	str	r3, [sp, #84]	; 0x54
 8008b02:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d0f0      	beq.n	8008aea <__gethex+0x376>
 8008b08:	f04f 0c00 	mov.w	ip, #0
 8008b0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b10:	f104 0314 	add.w	r3, r4, #20
 8008b14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b22:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b26:	d01c      	beq.n	8008b62 <__gethex+0x3ee>
 8008b28:	3201      	adds	r2, #1
 8008b2a:	6002      	str	r2, [r0, #0]
 8008b2c:	2f02      	cmp	r7, #2
 8008b2e:	f104 0314 	add.w	r3, r4, #20
 8008b32:	d13d      	bne.n	8008bb0 <__gethex+0x43c>
 8008b34:	f8d8 2000 	ldr.w	r2, [r8]
 8008b38:	3a01      	subs	r2, #1
 8008b3a:	42b2      	cmp	r2, r6
 8008b3c:	d10a      	bne.n	8008b54 <__gethex+0x3e0>
 8008b3e:	2201      	movs	r2, #1
 8008b40:	1171      	asrs	r1, r6, #5
 8008b42:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008b46:	f006 061f 	and.w	r6, r6, #31
 8008b4a:	fa02 f606 	lsl.w	r6, r2, r6
 8008b4e:	421e      	tst	r6, r3
 8008b50:	bf18      	it	ne
 8008b52:	4617      	movne	r7, r2
 8008b54:	f047 0720 	orr.w	r7, r7, #32
 8008b58:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b5a:	601c      	str	r4, [r3, #0]
 8008b5c:	9b05      	ldr	r3, [sp, #20]
 8008b5e:	601d      	str	r5, [r3, #0]
 8008b60:	e69a      	b.n	8008898 <__gethex+0x124>
 8008b62:	4299      	cmp	r1, r3
 8008b64:	f843 cc04 	str.w	ip, [r3, #-4]
 8008b68:	d8d8      	bhi.n	8008b1c <__gethex+0x3a8>
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	459b      	cmp	fp, r3
 8008b6e:	db17      	blt.n	8008ba0 <__gethex+0x42c>
 8008b70:	6861      	ldr	r1, [r4, #4]
 8008b72:	9802      	ldr	r0, [sp, #8]
 8008b74:	3101      	adds	r1, #1
 8008b76:	f000 f927 	bl	8008dc8 <_Balloc>
 8008b7a:	4681      	mov	r9, r0
 8008b7c:	b918      	cbnz	r0, 8008b86 <__gethex+0x412>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	2184      	movs	r1, #132	; 0x84
 8008b82:	4b19      	ldr	r3, [pc, #100]	; (8008be8 <__gethex+0x474>)
 8008b84:	e6ab      	b.n	80088de <__gethex+0x16a>
 8008b86:	6922      	ldr	r2, [r4, #16]
 8008b88:	f104 010c 	add.w	r1, r4, #12
 8008b8c:	3202      	adds	r2, #2
 8008b8e:	0092      	lsls	r2, r2, #2
 8008b90:	300c      	adds	r0, #12
 8008b92:	f7fd f9d5 	bl	8005f40 <memcpy>
 8008b96:	4621      	mov	r1, r4
 8008b98:	9802      	ldr	r0, [sp, #8]
 8008b9a:	f000 f955 	bl	8008e48 <_Bfree>
 8008b9e:	464c      	mov	r4, r9
 8008ba0:	6923      	ldr	r3, [r4, #16]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	6122      	str	r2, [r4, #16]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008bac:	615a      	str	r2, [r3, #20]
 8008bae:	e7bd      	b.n	8008b2c <__gethex+0x3b8>
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	455a      	cmp	r2, fp
 8008bb4:	dd0b      	ble.n	8008bce <__gethex+0x45a>
 8008bb6:	2101      	movs	r1, #1
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fd73 	bl	80086a4 <rshift>
 8008bbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008bc2:	3501      	adds	r5, #1
 8008bc4:	42ab      	cmp	r3, r5
 8008bc6:	f6ff aed4 	blt.w	8008972 <__gethex+0x1fe>
 8008bca:	2701      	movs	r7, #1
 8008bcc:	e7c2      	b.n	8008b54 <__gethex+0x3e0>
 8008bce:	f016 061f 	ands.w	r6, r6, #31
 8008bd2:	d0fa      	beq.n	8008bca <__gethex+0x456>
 8008bd4:	4453      	add	r3, sl
 8008bd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008bda:	f000 f9e7 	bl	8008fac <__hi0bits>
 8008bde:	f1c6 0620 	rsb	r6, r6, #32
 8008be2:	42b0      	cmp	r0, r6
 8008be4:	dbe7      	blt.n	8008bb6 <__gethex+0x442>
 8008be6:	e7f0      	b.n	8008bca <__gethex+0x456>
 8008be8:	0800aa88 	.word	0x0800aa88

08008bec <L_shift>:
 8008bec:	f1c2 0208 	rsb	r2, r2, #8
 8008bf0:	0092      	lsls	r2, r2, #2
 8008bf2:	b570      	push	{r4, r5, r6, lr}
 8008bf4:	f1c2 0620 	rsb	r6, r2, #32
 8008bf8:	6843      	ldr	r3, [r0, #4]
 8008bfa:	6804      	ldr	r4, [r0, #0]
 8008bfc:	fa03 f506 	lsl.w	r5, r3, r6
 8008c00:	432c      	orrs	r4, r5
 8008c02:	40d3      	lsrs	r3, r2
 8008c04:	6004      	str	r4, [r0, #0]
 8008c06:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c0a:	4288      	cmp	r0, r1
 8008c0c:	d3f4      	bcc.n	8008bf8 <L_shift+0xc>
 8008c0e:	bd70      	pop	{r4, r5, r6, pc}

08008c10 <__match>:
 8008c10:	b530      	push	{r4, r5, lr}
 8008c12:	6803      	ldr	r3, [r0, #0]
 8008c14:	3301      	adds	r3, #1
 8008c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c1a:	b914      	cbnz	r4, 8008c22 <__match+0x12>
 8008c1c:	6003      	str	r3, [r0, #0]
 8008c1e:	2001      	movs	r0, #1
 8008c20:	bd30      	pop	{r4, r5, pc}
 8008c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c2a:	2d19      	cmp	r5, #25
 8008c2c:	bf98      	it	ls
 8008c2e:	3220      	addls	r2, #32
 8008c30:	42a2      	cmp	r2, r4
 8008c32:	d0f0      	beq.n	8008c16 <__match+0x6>
 8008c34:	2000      	movs	r0, #0
 8008c36:	e7f3      	b.n	8008c20 <__match+0x10>

08008c38 <__hexnan>:
 8008c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3c:	2500      	movs	r5, #0
 8008c3e:	680b      	ldr	r3, [r1, #0]
 8008c40:	4682      	mov	sl, r0
 8008c42:	115e      	asrs	r6, r3, #5
 8008c44:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008c48:	f013 031f 	ands.w	r3, r3, #31
 8008c4c:	bf18      	it	ne
 8008c4e:	3604      	addne	r6, #4
 8008c50:	1f37      	subs	r7, r6, #4
 8008c52:	46b9      	mov	r9, r7
 8008c54:	463c      	mov	r4, r7
 8008c56:	46ab      	mov	fp, r5
 8008c58:	b087      	sub	sp, #28
 8008c5a:	4690      	mov	r8, r2
 8008c5c:	6802      	ldr	r2, [r0, #0]
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f846 5c04 	str.w	r5, [r6, #-4]
 8008c64:	9502      	str	r5, [sp, #8]
 8008c66:	7851      	ldrb	r1, [r2, #1]
 8008c68:	1c53      	adds	r3, r2, #1
 8008c6a:	9303      	str	r3, [sp, #12]
 8008c6c:	b341      	cbz	r1, 8008cc0 <__hexnan+0x88>
 8008c6e:	4608      	mov	r0, r1
 8008c70:	9205      	str	r2, [sp, #20]
 8008c72:	9104      	str	r1, [sp, #16]
 8008c74:	f7ff fd69 	bl	800874a <__hexdig_fun>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d14f      	bne.n	8008d1c <__hexnan+0xe4>
 8008c7c:	9904      	ldr	r1, [sp, #16]
 8008c7e:	9a05      	ldr	r2, [sp, #20]
 8008c80:	2920      	cmp	r1, #32
 8008c82:	d818      	bhi.n	8008cb6 <__hexnan+0x7e>
 8008c84:	9b02      	ldr	r3, [sp, #8]
 8008c86:	459b      	cmp	fp, r3
 8008c88:	dd13      	ble.n	8008cb2 <__hexnan+0x7a>
 8008c8a:	454c      	cmp	r4, r9
 8008c8c:	d206      	bcs.n	8008c9c <__hexnan+0x64>
 8008c8e:	2d07      	cmp	r5, #7
 8008c90:	dc04      	bgt.n	8008c9c <__hexnan+0x64>
 8008c92:	462a      	mov	r2, r5
 8008c94:	4649      	mov	r1, r9
 8008c96:	4620      	mov	r0, r4
 8008c98:	f7ff ffa8 	bl	8008bec <L_shift>
 8008c9c:	4544      	cmp	r4, r8
 8008c9e:	d950      	bls.n	8008d42 <__hexnan+0x10a>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f1a4 0904 	sub.w	r9, r4, #4
 8008ca6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008caa:	461d      	mov	r5, r3
 8008cac:	464c      	mov	r4, r9
 8008cae:	f8cd b008 	str.w	fp, [sp, #8]
 8008cb2:	9a03      	ldr	r2, [sp, #12]
 8008cb4:	e7d7      	b.n	8008c66 <__hexnan+0x2e>
 8008cb6:	2929      	cmp	r1, #41	; 0x29
 8008cb8:	d156      	bne.n	8008d68 <__hexnan+0x130>
 8008cba:	3202      	adds	r2, #2
 8008cbc:	f8ca 2000 	str.w	r2, [sl]
 8008cc0:	f1bb 0f00 	cmp.w	fp, #0
 8008cc4:	d050      	beq.n	8008d68 <__hexnan+0x130>
 8008cc6:	454c      	cmp	r4, r9
 8008cc8:	d206      	bcs.n	8008cd8 <__hexnan+0xa0>
 8008cca:	2d07      	cmp	r5, #7
 8008ccc:	dc04      	bgt.n	8008cd8 <__hexnan+0xa0>
 8008cce:	462a      	mov	r2, r5
 8008cd0:	4649      	mov	r1, r9
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f7ff ff8a 	bl	8008bec <L_shift>
 8008cd8:	4544      	cmp	r4, r8
 8008cda:	d934      	bls.n	8008d46 <__hexnan+0x10e>
 8008cdc:	4623      	mov	r3, r4
 8008cde:	f1a8 0204 	sub.w	r2, r8, #4
 8008ce2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ce6:	429f      	cmp	r7, r3
 8008ce8:	f842 1f04 	str.w	r1, [r2, #4]!
 8008cec:	d2f9      	bcs.n	8008ce2 <__hexnan+0xaa>
 8008cee:	1b3b      	subs	r3, r7, r4
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	3401      	adds	r4, #1
 8008cf8:	3e03      	subs	r6, #3
 8008cfa:	42b4      	cmp	r4, r6
 8008cfc:	bf88      	it	hi
 8008cfe:	2304      	movhi	r3, #4
 8008d00:	2200      	movs	r2, #0
 8008d02:	4443      	add	r3, r8
 8008d04:	f843 2b04 	str.w	r2, [r3], #4
 8008d08:	429f      	cmp	r7, r3
 8008d0a:	d2fb      	bcs.n	8008d04 <__hexnan+0xcc>
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	b91b      	cbnz	r3, 8008d18 <__hexnan+0xe0>
 8008d10:	4547      	cmp	r7, r8
 8008d12:	d127      	bne.n	8008d64 <__hexnan+0x12c>
 8008d14:	2301      	movs	r3, #1
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	2005      	movs	r0, #5
 8008d1a:	e026      	b.n	8008d6a <__hexnan+0x132>
 8008d1c:	3501      	adds	r5, #1
 8008d1e:	2d08      	cmp	r5, #8
 8008d20:	f10b 0b01 	add.w	fp, fp, #1
 8008d24:	dd06      	ble.n	8008d34 <__hexnan+0xfc>
 8008d26:	4544      	cmp	r4, r8
 8008d28:	d9c3      	bls.n	8008cb2 <__hexnan+0x7a>
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	2501      	movs	r5, #1
 8008d2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d32:	3c04      	subs	r4, #4
 8008d34:	6822      	ldr	r2, [r4, #0]
 8008d36:	f000 000f 	and.w	r0, r0, #15
 8008d3a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008d3e:	6022      	str	r2, [r4, #0]
 8008d40:	e7b7      	b.n	8008cb2 <__hexnan+0x7a>
 8008d42:	2508      	movs	r5, #8
 8008d44:	e7b5      	b.n	8008cb2 <__hexnan+0x7a>
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d0df      	beq.n	8008d0c <__hexnan+0xd4>
 8008d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d50:	f1c3 0320 	rsb	r3, r3, #32
 8008d54:	fa22 f303 	lsr.w	r3, r2, r3
 8008d58:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d5c:	401a      	ands	r2, r3
 8008d5e:	f846 2c04 	str.w	r2, [r6, #-4]
 8008d62:	e7d3      	b.n	8008d0c <__hexnan+0xd4>
 8008d64:	3f04      	subs	r7, #4
 8008d66:	e7d1      	b.n	8008d0c <__hexnan+0xd4>
 8008d68:	2004      	movs	r0, #4
 8008d6a:	b007      	add	sp, #28
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d70 <_localeconv_r>:
 8008d70:	4800      	ldr	r0, [pc, #0]	; (8008d74 <_localeconv_r+0x4>)
 8008d72:	4770      	bx	lr
 8008d74:	20000168 	.word	0x20000168

08008d78 <malloc>:
 8008d78:	4b02      	ldr	r3, [pc, #8]	; (8008d84 <malloc+0xc>)
 8008d7a:	4601      	mov	r1, r0
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	f000 bd57 	b.w	8009830 <_malloc_r>
 8008d82:	bf00      	nop
 8008d84:	20000010 	.word	0x20000010

08008d88 <__ascii_mbtowc>:
 8008d88:	b082      	sub	sp, #8
 8008d8a:	b901      	cbnz	r1, 8008d8e <__ascii_mbtowc+0x6>
 8008d8c:	a901      	add	r1, sp, #4
 8008d8e:	b142      	cbz	r2, 8008da2 <__ascii_mbtowc+0x1a>
 8008d90:	b14b      	cbz	r3, 8008da6 <__ascii_mbtowc+0x1e>
 8008d92:	7813      	ldrb	r3, [r2, #0]
 8008d94:	600b      	str	r3, [r1, #0]
 8008d96:	7812      	ldrb	r2, [r2, #0]
 8008d98:	1e10      	subs	r0, r2, #0
 8008d9a:	bf18      	it	ne
 8008d9c:	2001      	movne	r0, #1
 8008d9e:	b002      	add	sp, #8
 8008da0:	4770      	bx	lr
 8008da2:	4610      	mov	r0, r2
 8008da4:	e7fb      	b.n	8008d9e <__ascii_mbtowc+0x16>
 8008da6:	f06f 0001 	mvn.w	r0, #1
 8008daa:	e7f8      	b.n	8008d9e <__ascii_mbtowc+0x16>

08008dac <memchr>:
 8008dac:	4603      	mov	r3, r0
 8008dae:	b510      	push	{r4, lr}
 8008db0:	b2c9      	uxtb	r1, r1
 8008db2:	4402      	add	r2, r0
 8008db4:	4293      	cmp	r3, r2
 8008db6:	4618      	mov	r0, r3
 8008db8:	d101      	bne.n	8008dbe <memchr+0x12>
 8008dba:	2000      	movs	r0, #0
 8008dbc:	e003      	b.n	8008dc6 <memchr+0x1a>
 8008dbe:	7804      	ldrb	r4, [r0, #0]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	428c      	cmp	r4, r1
 8008dc4:	d1f6      	bne.n	8008db4 <memchr+0x8>
 8008dc6:	bd10      	pop	{r4, pc}

08008dc8 <_Balloc>:
 8008dc8:	b570      	push	{r4, r5, r6, lr}
 8008dca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008dcc:	4604      	mov	r4, r0
 8008dce:	460d      	mov	r5, r1
 8008dd0:	b976      	cbnz	r6, 8008df0 <_Balloc+0x28>
 8008dd2:	2010      	movs	r0, #16
 8008dd4:	f7ff ffd0 	bl	8008d78 <malloc>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	6260      	str	r0, [r4, #36]	; 0x24
 8008ddc:	b920      	cbnz	r0, 8008de8 <_Balloc+0x20>
 8008dde:	2166      	movs	r1, #102	; 0x66
 8008de0:	4b17      	ldr	r3, [pc, #92]	; (8008e40 <_Balloc+0x78>)
 8008de2:	4818      	ldr	r0, [pc, #96]	; (8008e44 <_Balloc+0x7c>)
 8008de4:	f000 ff2c 	bl	8009c40 <__assert_func>
 8008de8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dec:	6006      	str	r6, [r0, #0]
 8008dee:	60c6      	str	r6, [r0, #12]
 8008df0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008df2:	68f3      	ldr	r3, [r6, #12]
 8008df4:	b183      	cbz	r3, 8008e18 <_Balloc+0x50>
 8008df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008dfe:	b9b8      	cbnz	r0, 8008e30 <_Balloc+0x68>
 8008e00:	2101      	movs	r1, #1
 8008e02:	fa01 f605 	lsl.w	r6, r1, r5
 8008e06:	1d72      	adds	r2, r6, #5
 8008e08:	4620      	mov	r0, r4
 8008e0a:	0092      	lsls	r2, r2, #2
 8008e0c:	f000 fc94 	bl	8009738 <_calloc_r>
 8008e10:	b160      	cbz	r0, 8008e2c <_Balloc+0x64>
 8008e12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e16:	e00e      	b.n	8008e36 <_Balloc+0x6e>
 8008e18:	2221      	movs	r2, #33	; 0x21
 8008e1a:	2104      	movs	r1, #4
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f000 fc8b 	bl	8009738 <_calloc_r>
 8008e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e24:	60f0      	str	r0, [r6, #12]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d1e4      	bne.n	8008df6 <_Balloc+0x2e>
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	6802      	ldr	r2, [r0, #0]
 8008e32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e36:	2300      	movs	r3, #0
 8008e38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e3c:	e7f7      	b.n	8008e2e <_Balloc+0x66>
 8008e3e:	bf00      	nop
 8008e40:	0800aa16 	.word	0x0800aa16
 8008e44:	0800ab14 	.word	0x0800ab14

08008e48 <_Bfree>:
 8008e48:	b570      	push	{r4, r5, r6, lr}
 8008e4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008e4c:	4605      	mov	r5, r0
 8008e4e:	460c      	mov	r4, r1
 8008e50:	b976      	cbnz	r6, 8008e70 <_Bfree+0x28>
 8008e52:	2010      	movs	r0, #16
 8008e54:	f7ff ff90 	bl	8008d78 <malloc>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	6268      	str	r0, [r5, #36]	; 0x24
 8008e5c:	b920      	cbnz	r0, 8008e68 <_Bfree+0x20>
 8008e5e:	218a      	movs	r1, #138	; 0x8a
 8008e60:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <_Bfree+0x3c>)
 8008e62:	4809      	ldr	r0, [pc, #36]	; (8008e88 <_Bfree+0x40>)
 8008e64:	f000 feec 	bl	8009c40 <__assert_func>
 8008e68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e6c:	6006      	str	r6, [r0, #0]
 8008e6e:	60c6      	str	r6, [r0, #12]
 8008e70:	b13c      	cbz	r4, 8008e82 <_Bfree+0x3a>
 8008e72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008e74:	6862      	ldr	r2, [r4, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008e7c:	6021      	str	r1, [r4, #0]
 8008e7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008e82:	bd70      	pop	{r4, r5, r6, pc}
 8008e84:	0800aa16 	.word	0x0800aa16
 8008e88:	0800ab14 	.word	0x0800ab14

08008e8c <__multadd>:
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	4607      	mov	r7, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	461e      	mov	r6, r3
 8008e96:	2000      	movs	r0, #0
 8008e98:	690d      	ldr	r5, [r1, #16]
 8008e9a:	f101 0c14 	add.w	ip, r1, #20
 8008e9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	b299      	uxth	r1, r3
 8008ea6:	fb02 6101 	mla	r1, r2, r1, r6
 8008eaa:	0c1e      	lsrs	r6, r3, #16
 8008eac:	0c0b      	lsrs	r3, r1, #16
 8008eae:	fb02 3306 	mla	r3, r2, r6, r3
 8008eb2:	b289      	uxth	r1, r1
 8008eb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008eb8:	4285      	cmp	r5, r0
 8008eba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ebe:	f84c 1b04 	str.w	r1, [ip], #4
 8008ec2:	dcec      	bgt.n	8008e9e <__multadd+0x12>
 8008ec4:	b30e      	cbz	r6, 8008f0a <__multadd+0x7e>
 8008ec6:	68a3      	ldr	r3, [r4, #8]
 8008ec8:	42ab      	cmp	r3, r5
 8008eca:	dc19      	bgt.n	8008f00 <__multadd+0x74>
 8008ecc:	6861      	ldr	r1, [r4, #4]
 8008ece:	4638      	mov	r0, r7
 8008ed0:	3101      	adds	r1, #1
 8008ed2:	f7ff ff79 	bl	8008dc8 <_Balloc>
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	b928      	cbnz	r0, 8008ee6 <__multadd+0x5a>
 8008eda:	4602      	mov	r2, r0
 8008edc:	21b5      	movs	r1, #181	; 0xb5
 8008ede:	4b0c      	ldr	r3, [pc, #48]	; (8008f10 <__multadd+0x84>)
 8008ee0:	480c      	ldr	r0, [pc, #48]	; (8008f14 <__multadd+0x88>)
 8008ee2:	f000 fead 	bl	8009c40 <__assert_func>
 8008ee6:	6922      	ldr	r2, [r4, #16]
 8008ee8:	f104 010c 	add.w	r1, r4, #12
 8008eec:	3202      	adds	r2, #2
 8008eee:	0092      	lsls	r2, r2, #2
 8008ef0:	300c      	adds	r0, #12
 8008ef2:	f7fd f825 	bl	8005f40 <memcpy>
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff ffa5 	bl	8008e48 <_Bfree>
 8008efe:	4644      	mov	r4, r8
 8008f00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f04:	3501      	adds	r5, #1
 8008f06:	615e      	str	r6, [r3, #20]
 8008f08:	6125      	str	r5, [r4, #16]
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f10:	0800aa88 	.word	0x0800aa88
 8008f14:	0800ab14 	.word	0x0800ab14

08008f18 <__s2b>:
 8008f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f1c:	4615      	mov	r5, r2
 8008f1e:	2209      	movs	r2, #9
 8008f20:	461f      	mov	r7, r3
 8008f22:	3308      	adds	r3, #8
 8008f24:	460c      	mov	r4, r1
 8008f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	2100      	movs	r1, #0
 8008f30:	429a      	cmp	r2, r3
 8008f32:	db09      	blt.n	8008f48 <__s2b+0x30>
 8008f34:	4630      	mov	r0, r6
 8008f36:	f7ff ff47 	bl	8008dc8 <_Balloc>
 8008f3a:	b940      	cbnz	r0, 8008f4e <__s2b+0x36>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	21ce      	movs	r1, #206	; 0xce
 8008f40:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <__s2b+0x8c>)
 8008f42:	4819      	ldr	r0, [pc, #100]	; (8008fa8 <__s2b+0x90>)
 8008f44:	f000 fe7c 	bl	8009c40 <__assert_func>
 8008f48:	0052      	lsls	r2, r2, #1
 8008f4a:	3101      	adds	r1, #1
 8008f4c:	e7f0      	b.n	8008f30 <__s2b+0x18>
 8008f4e:	9b08      	ldr	r3, [sp, #32]
 8008f50:	2d09      	cmp	r5, #9
 8008f52:	6143      	str	r3, [r0, #20]
 8008f54:	f04f 0301 	mov.w	r3, #1
 8008f58:	6103      	str	r3, [r0, #16]
 8008f5a:	dd16      	ble.n	8008f8a <__s2b+0x72>
 8008f5c:	f104 0909 	add.w	r9, r4, #9
 8008f60:	46c8      	mov	r8, r9
 8008f62:	442c      	add	r4, r5
 8008f64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008f68:	4601      	mov	r1, r0
 8008f6a:	220a      	movs	r2, #10
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	3b30      	subs	r3, #48	; 0x30
 8008f70:	f7ff ff8c 	bl	8008e8c <__multadd>
 8008f74:	45a0      	cmp	r8, r4
 8008f76:	d1f5      	bne.n	8008f64 <__s2b+0x4c>
 8008f78:	f1a5 0408 	sub.w	r4, r5, #8
 8008f7c:	444c      	add	r4, r9
 8008f7e:	1b2d      	subs	r5, r5, r4
 8008f80:	1963      	adds	r3, r4, r5
 8008f82:	42bb      	cmp	r3, r7
 8008f84:	db04      	blt.n	8008f90 <__s2b+0x78>
 8008f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f8a:	2509      	movs	r5, #9
 8008f8c:	340a      	adds	r4, #10
 8008f8e:	e7f6      	b.n	8008f7e <__s2b+0x66>
 8008f90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008f94:	4601      	mov	r1, r0
 8008f96:	220a      	movs	r2, #10
 8008f98:	4630      	mov	r0, r6
 8008f9a:	3b30      	subs	r3, #48	; 0x30
 8008f9c:	f7ff ff76 	bl	8008e8c <__multadd>
 8008fa0:	e7ee      	b.n	8008f80 <__s2b+0x68>
 8008fa2:	bf00      	nop
 8008fa4:	0800aa88 	.word	0x0800aa88
 8008fa8:	0800ab14 	.word	0x0800ab14

08008fac <__hi0bits>:
 8008fac:	0c02      	lsrs	r2, r0, #16
 8008fae:	0412      	lsls	r2, r2, #16
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	b9ca      	cbnz	r2, 8008fe8 <__hi0bits+0x3c>
 8008fb4:	0403      	lsls	r3, r0, #16
 8008fb6:	2010      	movs	r0, #16
 8008fb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008fbc:	bf04      	itt	eq
 8008fbe:	021b      	lsleq	r3, r3, #8
 8008fc0:	3008      	addeq	r0, #8
 8008fc2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008fc6:	bf04      	itt	eq
 8008fc8:	011b      	lsleq	r3, r3, #4
 8008fca:	3004      	addeq	r0, #4
 8008fcc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008fd0:	bf04      	itt	eq
 8008fd2:	009b      	lsleq	r3, r3, #2
 8008fd4:	3002      	addeq	r0, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	db05      	blt.n	8008fe6 <__hi0bits+0x3a>
 8008fda:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008fde:	f100 0001 	add.w	r0, r0, #1
 8008fe2:	bf08      	it	eq
 8008fe4:	2020      	moveq	r0, #32
 8008fe6:	4770      	bx	lr
 8008fe8:	2000      	movs	r0, #0
 8008fea:	e7e5      	b.n	8008fb8 <__hi0bits+0xc>

08008fec <__lo0bits>:
 8008fec:	6803      	ldr	r3, [r0, #0]
 8008fee:	4602      	mov	r2, r0
 8008ff0:	f013 0007 	ands.w	r0, r3, #7
 8008ff4:	d00b      	beq.n	800900e <__lo0bits+0x22>
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d421      	bmi.n	800903e <__lo0bits+0x52>
 8008ffa:	0798      	lsls	r0, r3, #30
 8008ffc:	bf49      	itett	mi
 8008ffe:	085b      	lsrmi	r3, r3, #1
 8009000:	089b      	lsrpl	r3, r3, #2
 8009002:	2001      	movmi	r0, #1
 8009004:	6013      	strmi	r3, [r2, #0]
 8009006:	bf5c      	itt	pl
 8009008:	2002      	movpl	r0, #2
 800900a:	6013      	strpl	r3, [r2, #0]
 800900c:	4770      	bx	lr
 800900e:	b299      	uxth	r1, r3
 8009010:	b909      	cbnz	r1, 8009016 <__lo0bits+0x2a>
 8009012:	2010      	movs	r0, #16
 8009014:	0c1b      	lsrs	r3, r3, #16
 8009016:	b2d9      	uxtb	r1, r3
 8009018:	b909      	cbnz	r1, 800901e <__lo0bits+0x32>
 800901a:	3008      	adds	r0, #8
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	0719      	lsls	r1, r3, #28
 8009020:	bf04      	itt	eq
 8009022:	091b      	lsreq	r3, r3, #4
 8009024:	3004      	addeq	r0, #4
 8009026:	0799      	lsls	r1, r3, #30
 8009028:	bf04      	itt	eq
 800902a:	089b      	lsreq	r3, r3, #2
 800902c:	3002      	addeq	r0, #2
 800902e:	07d9      	lsls	r1, r3, #31
 8009030:	d403      	bmi.n	800903a <__lo0bits+0x4e>
 8009032:	085b      	lsrs	r3, r3, #1
 8009034:	f100 0001 	add.w	r0, r0, #1
 8009038:	d003      	beq.n	8009042 <__lo0bits+0x56>
 800903a:	6013      	str	r3, [r2, #0]
 800903c:	4770      	bx	lr
 800903e:	2000      	movs	r0, #0
 8009040:	4770      	bx	lr
 8009042:	2020      	movs	r0, #32
 8009044:	4770      	bx	lr
	...

08009048 <__i2b>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	2101      	movs	r1, #1
 800904e:	f7ff febb 	bl	8008dc8 <_Balloc>
 8009052:	4602      	mov	r2, r0
 8009054:	b928      	cbnz	r0, 8009062 <__i2b+0x1a>
 8009056:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800905a:	4b04      	ldr	r3, [pc, #16]	; (800906c <__i2b+0x24>)
 800905c:	4804      	ldr	r0, [pc, #16]	; (8009070 <__i2b+0x28>)
 800905e:	f000 fdef 	bl	8009c40 <__assert_func>
 8009062:	2301      	movs	r3, #1
 8009064:	6144      	str	r4, [r0, #20]
 8009066:	6103      	str	r3, [r0, #16]
 8009068:	bd10      	pop	{r4, pc}
 800906a:	bf00      	nop
 800906c:	0800aa88 	.word	0x0800aa88
 8009070:	0800ab14 	.word	0x0800ab14

08009074 <__multiply>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	4691      	mov	r9, r2
 800907a:	690a      	ldr	r2, [r1, #16]
 800907c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009080:	460c      	mov	r4, r1
 8009082:	429a      	cmp	r2, r3
 8009084:	bfbe      	ittt	lt
 8009086:	460b      	movlt	r3, r1
 8009088:	464c      	movlt	r4, r9
 800908a:	4699      	movlt	r9, r3
 800908c:	6927      	ldr	r7, [r4, #16]
 800908e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	eb07 060a 	add.w	r6, r7, sl
 800909a:	42b3      	cmp	r3, r6
 800909c:	b085      	sub	sp, #20
 800909e:	bfb8      	it	lt
 80090a0:	3101      	addlt	r1, #1
 80090a2:	f7ff fe91 	bl	8008dc8 <_Balloc>
 80090a6:	b930      	cbnz	r0, 80090b6 <__multiply+0x42>
 80090a8:	4602      	mov	r2, r0
 80090aa:	f240 115d 	movw	r1, #349	; 0x15d
 80090ae:	4b43      	ldr	r3, [pc, #268]	; (80091bc <__multiply+0x148>)
 80090b0:	4843      	ldr	r0, [pc, #268]	; (80091c0 <__multiply+0x14c>)
 80090b2:	f000 fdc5 	bl	8009c40 <__assert_func>
 80090b6:	f100 0514 	add.w	r5, r0, #20
 80090ba:	462b      	mov	r3, r5
 80090bc:	2200      	movs	r2, #0
 80090be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80090c2:	4543      	cmp	r3, r8
 80090c4:	d321      	bcc.n	800910a <__multiply+0x96>
 80090c6:	f104 0314 	add.w	r3, r4, #20
 80090ca:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80090ce:	f109 0314 	add.w	r3, r9, #20
 80090d2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80090d6:	9202      	str	r2, [sp, #8]
 80090d8:	1b3a      	subs	r2, r7, r4
 80090da:	3a15      	subs	r2, #21
 80090dc:	f022 0203 	bic.w	r2, r2, #3
 80090e0:	3204      	adds	r2, #4
 80090e2:	f104 0115 	add.w	r1, r4, #21
 80090e6:	428f      	cmp	r7, r1
 80090e8:	bf38      	it	cc
 80090ea:	2204      	movcc	r2, #4
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9a02      	ldr	r2, [sp, #8]
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d80c      	bhi.n	8009110 <__multiply+0x9c>
 80090f6:	2e00      	cmp	r6, #0
 80090f8:	dd03      	ble.n	8009102 <__multiply+0x8e>
 80090fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d059      	beq.n	80091b6 <__multiply+0x142>
 8009102:	6106      	str	r6, [r0, #16]
 8009104:	b005      	add	sp, #20
 8009106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910a:	f843 2b04 	str.w	r2, [r3], #4
 800910e:	e7d8      	b.n	80090c2 <__multiply+0x4e>
 8009110:	f8b3 a000 	ldrh.w	sl, [r3]
 8009114:	f1ba 0f00 	cmp.w	sl, #0
 8009118:	d023      	beq.n	8009162 <__multiply+0xee>
 800911a:	46a9      	mov	r9, r5
 800911c:	f04f 0c00 	mov.w	ip, #0
 8009120:	f104 0e14 	add.w	lr, r4, #20
 8009124:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009128:	f8d9 1000 	ldr.w	r1, [r9]
 800912c:	fa1f fb82 	uxth.w	fp, r2
 8009130:	b289      	uxth	r1, r1
 8009132:	fb0a 110b 	mla	r1, sl, fp, r1
 8009136:	4461      	add	r1, ip
 8009138:	f8d9 c000 	ldr.w	ip, [r9]
 800913c:	0c12      	lsrs	r2, r2, #16
 800913e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009142:	fb0a c202 	mla	r2, sl, r2, ip
 8009146:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800914a:	b289      	uxth	r1, r1
 800914c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009150:	4577      	cmp	r7, lr
 8009152:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009156:	f849 1b04 	str.w	r1, [r9], #4
 800915a:	d8e3      	bhi.n	8009124 <__multiply+0xb0>
 800915c:	9a01      	ldr	r2, [sp, #4]
 800915e:	f845 c002 	str.w	ip, [r5, r2]
 8009162:	9a03      	ldr	r2, [sp, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800916a:	f1b9 0f00 	cmp.w	r9, #0
 800916e:	d020      	beq.n	80091b2 <__multiply+0x13e>
 8009170:	46ae      	mov	lr, r5
 8009172:	f04f 0a00 	mov.w	sl, #0
 8009176:	6829      	ldr	r1, [r5, #0]
 8009178:	f104 0c14 	add.w	ip, r4, #20
 800917c:	f8bc b000 	ldrh.w	fp, [ip]
 8009180:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009184:	b289      	uxth	r1, r1
 8009186:	fb09 220b 	mla	r2, r9, fp, r2
 800918a:	4492      	add	sl, r2
 800918c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009190:	f84e 1b04 	str.w	r1, [lr], #4
 8009194:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009198:	f8be 1000 	ldrh.w	r1, [lr]
 800919c:	0c12      	lsrs	r2, r2, #16
 800919e:	fb09 1102 	mla	r1, r9, r2, r1
 80091a2:	4567      	cmp	r7, ip
 80091a4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80091a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80091ac:	d8e6      	bhi.n	800917c <__multiply+0x108>
 80091ae:	9a01      	ldr	r2, [sp, #4]
 80091b0:	50a9      	str	r1, [r5, r2]
 80091b2:	3504      	adds	r5, #4
 80091b4:	e79b      	b.n	80090ee <__multiply+0x7a>
 80091b6:	3e01      	subs	r6, #1
 80091b8:	e79d      	b.n	80090f6 <__multiply+0x82>
 80091ba:	bf00      	nop
 80091bc:	0800aa88 	.word	0x0800aa88
 80091c0:	0800ab14 	.word	0x0800ab14

080091c4 <__pow5mult>:
 80091c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c8:	4615      	mov	r5, r2
 80091ca:	f012 0203 	ands.w	r2, r2, #3
 80091ce:	4606      	mov	r6, r0
 80091d0:	460f      	mov	r7, r1
 80091d2:	d007      	beq.n	80091e4 <__pow5mult+0x20>
 80091d4:	4c25      	ldr	r4, [pc, #148]	; (800926c <__pow5mult+0xa8>)
 80091d6:	3a01      	subs	r2, #1
 80091d8:	2300      	movs	r3, #0
 80091da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091de:	f7ff fe55 	bl	8008e8c <__multadd>
 80091e2:	4607      	mov	r7, r0
 80091e4:	10ad      	asrs	r5, r5, #2
 80091e6:	d03d      	beq.n	8009264 <__pow5mult+0xa0>
 80091e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091ea:	b97c      	cbnz	r4, 800920c <__pow5mult+0x48>
 80091ec:	2010      	movs	r0, #16
 80091ee:	f7ff fdc3 	bl	8008d78 <malloc>
 80091f2:	4602      	mov	r2, r0
 80091f4:	6270      	str	r0, [r6, #36]	; 0x24
 80091f6:	b928      	cbnz	r0, 8009204 <__pow5mult+0x40>
 80091f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80091fc:	4b1c      	ldr	r3, [pc, #112]	; (8009270 <__pow5mult+0xac>)
 80091fe:	481d      	ldr	r0, [pc, #116]	; (8009274 <__pow5mult+0xb0>)
 8009200:	f000 fd1e 	bl	8009c40 <__assert_func>
 8009204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009208:	6004      	str	r4, [r0, #0]
 800920a:	60c4      	str	r4, [r0, #12]
 800920c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009210:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009214:	b94c      	cbnz	r4, 800922a <__pow5mult+0x66>
 8009216:	f240 2171 	movw	r1, #625	; 0x271
 800921a:	4630      	mov	r0, r6
 800921c:	f7ff ff14 	bl	8009048 <__i2b>
 8009220:	2300      	movs	r3, #0
 8009222:	4604      	mov	r4, r0
 8009224:	f8c8 0008 	str.w	r0, [r8, #8]
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	f04f 0900 	mov.w	r9, #0
 800922e:	07eb      	lsls	r3, r5, #31
 8009230:	d50a      	bpl.n	8009248 <__pow5mult+0x84>
 8009232:	4639      	mov	r1, r7
 8009234:	4622      	mov	r2, r4
 8009236:	4630      	mov	r0, r6
 8009238:	f7ff ff1c 	bl	8009074 <__multiply>
 800923c:	4680      	mov	r8, r0
 800923e:	4639      	mov	r1, r7
 8009240:	4630      	mov	r0, r6
 8009242:	f7ff fe01 	bl	8008e48 <_Bfree>
 8009246:	4647      	mov	r7, r8
 8009248:	106d      	asrs	r5, r5, #1
 800924a:	d00b      	beq.n	8009264 <__pow5mult+0xa0>
 800924c:	6820      	ldr	r0, [r4, #0]
 800924e:	b938      	cbnz	r0, 8009260 <__pow5mult+0x9c>
 8009250:	4622      	mov	r2, r4
 8009252:	4621      	mov	r1, r4
 8009254:	4630      	mov	r0, r6
 8009256:	f7ff ff0d 	bl	8009074 <__multiply>
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	f8c0 9000 	str.w	r9, [r0]
 8009260:	4604      	mov	r4, r0
 8009262:	e7e4      	b.n	800922e <__pow5mult+0x6a>
 8009264:	4638      	mov	r0, r7
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800926a:	bf00      	nop
 800926c:	0800ac60 	.word	0x0800ac60
 8009270:	0800aa16 	.word	0x0800aa16
 8009274:	0800ab14 	.word	0x0800ab14

08009278 <__lshift>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	4607      	mov	r7, r0
 8009280:	4691      	mov	r9, r2
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	6849      	ldr	r1, [r1, #4]
 8009286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800928a:	68a3      	ldr	r3, [r4, #8]
 800928c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009290:	f108 0601 	add.w	r6, r8, #1
 8009294:	42b3      	cmp	r3, r6
 8009296:	db0b      	blt.n	80092b0 <__lshift+0x38>
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff fd95 	bl	8008dc8 <_Balloc>
 800929e:	4605      	mov	r5, r0
 80092a0:	b948      	cbnz	r0, 80092b6 <__lshift+0x3e>
 80092a2:	4602      	mov	r2, r0
 80092a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80092a8:	4b29      	ldr	r3, [pc, #164]	; (8009350 <__lshift+0xd8>)
 80092aa:	482a      	ldr	r0, [pc, #168]	; (8009354 <__lshift+0xdc>)
 80092ac:	f000 fcc8 	bl	8009c40 <__assert_func>
 80092b0:	3101      	adds	r1, #1
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	e7ee      	b.n	8009294 <__lshift+0x1c>
 80092b6:	2300      	movs	r3, #0
 80092b8:	f100 0114 	add.w	r1, r0, #20
 80092bc:	f100 0210 	add.w	r2, r0, #16
 80092c0:	4618      	mov	r0, r3
 80092c2:	4553      	cmp	r3, sl
 80092c4:	db37      	blt.n	8009336 <__lshift+0xbe>
 80092c6:	6920      	ldr	r0, [r4, #16]
 80092c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80092cc:	f104 0314 	add.w	r3, r4, #20
 80092d0:	f019 091f 	ands.w	r9, r9, #31
 80092d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80092dc:	d02f      	beq.n	800933e <__lshift+0xc6>
 80092de:	468a      	mov	sl, r1
 80092e0:	f04f 0c00 	mov.w	ip, #0
 80092e4:	f1c9 0e20 	rsb	lr, r9, #32
 80092e8:	681a      	ldr	r2, [r3, #0]
 80092ea:	fa02 f209 	lsl.w	r2, r2, r9
 80092ee:	ea42 020c 	orr.w	r2, r2, ip
 80092f2:	f84a 2b04 	str.w	r2, [sl], #4
 80092f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092fa:	4298      	cmp	r0, r3
 80092fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009300:	d8f2      	bhi.n	80092e8 <__lshift+0x70>
 8009302:	1b03      	subs	r3, r0, r4
 8009304:	3b15      	subs	r3, #21
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	3304      	adds	r3, #4
 800930c:	f104 0215 	add.w	r2, r4, #21
 8009310:	4290      	cmp	r0, r2
 8009312:	bf38      	it	cc
 8009314:	2304      	movcc	r3, #4
 8009316:	f841 c003 	str.w	ip, [r1, r3]
 800931a:	f1bc 0f00 	cmp.w	ip, #0
 800931e:	d001      	beq.n	8009324 <__lshift+0xac>
 8009320:	f108 0602 	add.w	r6, r8, #2
 8009324:	3e01      	subs	r6, #1
 8009326:	4638      	mov	r0, r7
 8009328:	4621      	mov	r1, r4
 800932a:	612e      	str	r6, [r5, #16]
 800932c:	f7ff fd8c 	bl	8008e48 <_Bfree>
 8009330:	4628      	mov	r0, r5
 8009332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009336:	f842 0f04 	str.w	r0, [r2, #4]!
 800933a:	3301      	adds	r3, #1
 800933c:	e7c1      	b.n	80092c2 <__lshift+0x4a>
 800933e:	3904      	subs	r1, #4
 8009340:	f853 2b04 	ldr.w	r2, [r3], #4
 8009344:	4298      	cmp	r0, r3
 8009346:	f841 2f04 	str.w	r2, [r1, #4]!
 800934a:	d8f9      	bhi.n	8009340 <__lshift+0xc8>
 800934c:	e7ea      	b.n	8009324 <__lshift+0xac>
 800934e:	bf00      	nop
 8009350:	0800aa88 	.word	0x0800aa88
 8009354:	0800ab14 	.word	0x0800ab14

08009358 <__mcmp>:
 8009358:	4603      	mov	r3, r0
 800935a:	690a      	ldr	r2, [r1, #16]
 800935c:	6900      	ldr	r0, [r0, #16]
 800935e:	b530      	push	{r4, r5, lr}
 8009360:	1a80      	subs	r0, r0, r2
 8009362:	d10d      	bne.n	8009380 <__mcmp+0x28>
 8009364:	3314      	adds	r3, #20
 8009366:	3114      	adds	r1, #20
 8009368:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800936c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009370:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009374:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009378:	4295      	cmp	r5, r2
 800937a:	d002      	beq.n	8009382 <__mcmp+0x2a>
 800937c:	d304      	bcc.n	8009388 <__mcmp+0x30>
 800937e:	2001      	movs	r0, #1
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	42a3      	cmp	r3, r4
 8009384:	d3f4      	bcc.n	8009370 <__mcmp+0x18>
 8009386:	e7fb      	b.n	8009380 <__mcmp+0x28>
 8009388:	f04f 30ff 	mov.w	r0, #4294967295
 800938c:	e7f8      	b.n	8009380 <__mcmp+0x28>
	...

08009390 <__mdiff>:
 8009390:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009394:	460d      	mov	r5, r1
 8009396:	4607      	mov	r7, r0
 8009398:	4611      	mov	r1, r2
 800939a:	4628      	mov	r0, r5
 800939c:	4614      	mov	r4, r2
 800939e:	f7ff ffdb 	bl	8009358 <__mcmp>
 80093a2:	1e06      	subs	r6, r0, #0
 80093a4:	d111      	bne.n	80093ca <__mdiff+0x3a>
 80093a6:	4631      	mov	r1, r6
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff fd0d 	bl	8008dc8 <_Balloc>
 80093ae:	4602      	mov	r2, r0
 80093b0:	b928      	cbnz	r0, 80093be <__mdiff+0x2e>
 80093b2:	f240 2132 	movw	r1, #562	; 0x232
 80093b6:	4b3a      	ldr	r3, [pc, #232]	; (80094a0 <__mdiff+0x110>)
 80093b8:	483a      	ldr	r0, [pc, #232]	; (80094a4 <__mdiff+0x114>)
 80093ba:	f000 fc41 	bl	8009c40 <__assert_func>
 80093be:	2301      	movs	r3, #1
 80093c0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80093c4:	4610      	mov	r0, r2
 80093c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ca:	bfa4      	itt	ge
 80093cc:	4623      	movge	r3, r4
 80093ce:	462c      	movge	r4, r5
 80093d0:	4638      	mov	r0, r7
 80093d2:	6861      	ldr	r1, [r4, #4]
 80093d4:	bfa6      	itte	ge
 80093d6:	461d      	movge	r5, r3
 80093d8:	2600      	movge	r6, #0
 80093da:	2601      	movlt	r6, #1
 80093dc:	f7ff fcf4 	bl	8008dc8 <_Balloc>
 80093e0:	4602      	mov	r2, r0
 80093e2:	b918      	cbnz	r0, 80093ec <__mdiff+0x5c>
 80093e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80093e8:	4b2d      	ldr	r3, [pc, #180]	; (80094a0 <__mdiff+0x110>)
 80093ea:	e7e5      	b.n	80093b8 <__mdiff+0x28>
 80093ec:	f102 0814 	add.w	r8, r2, #20
 80093f0:	46c2      	mov	sl, r8
 80093f2:	f04f 0c00 	mov.w	ip, #0
 80093f6:	6927      	ldr	r7, [r4, #16]
 80093f8:	60c6      	str	r6, [r0, #12]
 80093fa:	692e      	ldr	r6, [r5, #16]
 80093fc:	f104 0014 	add.w	r0, r4, #20
 8009400:	f105 0914 	add.w	r9, r5, #20
 8009404:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800940c:	3410      	adds	r4, #16
 800940e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009412:	f859 3b04 	ldr.w	r3, [r9], #4
 8009416:	fa1f f18b 	uxth.w	r1, fp
 800941a:	448c      	add	ip, r1
 800941c:	b299      	uxth	r1, r3
 800941e:	0c1b      	lsrs	r3, r3, #16
 8009420:	ebac 0101 	sub.w	r1, ip, r1
 8009424:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009428:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800942c:	b289      	uxth	r1, r1
 800942e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009432:	454e      	cmp	r6, r9
 8009434:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009438:	f84a 3b04 	str.w	r3, [sl], #4
 800943c:	d8e7      	bhi.n	800940e <__mdiff+0x7e>
 800943e:	1b73      	subs	r3, r6, r5
 8009440:	3b15      	subs	r3, #21
 8009442:	f023 0303 	bic.w	r3, r3, #3
 8009446:	3515      	adds	r5, #21
 8009448:	3304      	adds	r3, #4
 800944a:	42ae      	cmp	r6, r5
 800944c:	bf38      	it	cc
 800944e:	2304      	movcc	r3, #4
 8009450:	4418      	add	r0, r3
 8009452:	4443      	add	r3, r8
 8009454:	461e      	mov	r6, r3
 8009456:	4605      	mov	r5, r0
 8009458:	4575      	cmp	r5, lr
 800945a:	d30e      	bcc.n	800947a <__mdiff+0xea>
 800945c:	f10e 0103 	add.w	r1, lr, #3
 8009460:	1a09      	subs	r1, r1, r0
 8009462:	f021 0103 	bic.w	r1, r1, #3
 8009466:	3803      	subs	r0, #3
 8009468:	4586      	cmp	lr, r0
 800946a:	bf38      	it	cc
 800946c:	2100      	movcc	r1, #0
 800946e:	4419      	add	r1, r3
 8009470:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009474:	b18b      	cbz	r3, 800949a <__mdiff+0x10a>
 8009476:	6117      	str	r7, [r2, #16]
 8009478:	e7a4      	b.n	80093c4 <__mdiff+0x34>
 800947a:	f855 8b04 	ldr.w	r8, [r5], #4
 800947e:	fa1f f188 	uxth.w	r1, r8
 8009482:	4461      	add	r1, ip
 8009484:	140c      	asrs	r4, r1, #16
 8009486:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800948a:	b289      	uxth	r1, r1
 800948c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009490:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009494:	f846 1b04 	str.w	r1, [r6], #4
 8009498:	e7de      	b.n	8009458 <__mdiff+0xc8>
 800949a:	3f01      	subs	r7, #1
 800949c:	e7e8      	b.n	8009470 <__mdiff+0xe0>
 800949e:	bf00      	nop
 80094a0:	0800aa88 	.word	0x0800aa88
 80094a4:	0800ab14 	.word	0x0800ab14

080094a8 <__ulp>:
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <__ulp+0x48>)
 80094aa:	400b      	ands	r3, r1
 80094ac:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	dd02      	ble.n	80094ba <__ulp+0x12>
 80094b4:	2000      	movs	r0, #0
 80094b6:	4619      	mov	r1, r3
 80094b8:	4770      	bx	lr
 80094ba:	425b      	negs	r3, r3
 80094bc:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80094c0:	f04f 0000 	mov.w	r0, #0
 80094c4:	f04f 0100 	mov.w	r1, #0
 80094c8:	ea4f 5223 	mov.w	r2, r3, asr #20
 80094cc:	da04      	bge.n	80094d8 <__ulp+0x30>
 80094ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80094d2:	fa43 f102 	asr.w	r1, r3, r2
 80094d6:	4770      	bx	lr
 80094d8:	f1a2 0314 	sub.w	r3, r2, #20
 80094dc:	2b1e      	cmp	r3, #30
 80094de:	bfd6      	itet	le
 80094e0:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80094e4:	2301      	movgt	r3, #1
 80094e6:	fa22 f303 	lsrle.w	r3, r2, r3
 80094ea:	4618      	mov	r0, r3
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	7ff00000 	.word	0x7ff00000

080094f4 <__b2d>:
 80094f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f8:	6907      	ldr	r7, [r0, #16]
 80094fa:	f100 0914 	add.w	r9, r0, #20
 80094fe:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009502:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009506:	f1a7 0804 	sub.w	r8, r7, #4
 800950a:	4630      	mov	r0, r6
 800950c:	f7ff fd4e 	bl	8008fac <__hi0bits>
 8009510:	f1c0 0320 	rsb	r3, r0, #32
 8009514:	280a      	cmp	r0, #10
 8009516:	600b      	str	r3, [r1, #0]
 8009518:	491f      	ldr	r1, [pc, #124]	; (8009598 <__b2d+0xa4>)
 800951a:	dc17      	bgt.n	800954c <__b2d+0x58>
 800951c:	45c1      	cmp	r9, r8
 800951e:	bf28      	it	cs
 8009520:	2200      	movcs	r2, #0
 8009522:	f1c0 0c0b 	rsb	ip, r0, #11
 8009526:	fa26 f30c 	lsr.w	r3, r6, ip
 800952a:	bf38      	it	cc
 800952c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009530:	ea43 0501 	orr.w	r5, r3, r1
 8009534:	f100 0315 	add.w	r3, r0, #21
 8009538:	fa06 f303 	lsl.w	r3, r6, r3
 800953c:	fa22 f20c 	lsr.w	r2, r2, ip
 8009540:	ea43 0402 	orr.w	r4, r3, r2
 8009544:	4620      	mov	r0, r4
 8009546:	4629      	mov	r1, r5
 8009548:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800954c:	45c1      	cmp	r9, r8
 800954e:	bf2e      	itee	cs
 8009550:	2200      	movcs	r2, #0
 8009552:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009556:	f1a7 0808 	subcc.w	r8, r7, #8
 800955a:	f1b0 030b 	subs.w	r3, r0, #11
 800955e:	d016      	beq.n	800958e <__b2d+0x9a>
 8009560:	f1c3 0720 	rsb	r7, r3, #32
 8009564:	fa22 f107 	lsr.w	r1, r2, r7
 8009568:	45c8      	cmp	r8, r9
 800956a:	fa06 f603 	lsl.w	r6, r6, r3
 800956e:	ea46 0601 	orr.w	r6, r6, r1
 8009572:	bf94      	ite	ls
 8009574:	2100      	movls	r1, #0
 8009576:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800957a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800957e:	fa02 f003 	lsl.w	r0, r2, r3
 8009582:	40f9      	lsrs	r1, r7
 8009584:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009588:	ea40 0401 	orr.w	r4, r0, r1
 800958c:	e7da      	b.n	8009544 <__b2d+0x50>
 800958e:	4614      	mov	r4, r2
 8009590:	ea46 0501 	orr.w	r5, r6, r1
 8009594:	e7d6      	b.n	8009544 <__b2d+0x50>
 8009596:	bf00      	nop
 8009598:	3ff00000 	.word	0x3ff00000

0800959c <__d2b>:
 800959c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80095a0:	2101      	movs	r1, #1
 80095a2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80095a6:	4690      	mov	r8, r2
 80095a8:	461d      	mov	r5, r3
 80095aa:	f7ff fc0d 	bl	8008dc8 <_Balloc>
 80095ae:	4604      	mov	r4, r0
 80095b0:	b930      	cbnz	r0, 80095c0 <__d2b+0x24>
 80095b2:	4602      	mov	r2, r0
 80095b4:	f240 310a 	movw	r1, #778	; 0x30a
 80095b8:	4b24      	ldr	r3, [pc, #144]	; (800964c <__d2b+0xb0>)
 80095ba:	4825      	ldr	r0, [pc, #148]	; (8009650 <__d2b+0xb4>)
 80095bc:	f000 fb40 	bl	8009c40 <__assert_func>
 80095c0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80095c4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80095c8:	bb2d      	cbnz	r5, 8009616 <__d2b+0x7a>
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	f1b8 0300 	subs.w	r3, r8, #0
 80095d0:	d026      	beq.n	8009620 <__d2b+0x84>
 80095d2:	4668      	mov	r0, sp
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	f7ff fd09 	bl	8008fec <__lo0bits>
 80095da:	9900      	ldr	r1, [sp, #0]
 80095dc:	b1f0      	cbz	r0, 800961c <__d2b+0x80>
 80095de:	9a01      	ldr	r2, [sp, #4]
 80095e0:	f1c0 0320 	rsb	r3, r0, #32
 80095e4:	fa02 f303 	lsl.w	r3, r2, r3
 80095e8:	430b      	orrs	r3, r1
 80095ea:	40c2      	lsrs	r2, r0
 80095ec:	6163      	str	r3, [r4, #20]
 80095ee:	9201      	str	r2, [sp, #4]
 80095f0:	9b01      	ldr	r3, [sp, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	bf14      	ite	ne
 80095f6:	2102      	movne	r1, #2
 80095f8:	2101      	moveq	r1, #1
 80095fa:	61a3      	str	r3, [r4, #24]
 80095fc:	6121      	str	r1, [r4, #16]
 80095fe:	b1c5      	cbz	r5, 8009632 <__d2b+0x96>
 8009600:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009604:	4405      	add	r5, r0
 8009606:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800960a:	603d      	str	r5, [r7, #0]
 800960c:	6030      	str	r0, [r6, #0]
 800960e:	4620      	mov	r0, r4
 8009610:	b002      	add	sp, #8
 8009612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800961a:	e7d6      	b.n	80095ca <__d2b+0x2e>
 800961c:	6161      	str	r1, [r4, #20]
 800961e:	e7e7      	b.n	80095f0 <__d2b+0x54>
 8009620:	a801      	add	r0, sp, #4
 8009622:	f7ff fce3 	bl	8008fec <__lo0bits>
 8009626:	2101      	movs	r1, #1
 8009628:	9b01      	ldr	r3, [sp, #4]
 800962a:	6121      	str	r1, [r4, #16]
 800962c:	6163      	str	r3, [r4, #20]
 800962e:	3020      	adds	r0, #32
 8009630:	e7e5      	b.n	80095fe <__d2b+0x62>
 8009632:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009636:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800963a:	6038      	str	r0, [r7, #0]
 800963c:	6918      	ldr	r0, [r3, #16]
 800963e:	f7ff fcb5 	bl	8008fac <__hi0bits>
 8009642:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009646:	6031      	str	r1, [r6, #0]
 8009648:	e7e1      	b.n	800960e <__d2b+0x72>
 800964a:	bf00      	nop
 800964c:	0800aa88 	.word	0x0800aa88
 8009650:	0800ab14 	.word	0x0800ab14

08009654 <__ratio>:
 8009654:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009658:	4688      	mov	r8, r1
 800965a:	4669      	mov	r1, sp
 800965c:	4681      	mov	r9, r0
 800965e:	f7ff ff49 	bl	80094f4 <__b2d>
 8009662:	460f      	mov	r7, r1
 8009664:	4604      	mov	r4, r0
 8009666:	460d      	mov	r5, r1
 8009668:	4640      	mov	r0, r8
 800966a:	a901      	add	r1, sp, #4
 800966c:	f7ff ff42 	bl	80094f4 <__b2d>
 8009670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009674:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009678:	468b      	mov	fp, r1
 800967a:	eba3 0c02 	sub.w	ip, r3, r2
 800967e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009688:	2b00      	cmp	r3, #0
 800968a:	bfd5      	itete	le
 800968c:	460a      	movle	r2, r1
 800968e:	462a      	movgt	r2, r5
 8009690:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009694:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009698:	bfd8      	it	le
 800969a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800969e:	465b      	mov	r3, fp
 80096a0:	4602      	mov	r2, r0
 80096a2:	4639      	mov	r1, r7
 80096a4:	4620      	mov	r0, r4
 80096a6:	f7f7 f841 	bl	800072c <__aeabi_ddiv>
 80096aa:	b003      	add	sp, #12
 80096ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096b0 <__copybits>:
 80096b0:	3901      	subs	r1, #1
 80096b2:	b570      	push	{r4, r5, r6, lr}
 80096b4:	1149      	asrs	r1, r1, #5
 80096b6:	6914      	ldr	r4, [r2, #16]
 80096b8:	3101      	adds	r1, #1
 80096ba:	f102 0314 	add.w	r3, r2, #20
 80096be:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80096c2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80096c6:	1f05      	subs	r5, r0, #4
 80096c8:	42a3      	cmp	r3, r4
 80096ca:	d30c      	bcc.n	80096e6 <__copybits+0x36>
 80096cc:	1aa3      	subs	r3, r4, r2
 80096ce:	3b11      	subs	r3, #17
 80096d0:	f023 0303 	bic.w	r3, r3, #3
 80096d4:	3211      	adds	r2, #17
 80096d6:	42a2      	cmp	r2, r4
 80096d8:	bf88      	it	hi
 80096da:	2300      	movhi	r3, #0
 80096dc:	4418      	add	r0, r3
 80096de:	2300      	movs	r3, #0
 80096e0:	4288      	cmp	r0, r1
 80096e2:	d305      	bcc.n	80096f0 <__copybits+0x40>
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	f853 6b04 	ldr.w	r6, [r3], #4
 80096ea:	f845 6f04 	str.w	r6, [r5, #4]!
 80096ee:	e7eb      	b.n	80096c8 <__copybits+0x18>
 80096f0:	f840 3b04 	str.w	r3, [r0], #4
 80096f4:	e7f4      	b.n	80096e0 <__copybits+0x30>

080096f6 <__any_on>:
 80096f6:	f100 0214 	add.w	r2, r0, #20
 80096fa:	6900      	ldr	r0, [r0, #16]
 80096fc:	114b      	asrs	r3, r1, #5
 80096fe:	4298      	cmp	r0, r3
 8009700:	b510      	push	{r4, lr}
 8009702:	db11      	blt.n	8009728 <__any_on+0x32>
 8009704:	dd0a      	ble.n	800971c <__any_on+0x26>
 8009706:	f011 011f 	ands.w	r1, r1, #31
 800970a:	d007      	beq.n	800971c <__any_on+0x26>
 800970c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009710:	fa24 f001 	lsr.w	r0, r4, r1
 8009714:	fa00 f101 	lsl.w	r1, r0, r1
 8009718:	428c      	cmp	r4, r1
 800971a:	d10b      	bne.n	8009734 <__any_on+0x3e>
 800971c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009720:	4293      	cmp	r3, r2
 8009722:	d803      	bhi.n	800972c <__any_on+0x36>
 8009724:	2000      	movs	r0, #0
 8009726:	bd10      	pop	{r4, pc}
 8009728:	4603      	mov	r3, r0
 800972a:	e7f7      	b.n	800971c <__any_on+0x26>
 800972c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009730:	2900      	cmp	r1, #0
 8009732:	d0f5      	beq.n	8009720 <__any_on+0x2a>
 8009734:	2001      	movs	r0, #1
 8009736:	e7f6      	b.n	8009726 <__any_on+0x30>

08009738 <_calloc_r>:
 8009738:	b570      	push	{r4, r5, r6, lr}
 800973a:	fba1 5402 	umull	r5, r4, r1, r2
 800973e:	b934      	cbnz	r4, 800974e <_calloc_r+0x16>
 8009740:	4629      	mov	r1, r5
 8009742:	f000 f875 	bl	8009830 <_malloc_r>
 8009746:	4606      	mov	r6, r0
 8009748:	b928      	cbnz	r0, 8009756 <_calloc_r+0x1e>
 800974a:	4630      	mov	r0, r6
 800974c:	bd70      	pop	{r4, r5, r6, pc}
 800974e:	220c      	movs	r2, #12
 8009750:	2600      	movs	r6, #0
 8009752:	6002      	str	r2, [r0, #0]
 8009754:	e7f9      	b.n	800974a <_calloc_r+0x12>
 8009756:	462a      	mov	r2, r5
 8009758:	4621      	mov	r1, r4
 800975a:	f7fc fbff 	bl	8005f5c <memset>
 800975e:	e7f4      	b.n	800974a <_calloc_r+0x12>

08009760 <_free_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4605      	mov	r5, r0
 8009764:	2900      	cmp	r1, #0
 8009766:	d040      	beq.n	80097ea <_free_r+0x8a>
 8009768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800976c:	1f0c      	subs	r4, r1, #4
 800976e:	2b00      	cmp	r3, #0
 8009770:	bfb8      	it	lt
 8009772:	18e4      	addlt	r4, r4, r3
 8009774:	f000 faae 	bl	8009cd4 <__malloc_lock>
 8009778:	4a1c      	ldr	r2, [pc, #112]	; (80097ec <_free_r+0x8c>)
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	b933      	cbnz	r3, 800978c <_free_r+0x2c>
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	6014      	str	r4, [r2, #0]
 8009782:	4628      	mov	r0, r5
 8009784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009788:	f000 baaa 	b.w	8009ce0 <__malloc_unlock>
 800978c:	42a3      	cmp	r3, r4
 800978e:	d908      	bls.n	80097a2 <_free_r+0x42>
 8009790:	6820      	ldr	r0, [r4, #0]
 8009792:	1821      	adds	r1, r4, r0
 8009794:	428b      	cmp	r3, r1
 8009796:	bf01      	itttt	eq
 8009798:	6819      	ldreq	r1, [r3, #0]
 800979a:	685b      	ldreq	r3, [r3, #4]
 800979c:	1809      	addeq	r1, r1, r0
 800979e:	6021      	streq	r1, [r4, #0]
 80097a0:	e7ed      	b.n	800977e <_free_r+0x1e>
 80097a2:	461a      	mov	r2, r3
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	b10b      	cbz	r3, 80097ac <_free_r+0x4c>
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d9fa      	bls.n	80097a2 <_free_r+0x42>
 80097ac:	6811      	ldr	r1, [r2, #0]
 80097ae:	1850      	adds	r0, r2, r1
 80097b0:	42a0      	cmp	r0, r4
 80097b2:	d10b      	bne.n	80097cc <_free_r+0x6c>
 80097b4:	6820      	ldr	r0, [r4, #0]
 80097b6:	4401      	add	r1, r0
 80097b8:	1850      	adds	r0, r2, r1
 80097ba:	4283      	cmp	r3, r0
 80097bc:	6011      	str	r1, [r2, #0]
 80097be:	d1e0      	bne.n	8009782 <_free_r+0x22>
 80097c0:	6818      	ldr	r0, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	4401      	add	r1, r0
 80097c6:	6011      	str	r1, [r2, #0]
 80097c8:	6053      	str	r3, [r2, #4]
 80097ca:	e7da      	b.n	8009782 <_free_r+0x22>
 80097cc:	d902      	bls.n	80097d4 <_free_r+0x74>
 80097ce:	230c      	movs	r3, #12
 80097d0:	602b      	str	r3, [r5, #0]
 80097d2:	e7d6      	b.n	8009782 <_free_r+0x22>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	1821      	adds	r1, r4, r0
 80097d8:	428b      	cmp	r3, r1
 80097da:	bf01      	itttt	eq
 80097dc:	6819      	ldreq	r1, [r3, #0]
 80097de:	685b      	ldreq	r3, [r3, #4]
 80097e0:	1809      	addeq	r1, r1, r0
 80097e2:	6021      	streq	r1, [r4, #0]
 80097e4:	6063      	str	r3, [r4, #4]
 80097e6:	6054      	str	r4, [r2, #4]
 80097e8:	e7cb      	b.n	8009782 <_free_r+0x22>
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20001c14 	.word	0x20001c14

080097f0 <sbrk_aligned>:
 80097f0:	b570      	push	{r4, r5, r6, lr}
 80097f2:	4e0e      	ldr	r6, [pc, #56]	; (800982c <sbrk_aligned+0x3c>)
 80097f4:	460c      	mov	r4, r1
 80097f6:	6831      	ldr	r1, [r6, #0]
 80097f8:	4605      	mov	r5, r0
 80097fa:	b911      	cbnz	r1, 8009802 <sbrk_aligned+0x12>
 80097fc:	f000 f9ee 	bl	8009bdc <_sbrk_r>
 8009800:	6030      	str	r0, [r6, #0]
 8009802:	4621      	mov	r1, r4
 8009804:	4628      	mov	r0, r5
 8009806:	f000 f9e9 	bl	8009bdc <_sbrk_r>
 800980a:	1c43      	adds	r3, r0, #1
 800980c:	d00a      	beq.n	8009824 <sbrk_aligned+0x34>
 800980e:	1cc4      	adds	r4, r0, #3
 8009810:	f024 0403 	bic.w	r4, r4, #3
 8009814:	42a0      	cmp	r0, r4
 8009816:	d007      	beq.n	8009828 <sbrk_aligned+0x38>
 8009818:	1a21      	subs	r1, r4, r0
 800981a:	4628      	mov	r0, r5
 800981c:	f000 f9de 	bl	8009bdc <_sbrk_r>
 8009820:	3001      	adds	r0, #1
 8009822:	d101      	bne.n	8009828 <sbrk_aligned+0x38>
 8009824:	f04f 34ff 	mov.w	r4, #4294967295
 8009828:	4620      	mov	r0, r4
 800982a:	bd70      	pop	{r4, r5, r6, pc}
 800982c:	20001c18 	.word	0x20001c18

08009830 <_malloc_r>:
 8009830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009834:	1ccd      	adds	r5, r1, #3
 8009836:	f025 0503 	bic.w	r5, r5, #3
 800983a:	3508      	adds	r5, #8
 800983c:	2d0c      	cmp	r5, #12
 800983e:	bf38      	it	cc
 8009840:	250c      	movcc	r5, #12
 8009842:	2d00      	cmp	r5, #0
 8009844:	4607      	mov	r7, r0
 8009846:	db01      	blt.n	800984c <_malloc_r+0x1c>
 8009848:	42a9      	cmp	r1, r5
 800984a:	d905      	bls.n	8009858 <_malloc_r+0x28>
 800984c:	230c      	movs	r3, #12
 800984e:	2600      	movs	r6, #0
 8009850:	603b      	str	r3, [r7, #0]
 8009852:	4630      	mov	r0, r6
 8009854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009858:	4e2e      	ldr	r6, [pc, #184]	; (8009914 <_malloc_r+0xe4>)
 800985a:	f000 fa3b 	bl	8009cd4 <__malloc_lock>
 800985e:	6833      	ldr	r3, [r6, #0]
 8009860:	461c      	mov	r4, r3
 8009862:	bb34      	cbnz	r4, 80098b2 <_malloc_r+0x82>
 8009864:	4629      	mov	r1, r5
 8009866:	4638      	mov	r0, r7
 8009868:	f7ff ffc2 	bl	80097f0 <sbrk_aligned>
 800986c:	1c43      	adds	r3, r0, #1
 800986e:	4604      	mov	r4, r0
 8009870:	d14d      	bne.n	800990e <_malloc_r+0xde>
 8009872:	6834      	ldr	r4, [r6, #0]
 8009874:	4626      	mov	r6, r4
 8009876:	2e00      	cmp	r6, #0
 8009878:	d140      	bne.n	80098fc <_malloc_r+0xcc>
 800987a:	6823      	ldr	r3, [r4, #0]
 800987c:	4631      	mov	r1, r6
 800987e:	4638      	mov	r0, r7
 8009880:	eb04 0803 	add.w	r8, r4, r3
 8009884:	f000 f9aa 	bl	8009bdc <_sbrk_r>
 8009888:	4580      	cmp	r8, r0
 800988a:	d13a      	bne.n	8009902 <_malloc_r+0xd2>
 800988c:	6821      	ldr	r1, [r4, #0]
 800988e:	3503      	adds	r5, #3
 8009890:	1a6d      	subs	r5, r5, r1
 8009892:	f025 0503 	bic.w	r5, r5, #3
 8009896:	3508      	adds	r5, #8
 8009898:	2d0c      	cmp	r5, #12
 800989a:	bf38      	it	cc
 800989c:	250c      	movcc	r5, #12
 800989e:	4638      	mov	r0, r7
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7ff ffa5 	bl	80097f0 <sbrk_aligned>
 80098a6:	3001      	adds	r0, #1
 80098a8:	d02b      	beq.n	8009902 <_malloc_r+0xd2>
 80098aa:	6823      	ldr	r3, [r4, #0]
 80098ac:	442b      	add	r3, r5
 80098ae:	6023      	str	r3, [r4, #0]
 80098b0:	e00e      	b.n	80098d0 <_malloc_r+0xa0>
 80098b2:	6822      	ldr	r2, [r4, #0]
 80098b4:	1b52      	subs	r2, r2, r5
 80098b6:	d41e      	bmi.n	80098f6 <_malloc_r+0xc6>
 80098b8:	2a0b      	cmp	r2, #11
 80098ba:	d916      	bls.n	80098ea <_malloc_r+0xba>
 80098bc:	1961      	adds	r1, r4, r5
 80098be:	42a3      	cmp	r3, r4
 80098c0:	6025      	str	r5, [r4, #0]
 80098c2:	bf18      	it	ne
 80098c4:	6059      	strne	r1, [r3, #4]
 80098c6:	6863      	ldr	r3, [r4, #4]
 80098c8:	bf08      	it	eq
 80098ca:	6031      	streq	r1, [r6, #0]
 80098cc:	5162      	str	r2, [r4, r5]
 80098ce:	604b      	str	r3, [r1, #4]
 80098d0:	4638      	mov	r0, r7
 80098d2:	f104 060b 	add.w	r6, r4, #11
 80098d6:	f000 fa03 	bl	8009ce0 <__malloc_unlock>
 80098da:	f026 0607 	bic.w	r6, r6, #7
 80098de:	1d23      	adds	r3, r4, #4
 80098e0:	1af2      	subs	r2, r6, r3
 80098e2:	d0b6      	beq.n	8009852 <_malloc_r+0x22>
 80098e4:	1b9b      	subs	r3, r3, r6
 80098e6:	50a3      	str	r3, [r4, r2]
 80098e8:	e7b3      	b.n	8009852 <_malloc_r+0x22>
 80098ea:	6862      	ldr	r2, [r4, #4]
 80098ec:	42a3      	cmp	r3, r4
 80098ee:	bf0c      	ite	eq
 80098f0:	6032      	streq	r2, [r6, #0]
 80098f2:	605a      	strne	r2, [r3, #4]
 80098f4:	e7ec      	b.n	80098d0 <_malloc_r+0xa0>
 80098f6:	4623      	mov	r3, r4
 80098f8:	6864      	ldr	r4, [r4, #4]
 80098fa:	e7b2      	b.n	8009862 <_malloc_r+0x32>
 80098fc:	4634      	mov	r4, r6
 80098fe:	6876      	ldr	r6, [r6, #4]
 8009900:	e7b9      	b.n	8009876 <_malloc_r+0x46>
 8009902:	230c      	movs	r3, #12
 8009904:	4638      	mov	r0, r7
 8009906:	603b      	str	r3, [r7, #0]
 8009908:	f000 f9ea 	bl	8009ce0 <__malloc_unlock>
 800990c:	e7a1      	b.n	8009852 <_malloc_r+0x22>
 800990e:	6025      	str	r5, [r4, #0]
 8009910:	e7de      	b.n	80098d0 <_malloc_r+0xa0>
 8009912:	bf00      	nop
 8009914:	20001c14 	.word	0x20001c14

08009918 <__ssputs_r>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	688e      	ldr	r6, [r1, #8]
 800991e:	4682      	mov	sl, r0
 8009920:	429e      	cmp	r6, r3
 8009922:	460c      	mov	r4, r1
 8009924:	4690      	mov	r8, r2
 8009926:	461f      	mov	r7, r3
 8009928:	d838      	bhi.n	800999c <__ssputs_r+0x84>
 800992a:	898a      	ldrh	r2, [r1, #12]
 800992c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009930:	d032      	beq.n	8009998 <__ssputs_r+0x80>
 8009932:	6825      	ldr	r5, [r4, #0]
 8009934:	6909      	ldr	r1, [r1, #16]
 8009936:	3301      	adds	r3, #1
 8009938:	eba5 0901 	sub.w	r9, r5, r1
 800993c:	6965      	ldr	r5, [r4, #20]
 800993e:	444b      	add	r3, r9
 8009940:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009944:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009948:	106d      	asrs	r5, r5, #1
 800994a:	429d      	cmp	r5, r3
 800994c:	bf38      	it	cc
 800994e:	461d      	movcc	r5, r3
 8009950:	0553      	lsls	r3, r2, #21
 8009952:	d531      	bpl.n	80099b8 <__ssputs_r+0xa0>
 8009954:	4629      	mov	r1, r5
 8009956:	f7ff ff6b 	bl	8009830 <_malloc_r>
 800995a:	4606      	mov	r6, r0
 800995c:	b950      	cbnz	r0, 8009974 <__ssputs_r+0x5c>
 800995e:	230c      	movs	r3, #12
 8009960:	f04f 30ff 	mov.w	r0, #4294967295
 8009964:	f8ca 3000 	str.w	r3, [sl]
 8009968:	89a3      	ldrh	r3, [r4, #12]
 800996a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009974:	464a      	mov	r2, r9
 8009976:	6921      	ldr	r1, [r4, #16]
 8009978:	f7fc fae2 	bl	8005f40 <memcpy>
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009986:	81a3      	strh	r3, [r4, #12]
 8009988:	6126      	str	r6, [r4, #16]
 800998a:	444e      	add	r6, r9
 800998c:	6026      	str	r6, [r4, #0]
 800998e:	463e      	mov	r6, r7
 8009990:	6165      	str	r5, [r4, #20]
 8009992:	eba5 0509 	sub.w	r5, r5, r9
 8009996:	60a5      	str	r5, [r4, #8]
 8009998:	42be      	cmp	r6, r7
 800999a:	d900      	bls.n	800999e <__ssputs_r+0x86>
 800999c:	463e      	mov	r6, r7
 800999e:	4632      	mov	r2, r6
 80099a0:	4641      	mov	r1, r8
 80099a2:	6820      	ldr	r0, [r4, #0]
 80099a4:	f000 f97c 	bl	8009ca0 <memmove>
 80099a8:	68a3      	ldr	r3, [r4, #8]
 80099aa:	2000      	movs	r0, #0
 80099ac:	1b9b      	subs	r3, r3, r6
 80099ae:	60a3      	str	r3, [r4, #8]
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	4433      	add	r3, r6
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	e7db      	b.n	8009970 <__ssputs_r+0x58>
 80099b8:	462a      	mov	r2, r5
 80099ba:	f000 f997 	bl	8009cec <_realloc_r>
 80099be:	4606      	mov	r6, r0
 80099c0:	2800      	cmp	r0, #0
 80099c2:	d1e1      	bne.n	8009988 <__ssputs_r+0x70>
 80099c4:	4650      	mov	r0, sl
 80099c6:	6921      	ldr	r1, [r4, #16]
 80099c8:	f7ff feca 	bl	8009760 <_free_r>
 80099cc:	e7c7      	b.n	800995e <__ssputs_r+0x46>
	...

080099d0 <_svfiprintf_r>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	4698      	mov	r8, r3
 80099d6:	898b      	ldrh	r3, [r1, #12]
 80099d8:	4607      	mov	r7, r0
 80099da:	061b      	lsls	r3, r3, #24
 80099dc:	460d      	mov	r5, r1
 80099de:	4614      	mov	r4, r2
 80099e0:	b09d      	sub	sp, #116	; 0x74
 80099e2:	d50e      	bpl.n	8009a02 <_svfiprintf_r+0x32>
 80099e4:	690b      	ldr	r3, [r1, #16]
 80099e6:	b963      	cbnz	r3, 8009a02 <_svfiprintf_r+0x32>
 80099e8:	2140      	movs	r1, #64	; 0x40
 80099ea:	f7ff ff21 	bl	8009830 <_malloc_r>
 80099ee:	6028      	str	r0, [r5, #0]
 80099f0:	6128      	str	r0, [r5, #16]
 80099f2:	b920      	cbnz	r0, 80099fe <_svfiprintf_r+0x2e>
 80099f4:	230c      	movs	r3, #12
 80099f6:	603b      	str	r3, [r7, #0]
 80099f8:	f04f 30ff 	mov.w	r0, #4294967295
 80099fc:	e0d1      	b.n	8009ba2 <_svfiprintf_r+0x1d2>
 80099fe:	2340      	movs	r3, #64	; 0x40
 8009a00:	616b      	str	r3, [r5, #20]
 8009a02:	2300      	movs	r3, #0
 8009a04:	9309      	str	r3, [sp, #36]	; 0x24
 8009a06:	2320      	movs	r3, #32
 8009a08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a0c:	2330      	movs	r3, #48	; 0x30
 8009a0e:	f04f 0901 	mov.w	r9, #1
 8009a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bbc <_svfiprintf_r+0x1ec>
 8009a1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a1e:	4623      	mov	r3, r4
 8009a20:	469a      	mov	sl, r3
 8009a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a26:	b10a      	cbz	r2, 8009a2c <_svfiprintf_r+0x5c>
 8009a28:	2a25      	cmp	r2, #37	; 0x25
 8009a2a:	d1f9      	bne.n	8009a20 <_svfiprintf_r+0x50>
 8009a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8009a30:	d00b      	beq.n	8009a4a <_svfiprintf_r+0x7a>
 8009a32:	465b      	mov	r3, fp
 8009a34:	4622      	mov	r2, r4
 8009a36:	4629      	mov	r1, r5
 8009a38:	4638      	mov	r0, r7
 8009a3a:	f7ff ff6d 	bl	8009918 <__ssputs_r>
 8009a3e:	3001      	adds	r0, #1
 8009a40:	f000 80aa 	beq.w	8009b98 <_svfiprintf_r+0x1c8>
 8009a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a46:	445a      	add	r2, fp
 8009a48:	9209      	str	r2, [sp, #36]	; 0x24
 8009a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	f000 80a2 	beq.w	8009b98 <_svfiprintf_r+0x1c8>
 8009a54:	2300      	movs	r3, #0
 8009a56:	f04f 32ff 	mov.w	r2, #4294967295
 8009a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a5e:	f10a 0a01 	add.w	sl, sl, #1
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	9307      	str	r3, [sp, #28]
 8009a66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a6a:	931a      	str	r3, [sp, #104]	; 0x68
 8009a6c:	4654      	mov	r4, sl
 8009a6e:	2205      	movs	r2, #5
 8009a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a74:	4851      	ldr	r0, [pc, #324]	; (8009bbc <_svfiprintf_r+0x1ec>)
 8009a76:	f7ff f999 	bl	8008dac <memchr>
 8009a7a:	9a04      	ldr	r2, [sp, #16]
 8009a7c:	b9d8      	cbnz	r0, 8009ab6 <_svfiprintf_r+0xe6>
 8009a7e:	06d0      	lsls	r0, r2, #27
 8009a80:	bf44      	itt	mi
 8009a82:	2320      	movmi	r3, #32
 8009a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a88:	0711      	lsls	r1, r2, #28
 8009a8a:	bf44      	itt	mi
 8009a8c:	232b      	movmi	r3, #43	; 0x2b
 8009a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a92:	f89a 3000 	ldrb.w	r3, [sl]
 8009a96:	2b2a      	cmp	r3, #42	; 0x2a
 8009a98:	d015      	beq.n	8009ac6 <_svfiprintf_r+0xf6>
 8009a9a:	4654      	mov	r4, sl
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f04f 0c0a 	mov.w	ip, #10
 8009aa2:	9a07      	ldr	r2, [sp, #28]
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aaa:	3b30      	subs	r3, #48	; 0x30
 8009aac:	2b09      	cmp	r3, #9
 8009aae:	d94e      	bls.n	8009b4e <_svfiprintf_r+0x17e>
 8009ab0:	b1b0      	cbz	r0, 8009ae0 <_svfiprintf_r+0x110>
 8009ab2:	9207      	str	r2, [sp, #28]
 8009ab4:	e014      	b.n	8009ae0 <_svfiprintf_r+0x110>
 8009ab6:	eba0 0308 	sub.w	r3, r0, r8
 8009aba:	fa09 f303 	lsl.w	r3, r9, r3
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	46a2      	mov	sl, r4
 8009ac2:	9304      	str	r3, [sp, #16]
 8009ac4:	e7d2      	b.n	8009a6c <_svfiprintf_r+0x9c>
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	1d19      	adds	r1, r3, #4
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	9103      	str	r1, [sp, #12]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bfbb      	ittet	lt
 8009ad2:	425b      	neglt	r3, r3
 8009ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad8:	9307      	strge	r3, [sp, #28]
 8009ada:	9307      	strlt	r3, [sp, #28]
 8009adc:	bfb8      	it	lt
 8009ade:	9204      	strlt	r2, [sp, #16]
 8009ae0:	7823      	ldrb	r3, [r4, #0]
 8009ae2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ae4:	d10c      	bne.n	8009b00 <_svfiprintf_r+0x130>
 8009ae6:	7863      	ldrb	r3, [r4, #1]
 8009ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8009aea:	d135      	bne.n	8009b58 <_svfiprintf_r+0x188>
 8009aec:	9b03      	ldr	r3, [sp, #12]
 8009aee:	3402      	adds	r4, #2
 8009af0:	1d1a      	adds	r2, r3, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	9203      	str	r2, [sp, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfb8      	it	lt
 8009afa:	f04f 33ff 	movlt.w	r3, #4294967295
 8009afe:	9305      	str	r3, [sp, #20]
 8009b00:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009bc0 <_svfiprintf_r+0x1f0>
 8009b04:	2203      	movs	r2, #3
 8009b06:	4650      	mov	r0, sl
 8009b08:	7821      	ldrb	r1, [r4, #0]
 8009b0a:	f7ff f94f 	bl	8008dac <memchr>
 8009b0e:	b140      	cbz	r0, 8009b22 <_svfiprintf_r+0x152>
 8009b10:	2340      	movs	r3, #64	; 0x40
 8009b12:	eba0 000a 	sub.w	r0, r0, sl
 8009b16:	fa03 f000 	lsl.w	r0, r3, r0
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	3401      	adds	r4, #1
 8009b1e:	4303      	orrs	r3, r0
 8009b20:	9304      	str	r3, [sp, #16]
 8009b22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b26:	2206      	movs	r2, #6
 8009b28:	4826      	ldr	r0, [pc, #152]	; (8009bc4 <_svfiprintf_r+0x1f4>)
 8009b2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b2e:	f7ff f93d 	bl	8008dac <memchr>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d038      	beq.n	8009ba8 <_svfiprintf_r+0x1d8>
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <_svfiprintf_r+0x1f8>)
 8009b38:	bb1b      	cbnz	r3, 8009b82 <_svfiprintf_r+0x1b2>
 8009b3a:	9b03      	ldr	r3, [sp, #12]
 8009b3c:	3307      	adds	r3, #7
 8009b3e:	f023 0307 	bic.w	r3, r3, #7
 8009b42:	3308      	adds	r3, #8
 8009b44:	9303      	str	r3, [sp, #12]
 8009b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b48:	4433      	add	r3, r6
 8009b4a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b4c:	e767      	b.n	8009a1e <_svfiprintf_r+0x4e>
 8009b4e:	460c      	mov	r4, r1
 8009b50:	2001      	movs	r0, #1
 8009b52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b56:	e7a5      	b.n	8009aa4 <_svfiprintf_r+0xd4>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f04f 0c0a 	mov.w	ip, #10
 8009b5e:	4619      	mov	r1, r3
 8009b60:	3401      	adds	r4, #1
 8009b62:	9305      	str	r3, [sp, #20]
 8009b64:	4620      	mov	r0, r4
 8009b66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b6a:	3a30      	subs	r2, #48	; 0x30
 8009b6c:	2a09      	cmp	r2, #9
 8009b6e:	d903      	bls.n	8009b78 <_svfiprintf_r+0x1a8>
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d0c5      	beq.n	8009b00 <_svfiprintf_r+0x130>
 8009b74:	9105      	str	r1, [sp, #20]
 8009b76:	e7c3      	b.n	8009b00 <_svfiprintf_r+0x130>
 8009b78:	4604      	mov	r4, r0
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b80:	e7f0      	b.n	8009b64 <_svfiprintf_r+0x194>
 8009b82:	ab03      	add	r3, sp, #12
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	462a      	mov	r2, r5
 8009b88:	4638      	mov	r0, r7
 8009b8a:	4b10      	ldr	r3, [pc, #64]	; (8009bcc <_svfiprintf_r+0x1fc>)
 8009b8c:	a904      	add	r1, sp, #16
 8009b8e:	f7fc fa8b 	bl	80060a8 <_printf_float>
 8009b92:	1c42      	adds	r2, r0, #1
 8009b94:	4606      	mov	r6, r0
 8009b96:	d1d6      	bne.n	8009b46 <_svfiprintf_r+0x176>
 8009b98:	89ab      	ldrh	r3, [r5, #12]
 8009b9a:	065b      	lsls	r3, r3, #25
 8009b9c:	f53f af2c 	bmi.w	80099f8 <_svfiprintf_r+0x28>
 8009ba0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ba2:	b01d      	add	sp, #116	; 0x74
 8009ba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ba8:	ab03      	add	r3, sp, #12
 8009baa:	9300      	str	r3, [sp, #0]
 8009bac:	462a      	mov	r2, r5
 8009bae:	4638      	mov	r0, r7
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <_svfiprintf_r+0x1fc>)
 8009bb2:	a904      	add	r1, sp, #16
 8009bb4:	f7fc fd14 	bl	80065e0 <_printf_i>
 8009bb8:	e7eb      	b.n	8009b92 <_svfiprintf_r+0x1c2>
 8009bba:	bf00      	nop
 8009bbc:	0800ac6c 	.word	0x0800ac6c
 8009bc0:	0800ac72 	.word	0x0800ac72
 8009bc4:	0800ac76 	.word	0x0800ac76
 8009bc8:	080060a9 	.word	0x080060a9
 8009bcc:	08009919 	.word	0x08009919

08009bd0 <nan>:
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	4901      	ldr	r1, [pc, #4]	; (8009bd8 <nan+0x8>)
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	7ff80000 	.word	0x7ff80000

08009bdc <_sbrk_r>:
 8009bdc:	b538      	push	{r3, r4, r5, lr}
 8009bde:	2300      	movs	r3, #0
 8009be0:	4d05      	ldr	r5, [pc, #20]	; (8009bf8 <_sbrk_r+0x1c>)
 8009be2:	4604      	mov	r4, r0
 8009be4:	4608      	mov	r0, r1
 8009be6:	602b      	str	r3, [r5, #0]
 8009be8:	f7f7 fb8a 	bl	8001300 <_sbrk>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	d102      	bne.n	8009bf6 <_sbrk_r+0x1a>
 8009bf0:	682b      	ldr	r3, [r5, #0]
 8009bf2:	b103      	cbz	r3, 8009bf6 <_sbrk_r+0x1a>
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	bd38      	pop	{r3, r4, r5, pc}
 8009bf8:	20001c1c 	.word	0x20001c1c

08009bfc <strncmp>:
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	b510      	push	{r4, lr}
 8009c00:	b172      	cbz	r2, 8009c20 <strncmp+0x24>
 8009c02:	3901      	subs	r1, #1
 8009c04:	1884      	adds	r4, r0, r2
 8009c06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009c0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009c0e:	4290      	cmp	r0, r2
 8009c10:	d101      	bne.n	8009c16 <strncmp+0x1a>
 8009c12:	42a3      	cmp	r3, r4
 8009c14:	d101      	bne.n	8009c1a <strncmp+0x1e>
 8009c16:	1a80      	subs	r0, r0, r2
 8009c18:	bd10      	pop	{r4, pc}
 8009c1a:	2800      	cmp	r0, #0
 8009c1c:	d1f3      	bne.n	8009c06 <strncmp+0xa>
 8009c1e:	e7fa      	b.n	8009c16 <strncmp+0x1a>
 8009c20:	4610      	mov	r0, r2
 8009c22:	e7f9      	b.n	8009c18 <strncmp+0x1c>

08009c24 <__ascii_wctomb>:
 8009c24:	4603      	mov	r3, r0
 8009c26:	4608      	mov	r0, r1
 8009c28:	b141      	cbz	r1, 8009c3c <__ascii_wctomb+0x18>
 8009c2a:	2aff      	cmp	r2, #255	; 0xff
 8009c2c:	d904      	bls.n	8009c38 <__ascii_wctomb+0x14>
 8009c2e:	228a      	movs	r2, #138	; 0x8a
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	601a      	str	r2, [r3, #0]
 8009c36:	4770      	bx	lr
 8009c38:	2001      	movs	r0, #1
 8009c3a:	700a      	strb	r2, [r1, #0]
 8009c3c:	4770      	bx	lr
	...

08009c40 <__assert_func>:
 8009c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c42:	4614      	mov	r4, r2
 8009c44:	461a      	mov	r2, r3
 8009c46:	4b09      	ldr	r3, [pc, #36]	; (8009c6c <__assert_func+0x2c>)
 8009c48:	4605      	mov	r5, r0
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	68d8      	ldr	r0, [r3, #12]
 8009c4e:	b14c      	cbz	r4, 8009c64 <__assert_func+0x24>
 8009c50:	4b07      	ldr	r3, [pc, #28]	; (8009c70 <__assert_func+0x30>)
 8009c52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c56:	9100      	str	r1, [sp, #0]
 8009c58:	462b      	mov	r3, r5
 8009c5a:	4906      	ldr	r1, [pc, #24]	; (8009c74 <__assert_func+0x34>)
 8009c5c:	f000 f80e 	bl	8009c7c <fiprintf>
 8009c60:	f000 fa8a 	bl	800a178 <abort>
 8009c64:	4b04      	ldr	r3, [pc, #16]	; (8009c78 <__assert_func+0x38>)
 8009c66:	461c      	mov	r4, r3
 8009c68:	e7f3      	b.n	8009c52 <__assert_func+0x12>
 8009c6a:	bf00      	nop
 8009c6c:	20000010 	.word	0x20000010
 8009c70:	0800ac7d 	.word	0x0800ac7d
 8009c74:	0800ac8a 	.word	0x0800ac8a
 8009c78:	0800acb8 	.word	0x0800acb8

08009c7c <fiprintf>:
 8009c7c:	b40e      	push	{r1, r2, r3}
 8009c7e:	b503      	push	{r0, r1, lr}
 8009c80:	4601      	mov	r1, r0
 8009c82:	ab03      	add	r3, sp, #12
 8009c84:	4805      	ldr	r0, [pc, #20]	; (8009c9c <fiprintf+0x20>)
 8009c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c8a:	6800      	ldr	r0, [r0, #0]
 8009c8c:	9301      	str	r3, [sp, #4]
 8009c8e:	f000 f883 	bl	8009d98 <_vfiprintf_r>
 8009c92:	b002      	add	sp, #8
 8009c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c98:	b003      	add	sp, #12
 8009c9a:	4770      	bx	lr
 8009c9c:	20000010 	.word	0x20000010

08009ca0 <memmove>:
 8009ca0:	4288      	cmp	r0, r1
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	eb01 0402 	add.w	r4, r1, r2
 8009ca8:	d902      	bls.n	8009cb0 <memmove+0x10>
 8009caa:	4284      	cmp	r4, r0
 8009cac:	4623      	mov	r3, r4
 8009cae:	d807      	bhi.n	8009cc0 <memmove+0x20>
 8009cb0:	1e43      	subs	r3, r0, #1
 8009cb2:	42a1      	cmp	r1, r4
 8009cb4:	d008      	beq.n	8009cc8 <memmove+0x28>
 8009cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009cba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009cbe:	e7f8      	b.n	8009cb2 <memmove+0x12>
 8009cc0:	4601      	mov	r1, r0
 8009cc2:	4402      	add	r2, r0
 8009cc4:	428a      	cmp	r2, r1
 8009cc6:	d100      	bne.n	8009cca <memmove+0x2a>
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009cce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009cd2:	e7f7      	b.n	8009cc4 <memmove+0x24>

08009cd4 <__malloc_lock>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__malloc_lock+0x8>)
 8009cd6:	f000 bc0b 	b.w	800a4f0 <__retarget_lock_acquire_recursive>
 8009cda:	bf00      	nop
 8009cdc:	20001c20 	.word	0x20001c20

08009ce0 <__malloc_unlock>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	; (8009ce8 <__malloc_unlock+0x8>)
 8009ce2:	f000 bc06 	b.w	800a4f2 <__retarget_lock_release_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	20001c20 	.word	0x20001c20

08009cec <_realloc_r>:
 8009cec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf0:	4680      	mov	r8, r0
 8009cf2:	4614      	mov	r4, r2
 8009cf4:	460e      	mov	r6, r1
 8009cf6:	b921      	cbnz	r1, 8009d02 <_realloc_r+0x16>
 8009cf8:	4611      	mov	r1, r2
 8009cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009cfe:	f7ff bd97 	b.w	8009830 <_malloc_r>
 8009d02:	b92a      	cbnz	r2, 8009d10 <_realloc_r+0x24>
 8009d04:	f7ff fd2c 	bl	8009760 <_free_r>
 8009d08:	4625      	mov	r5, r4
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d10:	f000 fc56 	bl	800a5c0 <_malloc_usable_size_r>
 8009d14:	4284      	cmp	r4, r0
 8009d16:	4607      	mov	r7, r0
 8009d18:	d802      	bhi.n	8009d20 <_realloc_r+0x34>
 8009d1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d1e:	d812      	bhi.n	8009d46 <_realloc_r+0x5a>
 8009d20:	4621      	mov	r1, r4
 8009d22:	4640      	mov	r0, r8
 8009d24:	f7ff fd84 	bl	8009830 <_malloc_r>
 8009d28:	4605      	mov	r5, r0
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d0ed      	beq.n	8009d0a <_realloc_r+0x1e>
 8009d2e:	42bc      	cmp	r4, r7
 8009d30:	4622      	mov	r2, r4
 8009d32:	4631      	mov	r1, r6
 8009d34:	bf28      	it	cs
 8009d36:	463a      	movcs	r2, r7
 8009d38:	f7fc f902 	bl	8005f40 <memcpy>
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	4640      	mov	r0, r8
 8009d40:	f7ff fd0e 	bl	8009760 <_free_r>
 8009d44:	e7e1      	b.n	8009d0a <_realloc_r+0x1e>
 8009d46:	4635      	mov	r5, r6
 8009d48:	e7df      	b.n	8009d0a <_realloc_r+0x1e>

08009d4a <__sfputc_r>:
 8009d4a:	6893      	ldr	r3, [r2, #8]
 8009d4c:	b410      	push	{r4}
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	6093      	str	r3, [r2, #8]
 8009d54:	da07      	bge.n	8009d66 <__sfputc_r+0x1c>
 8009d56:	6994      	ldr	r4, [r2, #24]
 8009d58:	42a3      	cmp	r3, r4
 8009d5a:	db01      	blt.n	8009d60 <__sfputc_r+0x16>
 8009d5c:	290a      	cmp	r1, #10
 8009d5e:	d102      	bne.n	8009d66 <__sfputc_r+0x1c>
 8009d60:	bc10      	pop	{r4}
 8009d62:	f000 b949 	b.w	8009ff8 <__swbuf_r>
 8009d66:	6813      	ldr	r3, [r2, #0]
 8009d68:	1c58      	adds	r0, r3, #1
 8009d6a:	6010      	str	r0, [r2, #0]
 8009d6c:	7019      	strb	r1, [r3, #0]
 8009d6e:	4608      	mov	r0, r1
 8009d70:	bc10      	pop	{r4}
 8009d72:	4770      	bx	lr

08009d74 <__sfputs_r>:
 8009d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d76:	4606      	mov	r6, r0
 8009d78:	460f      	mov	r7, r1
 8009d7a:	4614      	mov	r4, r2
 8009d7c:	18d5      	adds	r5, r2, r3
 8009d7e:	42ac      	cmp	r4, r5
 8009d80:	d101      	bne.n	8009d86 <__sfputs_r+0x12>
 8009d82:	2000      	movs	r0, #0
 8009d84:	e007      	b.n	8009d96 <__sfputs_r+0x22>
 8009d86:	463a      	mov	r2, r7
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d8e:	f7ff ffdc 	bl	8009d4a <__sfputc_r>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d1f3      	bne.n	8009d7e <__sfputs_r+0xa>
 8009d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d98 <_vfiprintf_r>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	4614      	mov	r4, r2
 8009da0:	4698      	mov	r8, r3
 8009da2:	4606      	mov	r6, r0
 8009da4:	b09d      	sub	sp, #116	; 0x74
 8009da6:	b118      	cbz	r0, 8009db0 <_vfiprintf_r+0x18>
 8009da8:	6983      	ldr	r3, [r0, #24]
 8009daa:	b90b      	cbnz	r3, 8009db0 <_vfiprintf_r+0x18>
 8009dac:	f000 fb02 	bl	800a3b4 <__sinit>
 8009db0:	4b89      	ldr	r3, [pc, #548]	; (8009fd8 <_vfiprintf_r+0x240>)
 8009db2:	429d      	cmp	r5, r3
 8009db4:	d11b      	bne.n	8009dee <_vfiprintf_r+0x56>
 8009db6:	6875      	ldr	r5, [r6, #4]
 8009db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dba:	07d9      	lsls	r1, r3, #31
 8009dbc:	d405      	bmi.n	8009dca <_vfiprintf_r+0x32>
 8009dbe:	89ab      	ldrh	r3, [r5, #12]
 8009dc0:	059a      	lsls	r2, r3, #22
 8009dc2:	d402      	bmi.n	8009dca <_vfiprintf_r+0x32>
 8009dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dc6:	f000 fb93 	bl	800a4f0 <__retarget_lock_acquire_recursive>
 8009dca:	89ab      	ldrh	r3, [r5, #12]
 8009dcc:	071b      	lsls	r3, r3, #28
 8009dce:	d501      	bpl.n	8009dd4 <_vfiprintf_r+0x3c>
 8009dd0:	692b      	ldr	r3, [r5, #16]
 8009dd2:	b9eb      	cbnz	r3, 8009e10 <_vfiprintf_r+0x78>
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	4630      	mov	r0, r6
 8009dd8:	f000 f960 	bl	800a09c <__swsetup_r>
 8009ddc:	b1c0      	cbz	r0, 8009e10 <_vfiprintf_r+0x78>
 8009dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009de0:	07dc      	lsls	r4, r3, #31
 8009de2:	d50e      	bpl.n	8009e02 <_vfiprintf_r+0x6a>
 8009de4:	f04f 30ff 	mov.w	r0, #4294967295
 8009de8:	b01d      	add	sp, #116	; 0x74
 8009dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dee:	4b7b      	ldr	r3, [pc, #492]	; (8009fdc <_vfiprintf_r+0x244>)
 8009df0:	429d      	cmp	r5, r3
 8009df2:	d101      	bne.n	8009df8 <_vfiprintf_r+0x60>
 8009df4:	68b5      	ldr	r5, [r6, #8]
 8009df6:	e7df      	b.n	8009db8 <_vfiprintf_r+0x20>
 8009df8:	4b79      	ldr	r3, [pc, #484]	; (8009fe0 <_vfiprintf_r+0x248>)
 8009dfa:	429d      	cmp	r5, r3
 8009dfc:	bf08      	it	eq
 8009dfe:	68f5      	ldreq	r5, [r6, #12]
 8009e00:	e7da      	b.n	8009db8 <_vfiprintf_r+0x20>
 8009e02:	89ab      	ldrh	r3, [r5, #12]
 8009e04:	0598      	lsls	r0, r3, #22
 8009e06:	d4ed      	bmi.n	8009de4 <_vfiprintf_r+0x4c>
 8009e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e0a:	f000 fb72 	bl	800a4f2 <__retarget_lock_release_recursive>
 8009e0e:	e7e9      	b.n	8009de4 <_vfiprintf_r+0x4c>
 8009e10:	2300      	movs	r3, #0
 8009e12:	9309      	str	r3, [sp, #36]	; 0x24
 8009e14:	2320      	movs	r3, #32
 8009e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e1a:	2330      	movs	r3, #48	; 0x30
 8009e1c:	f04f 0901 	mov.w	r9, #1
 8009e20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009fe4 <_vfiprintf_r+0x24c>
 8009e28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e2c:	4623      	mov	r3, r4
 8009e2e:	469a      	mov	sl, r3
 8009e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e34:	b10a      	cbz	r2, 8009e3a <_vfiprintf_r+0xa2>
 8009e36:	2a25      	cmp	r2, #37	; 0x25
 8009e38:	d1f9      	bne.n	8009e2e <_vfiprintf_r+0x96>
 8009e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e3e:	d00b      	beq.n	8009e58 <_vfiprintf_r+0xc0>
 8009e40:	465b      	mov	r3, fp
 8009e42:	4622      	mov	r2, r4
 8009e44:	4629      	mov	r1, r5
 8009e46:	4630      	mov	r0, r6
 8009e48:	f7ff ff94 	bl	8009d74 <__sfputs_r>
 8009e4c:	3001      	adds	r0, #1
 8009e4e:	f000 80aa 	beq.w	8009fa6 <_vfiprintf_r+0x20e>
 8009e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e54:	445a      	add	r2, fp
 8009e56:	9209      	str	r2, [sp, #36]	; 0x24
 8009e58:	f89a 3000 	ldrb.w	r3, [sl]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f000 80a2 	beq.w	8009fa6 <_vfiprintf_r+0x20e>
 8009e62:	2300      	movs	r3, #0
 8009e64:	f04f 32ff 	mov.w	r2, #4294967295
 8009e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e6c:	f10a 0a01 	add.w	sl, sl, #1
 8009e70:	9304      	str	r3, [sp, #16]
 8009e72:	9307      	str	r3, [sp, #28]
 8009e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e78:	931a      	str	r3, [sp, #104]	; 0x68
 8009e7a:	4654      	mov	r4, sl
 8009e7c:	2205      	movs	r2, #5
 8009e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e82:	4858      	ldr	r0, [pc, #352]	; (8009fe4 <_vfiprintf_r+0x24c>)
 8009e84:	f7fe ff92 	bl	8008dac <memchr>
 8009e88:	9a04      	ldr	r2, [sp, #16]
 8009e8a:	b9d8      	cbnz	r0, 8009ec4 <_vfiprintf_r+0x12c>
 8009e8c:	06d1      	lsls	r1, r2, #27
 8009e8e:	bf44      	itt	mi
 8009e90:	2320      	movmi	r3, #32
 8009e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e96:	0713      	lsls	r3, r2, #28
 8009e98:	bf44      	itt	mi
 8009e9a:	232b      	movmi	r3, #43	; 0x2b
 8009e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8009ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8009ea6:	d015      	beq.n	8009ed4 <_vfiprintf_r+0x13c>
 8009ea8:	4654      	mov	r4, sl
 8009eaa:	2000      	movs	r0, #0
 8009eac:	f04f 0c0a 	mov.w	ip, #10
 8009eb0:	9a07      	ldr	r2, [sp, #28]
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009eb8:	3b30      	subs	r3, #48	; 0x30
 8009eba:	2b09      	cmp	r3, #9
 8009ebc:	d94e      	bls.n	8009f5c <_vfiprintf_r+0x1c4>
 8009ebe:	b1b0      	cbz	r0, 8009eee <_vfiprintf_r+0x156>
 8009ec0:	9207      	str	r2, [sp, #28]
 8009ec2:	e014      	b.n	8009eee <_vfiprintf_r+0x156>
 8009ec4:	eba0 0308 	sub.w	r3, r0, r8
 8009ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	46a2      	mov	sl, r4
 8009ed0:	9304      	str	r3, [sp, #16]
 8009ed2:	e7d2      	b.n	8009e7a <_vfiprintf_r+0xe2>
 8009ed4:	9b03      	ldr	r3, [sp, #12]
 8009ed6:	1d19      	adds	r1, r3, #4
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	9103      	str	r1, [sp, #12]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	bfbb      	ittet	lt
 8009ee0:	425b      	neglt	r3, r3
 8009ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8009ee6:	9307      	strge	r3, [sp, #28]
 8009ee8:	9307      	strlt	r3, [sp, #28]
 8009eea:	bfb8      	it	lt
 8009eec:	9204      	strlt	r2, [sp, #16]
 8009eee:	7823      	ldrb	r3, [r4, #0]
 8009ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ef2:	d10c      	bne.n	8009f0e <_vfiprintf_r+0x176>
 8009ef4:	7863      	ldrb	r3, [r4, #1]
 8009ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ef8:	d135      	bne.n	8009f66 <_vfiprintf_r+0x1ce>
 8009efa:	9b03      	ldr	r3, [sp, #12]
 8009efc:	3402      	adds	r4, #2
 8009efe:	1d1a      	adds	r2, r3, #4
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	9203      	str	r2, [sp, #12]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	bfb8      	it	lt
 8009f08:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009fe8 <_vfiprintf_r+0x250>
 8009f12:	2203      	movs	r2, #3
 8009f14:	4650      	mov	r0, sl
 8009f16:	7821      	ldrb	r1, [r4, #0]
 8009f18:	f7fe ff48 	bl	8008dac <memchr>
 8009f1c:	b140      	cbz	r0, 8009f30 <_vfiprintf_r+0x198>
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	eba0 000a 	sub.w	r0, r0, sl
 8009f24:	fa03 f000 	lsl.w	r0, r3, r0
 8009f28:	9b04      	ldr	r3, [sp, #16]
 8009f2a:	3401      	adds	r4, #1
 8009f2c:	4303      	orrs	r3, r0
 8009f2e:	9304      	str	r3, [sp, #16]
 8009f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f34:	2206      	movs	r2, #6
 8009f36:	482d      	ldr	r0, [pc, #180]	; (8009fec <_vfiprintf_r+0x254>)
 8009f38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f3c:	f7fe ff36 	bl	8008dac <memchr>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	d03f      	beq.n	8009fc4 <_vfiprintf_r+0x22c>
 8009f44:	4b2a      	ldr	r3, [pc, #168]	; (8009ff0 <_vfiprintf_r+0x258>)
 8009f46:	bb1b      	cbnz	r3, 8009f90 <_vfiprintf_r+0x1f8>
 8009f48:	9b03      	ldr	r3, [sp, #12]
 8009f4a:	3307      	adds	r3, #7
 8009f4c:	f023 0307 	bic.w	r3, r3, #7
 8009f50:	3308      	adds	r3, #8
 8009f52:	9303      	str	r3, [sp, #12]
 8009f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f56:	443b      	add	r3, r7
 8009f58:	9309      	str	r3, [sp, #36]	; 0x24
 8009f5a:	e767      	b.n	8009e2c <_vfiprintf_r+0x94>
 8009f5c:	460c      	mov	r4, r1
 8009f5e:	2001      	movs	r0, #1
 8009f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f64:	e7a5      	b.n	8009eb2 <_vfiprintf_r+0x11a>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f04f 0c0a 	mov.w	ip, #10
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	3401      	adds	r4, #1
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	4620      	mov	r0, r4
 8009f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f78:	3a30      	subs	r2, #48	; 0x30
 8009f7a:	2a09      	cmp	r2, #9
 8009f7c:	d903      	bls.n	8009f86 <_vfiprintf_r+0x1ee>
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0c5      	beq.n	8009f0e <_vfiprintf_r+0x176>
 8009f82:	9105      	str	r1, [sp, #20]
 8009f84:	e7c3      	b.n	8009f0e <_vfiprintf_r+0x176>
 8009f86:	4604      	mov	r4, r0
 8009f88:	2301      	movs	r3, #1
 8009f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f8e:	e7f0      	b.n	8009f72 <_vfiprintf_r+0x1da>
 8009f90:	ab03      	add	r3, sp, #12
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	462a      	mov	r2, r5
 8009f96:	4630      	mov	r0, r6
 8009f98:	4b16      	ldr	r3, [pc, #88]	; (8009ff4 <_vfiprintf_r+0x25c>)
 8009f9a:	a904      	add	r1, sp, #16
 8009f9c:	f7fc f884 	bl	80060a8 <_printf_float>
 8009fa0:	4607      	mov	r7, r0
 8009fa2:	1c78      	adds	r0, r7, #1
 8009fa4:	d1d6      	bne.n	8009f54 <_vfiprintf_r+0x1bc>
 8009fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fa8:	07d9      	lsls	r1, r3, #31
 8009faa:	d405      	bmi.n	8009fb8 <_vfiprintf_r+0x220>
 8009fac:	89ab      	ldrh	r3, [r5, #12]
 8009fae:	059a      	lsls	r2, r3, #22
 8009fb0:	d402      	bmi.n	8009fb8 <_vfiprintf_r+0x220>
 8009fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fb4:	f000 fa9d 	bl	800a4f2 <__retarget_lock_release_recursive>
 8009fb8:	89ab      	ldrh	r3, [r5, #12]
 8009fba:	065b      	lsls	r3, r3, #25
 8009fbc:	f53f af12 	bmi.w	8009de4 <_vfiprintf_r+0x4c>
 8009fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fc2:	e711      	b.n	8009de8 <_vfiprintf_r+0x50>
 8009fc4:	ab03      	add	r3, sp, #12
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462a      	mov	r2, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <_vfiprintf_r+0x25c>)
 8009fce:	a904      	add	r1, sp, #16
 8009fd0:	f7fc fb06 	bl	80065e0 <_printf_i>
 8009fd4:	e7e4      	b.n	8009fa0 <_vfiprintf_r+0x208>
 8009fd6:	bf00      	nop
 8009fd8:	0800acdc 	.word	0x0800acdc
 8009fdc:	0800acfc 	.word	0x0800acfc
 8009fe0:	0800acbc 	.word	0x0800acbc
 8009fe4:	0800ac6c 	.word	0x0800ac6c
 8009fe8:	0800ac72 	.word	0x0800ac72
 8009fec:	0800ac76 	.word	0x0800ac76
 8009ff0:	080060a9 	.word	0x080060a9
 8009ff4:	08009d75 	.word	0x08009d75

08009ff8 <__swbuf_r>:
 8009ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffa:	460e      	mov	r6, r1
 8009ffc:	4614      	mov	r4, r2
 8009ffe:	4605      	mov	r5, r0
 800a000:	b118      	cbz	r0, 800a00a <__swbuf_r+0x12>
 800a002:	6983      	ldr	r3, [r0, #24]
 800a004:	b90b      	cbnz	r3, 800a00a <__swbuf_r+0x12>
 800a006:	f000 f9d5 	bl	800a3b4 <__sinit>
 800a00a:	4b21      	ldr	r3, [pc, #132]	; (800a090 <__swbuf_r+0x98>)
 800a00c:	429c      	cmp	r4, r3
 800a00e:	d12b      	bne.n	800a068 <__swbuf_r+0x70>
 800a010:	686c      	ldr	r4, [r5, #4]
 800a012:	69a3      	ldr	r3, [r4, #24]
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	071a      	lsls	r2, r3, #28
 800a01a:	d52f      	bpl.n	800a07c <__swbuf_r+0x84>
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b36b      	cbz	r3, 800a07c <__swbuf_r+0x84>
 800a020:	6923      	ldr	r3, [r4, #16]
 800a022:	6820      	ldr	r0, [r4, #0]
 800a024:	b2f6      	uxtb	r6, r6
 800a026:	1ac0      	subs	r0, r0, r3
 800a028:	6963      	ldr	r3, [r4, #20]
 800a02a:	4637      	mov	r7, r6
 800a02c:	4283      	cmp	r3, r0
 800a02e:	dc04      	bgt.n	800a03a <__swbuf_r+0x42>
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	f000 f92a 	bl	800a28c <_fflush_r>
 800a038:	bb30      	cbnz	r0, 800a088 <__swbuf_r+0x90>
 800a03a:	68a3      	ldr	r3, [r4, #8]
 800a03c:	3001      	adds	r0, #1
 800a03e:	3b01      	subs	r3, #1
 800a040:	60a3      	str	r3, [r4, #8]
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	6022      	str	r2, [r4, #0]
 800a048:	701e      	strb	r6, [r3, #0]
 800a04a:	6963      	ldr	r3, [r4, #20]
 800a04c:	4283      	cmp	r3, r0
 800a04e:	d004      	beq.n	800a05a <__swbuf_r+0x62>
 800a050:	89a3      	ldrh	r3, [r4, #12]
 800a052:	07db      	lsls	r3, r3, #31
 800a054:	d506      	bpl.n	800a064 <__swbuf_r+0x6c>
 800a056:	2e0a      	cmp	r6, #10
 800a058:	d104      	bne.n	800a064 <__swbuf_r+0x6c>
 800a05a:	4621      	mov	r1, r4
 800a05c:	4628      	mov	r0, r5
 800a05e:	f000 f915 	bl	800a28c <_fflush_r>
 800a062:	b988      	cbnz	r0, 800a088 <__swbuf_r+0x90>
 800a064:	4638      	mov	r0, r7
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <__swbuf_r+0x9c>)
 800a06a:	429c      	cmp	r4, r3
 800a06c:	d101      	bne.n	800a072 <__swbuf_r+0x7a>
 800a06e:	68ac      	ldr	r4, [r5, #8]
 800a070:	e7cf      	b.n	800a012 <__swbuf_r+0x1a>
 800a072:	4b09      	ldr	r3, [pc, #36]	; (800a098 <__swbuf_r+0xa0>)
 800a074:	429c      	cmp	r4, r3
 800a076:	bf08      	it	eq
 800a078:	68ec      	ldreq	r4, [r5, #12]
 800a07a:	e7ca      	b.n	800a012 <__swbuf_r+0x1a>
 800a07c:	4621      	mov	r1, r4
 800a07e:	4628      	mov	r0, r5
 800a080:	f000 f80c 	bl	800a09c <__swsetup_r>
 800a084:	2800      	cmp	r0, #0
 800a086:	d0cb      	beq.n	800a020 <__swbuf_r+0x28>
 800a088:	f04f 37ff 	mov.w	r7, #4294967295
 800a08c:	e7ea      	b.n	800a064 <__swbuf_r+0x6c>
 800a08e:	bf00      	nop
 800a090:	0800acdc 	.word	0x0800acdc
 800a094:	0800acfc 	.word	0x0800acfc
 800a098:	0800acbc 	.word	0x0800acbc

0800a09c <__swsetup_r>:
 800a09c:	4b32      	ldr	r3, [pc, #200]	; (800a168 <__swsetup_r+0xcc>)
 800a09e:	b570      	push	{r4, r5, r6, lr}
 800a0a0:	681d      	ldr	r5, [r3, #0]
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	460c      	mov	r4, r1
 800a0a6:	b125      	cbz	r5, 800a0b2 <__swsetup_r+0x16>
 800a0a8:	69ab      	ldr	r3, [r5, #24]
 800a0aa:	b913      	cbnz	r3, 800a0b2 <__swsetup_r+0x16>
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	f000 f981 	bl	800a3b4 <__sinit>
 800a0b2:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <__swsetup_r+0xd0>)
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d10f      	bne.n	800a0d8 <__swsetup_r+0x3c>
 800a0b8:	686c      	ldr	r4, [r5, #4]
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0c0:	0719      	lsls	r1, r3, #28
 800a0c2:	d42c      	bmi.n	800a11e <__swsetup_r+0x82>
 800a0c4:	06dd      	lsls	r5, r3, #27
 800a0c6:	d411      	bmi.n	800a0ec <__swsetup_r+0x50>
 800a0c8:	2309      	movs	r3, #9
 800a0ca:	6033      	str	r3, [r6, #0]
 800a0cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d4:	81a3      	strh	r3, [r4, #12]
 800a0d6:	e03e      	b.n	800a156 <__swsetup_r+0xba>
 800a0d8:	4b25      	ldr	r3, [pc, #148]	; (800a170 <__swsetup_r+0xd4>)
 800a0da:	429c      	cmp	r4, r3
 800a0dc:	d101      	bne.n	800a0e2 <__swsetup_r+0x46>
 800a0de:	68ac      	ldr	r4, [r5, #8]
 800a0e0:	e7eb      	b.n	800a0ba <__swsetup_r+0x1e>
 800a0e2:	4b24      	ldr	r3, [pc, #144]	; (800a174 <__swsetup_r+0xd8>)
 800a0e4:	429c      	cmp	r4, r3
 800a0e6:	bf08      	it	eq
 800a0e8:	68ec      	ldreq	r4, [r5, #12]
 800a0ea:	e7e6      	b.n	800a0ba <__swsetup_r+0x1e>
 800a0ec:	0758      	lsls	r0, r3, #29
 800a0ee:	d512      	bpl.n	800a116 <__swsetup_r+0x7a>
 800a0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f2:	b141      	cbz	r1, 800a106 <__swsetup_r+0x6a>
 800a0f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	d002      	beq.n	800a102 <__swsetup_r+0x66>
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff fb2f 	bl	8009760 <_free_r>
 800a102:	2300      	movs	r3, #0
 800a104:	6363      	str	r3, [r4, #52]	; 0x34
 800a106:	89a3      	ldrh	r3, [r4, #12]
 800a108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a10c:	81a3      	strh	r3, [r4, #12]
 800a10e:	2300      	movs	r3, #0
 800a110:	6063      	str	r3, [r4, #4]
 800a112:	6923      	ldr	r3, [r4, #16]
 800a114:	6023      	str	r3, [r4, #0]
 800a116:	89a3      	ldrh	r3, [r4, #12]
 800a118:	f043 0308 	orr.w	r3, r3, #8
 800a11c:	81a3      	strh	r3, [r4, #12]
 800a11e:	6923      	ldr	r3, [r4, #16]
 800a120:	b94b      	cbnz	r3, 800a136 <__swsetup_r+0x9a>
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a12c:	d003      	beq.n	800a136 <__swsetup_r+0x9a>
 800a12e:	4621      	mov	r1, r4
 800a130:	4630      	mov	r0, r6
 800a132:	f000 fa05 	bl	800a540 <__smakebuf_r>
 800a136:	89a0      	ldrh	r0, [r4, #12]
 800a138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a13c:	f010 0301 	ands.w	r3, r0, #1
 800a140:	d00a      	beq.n	800a158 <__swsetup_r+0xbc>
 800a142:	2300      	movs	r3, #0
 800a144:	60a3      	str	r3, [r4, #8]
 800a146:	6963      	ldr	r3, [r4, #20]
 800a148:	425b      	negs	r3, r3
 800a14a:	61a3      	str	r3, [r4, #24]
 800a14c:	6923      	ldr	r3, [r4, #16]
 800a14e:	b943      	cbnz	r3, 800a162 <__swsetup_r+0xc6>
 800a150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a154:	d1ba      	bne.n	800a0cc <__swsetup_r+0x30>
 800a156:	bd70      	pop	{r4, r5, r6, pc}
 800a158:	0781      	lsls	r1, r0, #30
 800a15a:	bf58      	it	pl
 800a15c:	6963      	ldrpl	r3, [r4, #20]
 800a15e:	60a3      	str	r3, [r4, #8]
 800a160:	e7f4      	b.n	800a14c <__swsetup_r+0xb0>
 800a162:	2000      	movs	r0, #0
 800a164:	e7f7      	b.n	800a156 <__swsetup_r+0xba>
 800a166:	bf00      	nop
 800a168:	20000010 	.word	0x20000010
 800a16c:	0800acdc 	.word	0x0800acdc
 800a170:	0800acfc 	.word	0x0800acfc
 800a174:	0800acbc 	.word	0x0800acbc

0800a178 <abort>:
 800a178:	2006      	movs	r0, #6
 800a17a:	b508      	push	{r3, lr}
 800a17c:	f000 fa50 	bl	800a620 <raise>
 800a180:	2001      	movs	r0, #1
 800a182:	f7f7 f84a 	bl	800121a <_exit>
	...

0800a188 <__sflush_r>:
 800a188:	898a      	ldrh	r2, [r1, #12]
 800a18a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18c:	4605      	mov	r5, r0
 800a18e:	0710      	lsls	r0, r2, #28
 800a190:	460c      	mov	r4, r1
 800a192:	d457      	bmi.n	800a244 <__sflush_r+0xbc>
 800a194:	684b      	ldr	r3, [r1, #4]
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc04      	bgt.n	800a1a4 <__sflush_r+0x1c>
 800a19a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	dc01      	bgt.n	800a1a4 <__sflush_r+0x1c>
 800a1a0:	2000      	movs	r0, #0
 800a1a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	d0fa      	beq.n	800a1a0 <__sflush_r+0x18>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1b0:	682f      	ldr	r7, [r5, #0]
 800a1b2:	602b      	str	r3, [r5, #0]
 800a1b4:	d032      	beq.n	800a21c <__sflush_r+0x94>
 800a1b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b8:	89a3      	ldrh	r3, [r4, #12]
 800a1ba:	075a      	lsls	r2, r3, #29
 800a1bc:	d505      	bpl.n	800a1ca <__sflush_r+0x42>
 800a1be:	6863      	ldr	r3, [r4, #4]
 800a1c0:	1ac0      	subs	r0, r0, r3
 800a1c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1c4:	b10b      	cbz	r3, 800a1ca <__sflush_r+0x42>
 800a1c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c8:	1ac0      	subs	r0, r0, r3
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1d0:	4628      	mov	r0, r5
 800a1d2:	6a21      	ldr	r1, [r4, #32]
 800a1d4:	47b0      	blx	r6
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	d106      	bne.n	800a1ea <__sflush_r+0x62>
 800a1dc:	6829      	ldr	r1, [r5, #0]
 800a1de:	291d      	cmp	r1, #29
 800a1e0:	d82c      	bhi.n	800a23c <__sflush_r+0xb4>
 800a1e2:	4a29      	ldr	r2, [pc, #164]	; (800a288 <__sflush_r+0x100>)
 800a1e4:	40ca      	lsrs	r2, r1
 800a1e6:	07d6      	lsls	r6, r2, #31
 800a1e8:	d528      	bpl.n	800a23c <__sflush_r+0xb4>
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	6062      	str	r2, [r4, #4]
 800a1ee:	6922      	ldr	r2, [r4, #16]
 800a1f0:	04d9      	lsls	r1, r3, #19
 800a1f2:	6022      	str	r2, [r4, #0]
 800a1f4:	d504      	bpl.n	800a200 <__sflush_r+0x78>
 800a1f6:	1c42      	adds	r2, r0, #1
 800a1f8:	d101      	bne.n	800a1fe <__sflush_r+0x76>
 800a1fa:	682b      	ldr	r3, [r5, #0]
 800a1fc:	b903      	cbnz	r3, 800a200 <__sflush_r+0x78>
 800a1fe:	6560      	str	r0, [r4, #84]	; 0x54
 800a200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a202:	602f      	str	r7, [r5, #0]
 800a204:	2900      	cmp	r1, #0
 800a206:	d0cb      	beq.n	800a1a0 <__sflush_r+0x18>
 800a208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a20c:	4299      	cmp	r1, r3
 800a20e:	d002      	beq.n	800a216 <__sflush_r+0x8e>
 800a210:	4628      	mov	r0, r5
 800a212:	f7ff faa5 	bl	8009760 <_free_r>
 800a216:	2000      	movs	r0, #0
 800a218:	6360      	str	r0, [r4, #52]	; 0x34
 800a21a:	e7c2      	b.n	800a1a2 <__sflush_r+0x1a>
 800a21c:	6a21      	ldr	r1, [r4, #32]
 800a21e:	2301      	movs	r3, #1
 800a220:	4628      	mov	r0, r5
 800a222:	47b0      	blx	r6
 800a224:	1c41      	adds	r1, r0, #1
 800a226:	d1c7      	bne.n	800a1b8 <__sflush_r+0x30>
 800a228:	682b      	ldr	r3, [r5, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0c4      	beq.n	800a1b8 <__sflush_r+0x30>
 800a22e:	2b1d      	cmp	r3, #29
 800a230:	d001      	beq.n	800a236 <__sflush_r+0xae>
 800a232:	2b16      	cmp	r3, #22
 800a234:	d101      	bne.n	800a23a <__sflush_r+0xb2>
 800a236:	602f      	str	r7, [r5, #0]
 800a238:	e7b2      	b.n	800a1a0 <__sflush_r+0x18>
 800a23a:	89a3      	ldrh	r3, [r4, #12]
 800a23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a240:	81a3      	strh	r3, [r4, #12]
 800a242:	e7ae      	b.n	800a1a2 <__sflush_r+0x1a>
 800a244:	690f      	ldr	r7, [r1, #16]
 800a246:	2f00      	cmp	r7, #0
 800a248:	d0aa      	beq.n	800a1a0 <__sflush_r+0x18>
 800a24a:	0793      	lsls	r3, r2, #30
 800a24c:	bf18      	it	ne
 800a24e:	2300      	movne	r3, #0
 800a250:	680e      	ldr	r6, [r1, #0]
 800a252:	bf08      	it	eq
 800a254:	694b      	ldreq	r3, [r1, #20]
 800a256:	1bf6      	subs	r6, r6, r7
 800a258:	600f      	str	r7, [r1, #0]
 800a25a:	608b      	str	r3, [r1, #8]
 800a25c:	2e00      	cmp	r6, #0
 800a25e:	dd9f      	ble.n	800a1a0 <__sflush_r+0x18>
 800a260:	4633      	mov	r3, r6
 800a262:	463a      	mov	r2, r7
 800a264:	4628      	mov	r0, r5
 800a266:	6a21      	ldr	r1, [r4, #32]
 800a268:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a26c:	47e0      	blx	ip
 800a26e:	2800      	cmp	r0, #0
 800a270:	dc06      	bgt.n	800a280 <__sflush_r+0xf8>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	e790      	b.n	800a1a2 <__sflush_r+0x1a>
 800a280:	4407      	add	r7, r0
 800a282:	1a36      	subs	r6, r6, r0
 800a284:	e7ea      	b.n	800a25c <__sflush_r+0xd4>
 800a286:	bf00      	nop
 800a288:	20400001 	.word	0x20400001

0800a28c <_fflush_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b913      	cbnz	r3, 800a29c <_fflush_r+0x10>
 800a296:	2500      	movs	r5, #0
 800a298:	4628      	mov	r0, r5
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	b118      	cbz	r0, 800a2a6 <_fflush_r+0x1a>
 800a29e:	6983      	ldr	r3, [r0, #24]
 800a2a0:	b90b      	cbnz	r3, 800a2a6 <_fflush_r+0x1a>
 800a2a2:	f000 f887 	bl	800a3b4 <__sinit>
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <_fflush_r+0x6c>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d11b      	bne.n	800a2e4 <_fflush_r+0x58>
 800a2ac:	686c      	ldr	r4, [r5, #4]
 800a2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ef      	beq.n	800a296 <_fflush_r+0xa>
 800a2b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b8:	07d0      	lsls	r0, r2, #31
 800a2ba:	d404      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2bc:	0599      	lsls	r1, r3, #22
 800a2be:	d402      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c2:	f000 f915 	bl	800a4f0 <__retarget_lock_acquire_recursive>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f7ff ff5d 	bl	800a188 <__sflush_r>
 800a2ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	07da      	lsls	r2, r3, #31
 800a2d4:	d4e0      	bmi.n	800a298 <_fflush_r+0xc>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	059b      	lsls	r3, r3, #22
 800a2da:	d4dd      	bmi.n	800a298 <_fflush_r+0xc>
 800a2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2de:	f000 f908 	bl	800a4f2 <__retarget_lock_release_recursive>
 800a2e2:	e7d9      	b.n	800a298 <_fflush_r+0xc>
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <_fflush_r+0x70>)
 800a2e6:	429c      	cmp	r4, r3
 800a2e8:	d101      	bne.n	800a2ee <_fflush_r+0x62>
 800a2ea:	68ac      	ldr	r4, [r5, #8]
 800a2ec:	e7df      	b.n	800a2ae <_fflush_r+0x22>
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <_fflush_r+0x74>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	bf08      	it	eq
 800a2f4:	68ec      	ldreq	r4, [r5, #12]
 800a2f6:	e7da      	b.n	800a2ae <_fflush_r+0x22>
 800a2f8:	0800acdc 	.word	0x0800acdc
 800a2fc:	0800acfc 	.word	0x0800acfc
 800a300:	0800acbc 	.word	0x0800acbc

0800a304 <std>:
 800a304:	2300      	movs	r3, #0
 800a306:	b510      	push	{r4, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	e9c0 3300 	strd	r3, r3, [r0]
 800a30e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a312:	6083      	str	r3, [r0, #8]
 800a314:	8181      	strh	r1, [r0, #12]
 800a316:	6643      	str	r3, [r0, #100]	; 0x64
 800a318:	81c2      	strh	r2, [r0, #14]
 800a31a:	6183      	str	r3, [r0, #24]
 800a31c:	4619      	mov	r1, r3
 800a31e:	2208      	movs	r2, #8
 800a320:	305c      	adds	r0, #92	; 0x5c
 800a322:	f7fb fe1b 	bl	8005f5c <memset>
 800a326:	4b05      	ldr	r3, [pc, #20]	; (800a33c <std+0x38>)
 800a328:	6224      	str	r4, [r4, #32]
 800a32a:	6263      	str	r3, [r4, #36]	; 0x24
 800a32c:	4b04      	ldr	r3, [pc, #16]	; (800a340 <std+0x3c>)
 800a32e:	62a3      	str	r3, [r4, #40]	; 0x28
 800a330:	4b04      	ldr	r3, [pc, #16]	; (800a344 <std+0x40>)
 800a332:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a334:	4b04      	ldr	r3, [pc, #16]	; (800a348 <std+0x44>)
 800a336:	6323      	str	r3, [r4, #48]	; 0x30
 800a338:	bd10      	pop	{r4, pc}
 800a33a:	bf00      	nop
 800a33c:	0800a659 	.word	0x0800a659
 800a340:	0800a67b 	.word	0x0800a67b
 800a344:	0800a6b3 	.word	0x0800a6b3
 800a348:	0800a6d7 	.word	0x0800a6d7

0800a34c <_cleanup_r>:
 800a34c:	4901      	ldr	r1, [pc, #4]	; (800a354 <_cleanup_r+0x8>)
 800a34e:	f000 b8af 	b.w	800a4b0 <_fwalk_reent>
 800a352:	bf00      	nop
 800a354:	0800a28d 	.word	0x0800a28d

0800a358 <__sfmoreglue>:
 800a358:	2268      	movs	r2, #104	; 0x68
 800a35a:	b570      	push	{r4, r5, r6, lr}
 800a35c:	1e4d      	subs	r5, r1, #1
 800a35e:	4355      	muls	r5, r2
 800a360:	460e      	mov	r6, r1
 800a362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a366:	f7ff fa63 	bl	8009830 <_malloc_r>
 800a36a:	4604      	mov	r4, r0
 800a36c:	b140      	cbz	r0, 800a380 <__sfmoreglue+0x28>
 800a36e:	2100      	movs	r1, #0
 800a370:	e9c0 1600 	strd	r1, r6, [r0]
 800a374:	300c      	adds	r0, #12
 800a376:	60a0      	str	r0, [r4, #8]
 800a378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a37c:	f7fb fdee 	bl	8005f5c <memset>
 800a380:	4620      	mov	r0, r4
 800a382:	bd70      	pop	{r4, r5, r6, pc}

0800a384 <__sfp_lock_acquire>:
 800a384:	4801      	ldr	r0, [pc, #4]	; (800a38c <__sfp_lock_acquire+0x8>)
 800a386:	f000 b8b3 	b.w	800a4f0 <__retarget_lock_acquire_recursive>
 800a38a:	bf00      	nop
 800a38c:	20001c21 	.word	0x20001c21

0800a390 <__sfp_lock_release>:
 800a390:	4801      	ldr	r0, [pc, #4]	; (800a398 <__sfp_lock_release+0x8>)
 800a392:	f000 b8ae 	b.w	800a4f2 <__retarget_lock_release_recursive>
 800a396:	bf00      	nop
 800a398:	20001c21 	.word	0x20001c21

0800a39c <__sinit_lock_acquire>:
 800a39c:	4801      	ldr	r0, [pc, #4]	; (800a3a4 <__sinit_lock_acquire+0x8>)
 800a39e:	f000 b8a7 	b.w	800a4f0 <__retarget_lock_acquire_recursive>
 800a3a2:	bf00      	nop
 800a3a4:	20001c22 	.word	0x20001c22

0800a3a8 <__sinit_lock_release>:
 800a3a8:	4801      	ldr	r0, [pc, #4]	; (800a3b0 <__sinit_lock_release+0x8>)
 800a3aa:	f000 b8a2 	b.w	800a4f2 <__retarget_lock_release_recursive>
 800a3ae:	bf00      	nop
 800a3b0:	20001c22 	.word	0x20001c22

0800a3b4 <__sinit>:
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	4604      	mov	r4, r0
 800a3b8:	f7ff fff0 	bl	800a39c <__sinit_lock_acquire>
 800a3bc:	69a3      	ldr	r3, [r4, #24]
 800a3be:	b11b      	cbz	r3, 800a3c8 <__sinit+0x14>
 800a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c4:	f7ff bff0 	b.w	800a3a8 <__sinit_lock_release>
 800a3c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a3cc:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ce:	4b13      	ldr	r3, [pc, #76]	; (800a41c <__sinit+0x68>)
 800a3d0:	4a13      	ldr	r2, [pc, #76]	; (800a420 <__sinit+0x6c>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3d6:	42a3      	cmp	r3, r4
 800a3d8:	bf08      	it	eq
 800a3da:	2301      	moveq	r3, #1
 800a3dc:	4620      	mov	r0, r4
 800a3de:	bf08      	it	eq
 800a3e0:	61a3      	streq	r3, [r4, #24]
 800a3e2:	f000 f81f 	bl	800a424 <__sfp>
 800a3e6:	6060      	str	r0, [r4, #4]
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 f81b 	bl	800a424 <__sfp>
 800a3ee:	60a0      	str	r0, [r4, #8]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	f000 f817 	bl	800a424 <__sfp>
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2104      	movs	r1, #4
 800a3fa:	60e0      	str	r0, [r4, #12]
 800a3fc:	6860      	ldr	r0, [r4, #4]
 800a3fe:	f7ff ff81 	bl	800a304 <std>
 800a402:	2201      	movs	r2, #1
 800a404:	2109      	movs	r1, #9
 800a406:	68a0      	ldr	r0, [r4, #8]
 800a408:	f7ff ff7c 	bl	800a304 <std>
 800a40c:	2202      	movs	r2, #2
 800a40e:	2112      	movs	r1, #18
 800a410:	68e0      	ldr	r0, [r4, #12]
 800a412:	f7ff ff77 	bl	800a304 <std>
 800a416:	2301      	movs	r3, #1
 800a418:	61a3      	str	r3, [r4, #24]
 800a41a:	e7d1      	b.n	800a3c0 <__sinit+0xc>
 800a41c:	0800a878 	.word	0x0800a878
 800a420:	0800a34d 	.word	0x0800a34d

0800a424 <__sfp>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	4607      	mov	r7, r0
 800a428:	f7ff ffac 	bl	800a384 <__sfp_lock_acquire>
 800a42c:	4b1e      	ldr	r3, [pc, #120]	; (800a4a8 <__sfp+0x84>)
 800a42e:	681e      	ldr	r6, [r3, #0]
 800a430:	69b3      	ldr	r3, [r6, #24]
 800a432:	b913      	cbnz	r3, 800a43a <__sfp+0x16>
 800a434:	4630      	mov	r0, r6
 800a436:	f7ff ffbd 	bl	800a3b4 <__sinit>
 800a43a:	3648      	adds	r6, #72	; 0x48
 800a43c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a440:	3b01      	subs	r3, #1
 800a442:	d503      	bpl.n	800a44c <__sfp+0x28>
 800a444:	6833      	ldr	r3, [r6, #0]
 800a446:	b30b      	cbz	r3, 800a48c <__sfp+0x68>
 800a448:	6836      	ldr	r6, [r6, #0]
 800a44a:	e7f7      	b.n	800a43c <__sfp+0x18>
 800a44c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a450:	b9d5      	cbnz	r5, 800a488 <__sfp+0x64>
 800a452:	4b16      	ldr	r3, [pc, #88]	; (800a4ac <__sfp+0x88>)
 800a454:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a458:	60e3      	str	r3, [r4, #12]
 800a45a:	6665      	str	r5, [r4, #100]	; 0x64
 800a45c:	f000 f847 	bl	800a4ee <__retarget_lock_init_recursive>
 800a460:	f7ff ff96 	bl	800a390 <__sfp_lock_release>
 800a464:	2208      	movs	r2, #8
 800a466:	4629      	mov	r1, r5
 800a468:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a46c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a470:	6025      	str	r5, [r4, #0]
 800a472:	61a5      	str	r5, [r4, #24]
 800a474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a478:	f7fb fd70 	bl	8005f5c <memset>
 800a47c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a484:	4620      	mov	r0, r4
 800a486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a488:	3468      	adds	r4, #104	; 0x68
 800a48a:	e7d9      	b.n	800a440 <__sfp+0x1c>
 800a48c:	2104      	movs	r1, #4
 800a48e:	4638      	mov	r0, r7
 800a490:	f7ff ff62 	bl	800a358 <__sfmoreglue>
 800a494:	4604      	mov	r4, r0
 800a496:	6030      	str	r0, [r6, #0]
 800a498:	2800      	cmp	r0, #0
 800a49a:	d1d5      	bne.n	800a448 <__sfp+0x24>
 800a49c:	f7ff ff78 	bl	800a390 <__sfp_lock_release>
 800a4a0:	230c      	movs	r3, #12
 800a4a2:	603b      	str	r3, [r7, #0]
 800a4a4:	e7ee      	b.n	800a484 <__sfp+0x60>
 800a4a6:	bf00      	nop
 800a4a8:	0800a878 	.word	0x0800a878
 800a4ac:	ffff0001 	.word	0xffff0001

0800a4b0 <_fwalk_reent>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4606      	mov	r6, r0
 800a4b6:	4688      	mov	r8, r1
 800a4b8:	2700      	movs	r7, #0
 800a4ba:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a4be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c2:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c6:	d505      	bpl.n	800a4d4 <_fwalk_reent+0x24>
 800a4c8:	6824      	ldr	r4, [r4, #0]
 800a4ca:	2c00      	cmp	r4, #0
 800a4cc:	d1f7      	bne.n	800a4be <_fwalk_reent+0xe>
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d4:	89ab      	ldrh	r3, [r5, #12]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d907      	bls.n	800a4ea <_fwalk_reent+0x3a>
 800a4da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	d003      	beq.n	800a4ea <_fwalk_reent+0x3a>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	47c0      	blx	r8
 800a4e8:	4307      	orrs	r7, r0
 800a4ea:	3568      	adds	r5, #104	; 0x68
 800a4ec:	e7e9      	b.n	800a4c2 <_fwalk_reent+0x12>

0800a4ee <__retarget_lock_init_recursive>:
 800a4ee:	4770      	bx	lr

0800a4f0 <__retarget_lock_acquire_recursive>:
 800a4f0:	4770      	bx	lr

0800a4f2 <__retarget_lock_release_recursive>:
 800a4f2:	4770      	bx	lr

0800a4f4 <__swhatbuf_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460e      	mov	r6, r1
 800a4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	2900      	cmp	r1, #0
 800a500:	461d      	mov	r5, r3
 800a502:	b096      	sub	sp, #88	; 0x58
 800a504:	da08      	bge.n	800a518 <__swhatbuf_r+0x24>
 800a506:	2200      	movs	r2, #0
 800a508:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a50c:	602a      	str	r2, [r5, #0]
 800a50e:	061a      	lsls	r2, r3, #24
 800a510:	d410      	bmi.n	800a534 <__swhatbuf_r+0x40>
 800a512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a516:	e00e      	b.n	800a536 <__swhatbuf_r+0x42>
 800a518:	466a      	mov	r2, sp
 800a51a:	f000 f903 	bl	800a724 <_fstat_r>
 800a51e:	2800      	cmp	r0, #0
 800a520:	dbf1      	blt.n	800a506 <__swhatbuf_r+0x12>
 800a522:	9a01      	ldr	r2, [sp, #4]
 800a524:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a528:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a52c:	425a      	negs	r2, r3
 800a52e:	415a      	adcs	r2, r3
 800a530:	602a      	str	r2, [r5, #0]
 800a532:	e7ee      	b.n	800a512 <__swhatbuf_r+0x1e>
 800a534:	2340      	movs	r3, #64	; 0x40
 800a536:	2000      	movs	r0, #0
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	b016      	add	sp, #88	; 0x58
 800a53c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a540 <__smakebuf_r>:
 800a540:	898b      	ldrh	r3, [r1, #12]
 800a542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a544:	079d      	lsls	r5, r3, #30
 800a546:	4606      	mov	r6, r0
 800a548:	460c      	mov	r4, r1
 800a54a:	d507      	bpl.n	800a55c <__smakebuf_r+0x1c>
 800a54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	6123      	str	r3, [r4, #16]
 800a554:	2301      	movs	r3, #1
 800a556:	6163      	str	r3, [r4, #20]
 800a558:	b002      	add	sp, #8
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	466a      	mov	r2, sp
 800a55e:	ab01      	add	r3, sp, #4
 800a560:	f7ff ffc8 	bl	800a4f4 <__swhatbuf_r>
 800a564:	9900      	ldr	r1, [sp, #0]
 800a566:	4605      	mov	r5, r0
 800a568:	4630      	mov	r0, r6
 800a56a:	f7ff f961 	bl	8009830 <_malloc_r>
 800a56e:	b948      	cbnz	r0, 800a584 <__smakebuf_r+0x44>
 800a570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d4ef      	bmi.n	800a558 <__smakebuf_r+0x18>
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	e7e3      	b.n	800a54c <__smakebuf_r+0xc>
 800a584:	4b0d      	ldr	r3, [pc, #52]	; (800a5bc <__smakebuf_r+0x7c>)
 800a586:	62b3      	str	r3, [r6, #40]	; 0x28
 800a588:	89a3      	ldrh	r3, [r4, #12]
 800a58a:	6020      	str	r0, [r4, #0]
 800a58c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a590:	81a3      	strh	r3, [r4, #12]
 800a592:	9b00      	ldr	r3, [sp, #0]
 800a594:	6120      	str	r0, [r4, #16]
 800a596:	6163      	str	r3, [r4, #20]
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	b15b      	cbz	r3, 800a5b4 <__smakebuf_r+0x74>
 800a59c:	4630      	mov	r0, r6
 800a59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a2:	f000 f8d1 	bl	800a748 <_isatty_r>
 800a5a6:	b128      	cbz	r0, 800a5b4 <__smakebuf_r+0x74>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f023 0303 	bic.w	r3, r3, #3
 800a5ae:	f043 0301 	orr.w	r3, r3, #1
 800a5b2:	81a3      	strh	r3, [r4, #12]
 800a5b4:	89a0      	ldrh	r0, [r4, #12]
 800a5b6:	4305      	orrs	r5, r0
 800a5b8:	81a5      	strh	r5, [r4, #12]
 800a5ba:	e7cd      	b.n	800a558 <__smakebuf_r+0x18>
 800a5bc:	0800a34d 	.word	0x0800a34d

0800a5c0 <_malloc_usable_size_r>:
 800a5c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5c4:	1f18      	subs	r0, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bfbc      	itt	lt
 800a5ca:	580b      	ldrlt	r3, [r1, r0]
 800a5cc:	18c0      	addlt	r0, r0, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_raise_r>:
 800a5d0:	291f      	cmp	r1, #31
 800a5d2:	b538      	push	{r3, r4, r5, lr}
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	460d      	mov	r5, r1
 800a5d8:	d904      	bls.n	800a5e4 <_raise_r+0x14>
 800a5da:	2316      	movs	r3, #22
 800a5dc:	6003      	str	r3, [r0, #0]
 800a5de:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e2:	bd38      	pop	{r3, r4, r5, pc}
 800a5e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a5e6:	b112      	cbz	r2, 800a5ee <_raise_r+0x1e>
 800a5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a5ec:	b94b      	cbnz	r3, 800a602 <_raise_r+0x32>
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f000 f830 	bl	800a654 <_getpid_r>
 800a5f4:	462a      	mov	r2, r5
 800a5f6:	4601      	mov	r1, r0
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5fe:	f000 b817 	b.w	800a630 <_kill_r>
 800a602:	2b01      	cmp	r3, #1
 800a604:	d00a      	beq.n	800a61c <_raise_r+0x4c>
 800a606:	1c59      	adds	r1, r3, #1
 800a608:	d103      	bne.n	800a612 <_raise_r+0x42>
 800a60a:	2316      	movs	r3, #22
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	2001      	movs	r0, #1
 800a610:	e7e7      	b.n	800a5e2 <_raise_r+0x12>
 800a612:	2400      	movs	r4, #0
 800a614:	4628      	mov	r0, r5
 800a616:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a61a:	4798      	blx	r3
 800a61c:	2000      	movs	r0, #0
 800a61e:	e7e0      	b.n	800a5e2 <_raise_r+0x12>

0800a620 <raise>:
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <raise+0xc>)
 800a622:	4601      	mov	r1, r0
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	f7ff bfd3 	b.w	800a5d0 <_raise_r>
 800a62a:	bf00      	nop
 800a62c:	20000010 	.word	0x20000010

0800a630 <_kill_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	2300      	movs	r3, #0
 800a634:	4d06      	ldr	r5, [pc, #24]	; (800a650 <_kill_r+0x20>)
 800a636:	4604      	mov	r4, r0
 800a638:	4608      	mov	r0, r1
 800a63a:	4611      	mov	r1, r2
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	f7f6 fddc 	bl	80011fa <_kill>
 800a642:	1c43      	adds	r3, r0, #1
 800a644:	d102      	bne.n	800a64c <_kill_r+0x1c>
 800a646:	682b      	ldr	r3, [r5, #0]
 800a648:	b103      	cbz	r3, 800a64c <_kill_r+0x1c>
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	bd38      	pop	{r3, r4, r5, pc}
 800a64e:	bf00      	nop
 800a650:	20001c1c 	.word	0x20001c1c

0800a654 <_getpid_r>:
 800a654:	f7f6 bdca 	b.w	80011ec <_getpid>

0800a658 <__sread>:
 800a658:	b510      	push	{r4, lr}
 800a65a:	460c      	mov	r4, r1
 800a65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a660:	f000 f894 	bl	800a78c <_read_r>
 800a664:	2800      	cmp	r0, #0
 800a666:	bfab      	itete	ge
 800a668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a66a:	89a3      	ldrhlt	r3, [r4, #12]
 800a66c:	181b      	addge	r3, r3, r0
 800a66e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a672:	bfac      	ite	ge
 800a674:	6563      	strge	r3, [r4, #84]	; 0x54
 800a676:	81a3      	strhlt	r3, [r4, #12]
 800a678:	bd10      	pop	{r4, pc}

0800a67a <__swrite>:
 800a67a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a67e:	461f      	mov	r7, r3
 800a680:	898b      	ldrh	r3, [r1, #12]
 800a682:	4605      	mov	r5, r0
 800a684:	05db      	lsls	r3, r3, #23
 800a686:	460c      	mov	r4, r1
 800a688:	4616      	mov	r6, r2
 800a68a:	d505      	bpl.n	800a698 <__swrite+0x1e>
 800a68c:	2302      	movs	r3, #2
 800a68e:	2200      	movs	r2, #0
 800a690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a694:	f000 f868 	bl	800a768 <_lseek_r>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	4632      	mov	r2, r6
 800a69c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6a0:	81a3      	strh	r3, [r4, #12]
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	463b      	mov	r3, r7
 800a6a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6ae:	f000 b817 	b.w	800a6e0 <_write_r>

0800a6b2 <__sseek>:
 800a6b2:	b510      	push	{r4, lr}
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ba:	f000 f855 	bl	800a768 <_lseek_r>
 800a6be:	1c43      	adds	r3, r0, #1
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	bf15      	itete	ne
 800a6c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ce:	81a3      	strheq	r3, [r4, #12]
 800a6d0:	bf18      	it	ne
 800a6d2:	81a3      	strhne	r3, [r4, #12]
 800a6d4:	bd10      	pop	{r4, pc}

0800a6d6 <__sclose>:
 800a6d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6da:	f000 b813 	b.w	800a704 <_close_r>
	...

0800a6e0 <_write_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	4608      	mov	r0, r1
 800a6e6:	4611      	mov	r1, r2
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4d05      	ldr	r5, [pc, #20]	; (800a700 <_write_r+0x20>)
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f7f6 fdba 	bl	8001268 <_write>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_write_r+0x1e>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_write_r+0x1e>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20001c1c 	.word	0x20001c1c

0800a704 <_close_r>:
 800a704:	b538      	push	{r3, r4, r5, lr}
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	; (800a720 <_close_r+0x1c>)
 800a70a:	4604      	mov	r4, r0
 800a70c:	4608      	mov	r0, r1
 800a70e:	602b      	str	r3, [r5, #0]
 800a710:	f7f6 fdc6 	bl	80012a0 <_close>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_close_r+0x1a>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_close_r+0x1a>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20001c1c 	.word	0x20001c1c

0800a724 <_fstat_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	2300      	movs	r3, #0
 800a728:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_fstat_r+0x20>)
 800a72a:	4604      	mov	r4, r0
 800a72c:	4608      	mov	r0, r1
 800a72e:	4611      	mov	r1, r2
 800a730:	602b      	str	r3, [r5, #0]
 800a732:	f7f6 fdc0 	bl	80012b6 <_fstat>
 800a736:	1c43      	adds	r3, r0, #1
 800a738:	d102      	bne.n	800a740 <_fstat_r+0x1c>
 800a73a:	682b      	ldr	r3, [r5, #0]
 800a73c:	b103      	cbz	r3, 800a740 <_fstat_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd38      	pop	{r3, r4, r5, pc}
 800a742:	bf00      	nop
 800a744:	20001c1c 	.word	0x20001c1c

0800a748 <_isatty_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	2300      	movs	r3, #0
 800a74c:	4d05      	ldr	r5, [pc, #20]	; (800a764 <_isatty_r+0x1c>)
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f6 fdbe 	bl	80012d4 <_isatty>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_isatty_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_isatty_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20001c1c 	.word	0x20001c1c

0800a768 <_lseek_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	2200      	movs	r2, #0
 800a772:	4d05      	ldr	r5, [pc, #20]	; (800a788 <_lseek_r+0x20>)
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f6 fdb6 	bl	80012e8 <_lseek>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_lseek_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_lseek_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20001c1c 	.word	0x20001c1c

0800a78c <_read_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4604      	mov	r4, r0
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	2200      	movs	r2, #0
 800a796:	4d05      	ldr	r5, [pc, #20]	; (800a7ac <_read_r+0x20>)
 800a798:	602a      	str	r2, [r5, #0]
 800a79a:	461a      	mov	r2, r3
 800a79c:	f7f6 fd47 	bl	800122e <_read>
 800a7a0:	1c43      	adds	r3, r0, #1
 800a7a2:	d102      	bne.n	800a7aa <_read_r+0x1e>
 800a7a4:	682b      	ldr	r3, [r5, #0]
 800a7a6:	b103      	cbz	r3, 800a7aa <_read_r+0x1e>
 800a7a8:	6023      	str	r3, [r4, #0]
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	20001c1c 	.word	0x20001c1c

0800a7b0 <_init>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	bf00      	nop
 800a7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7b6:	bc08      	pop	{r3}
 800a7b8:	469e      	mov	lr, r3
 800a7ba:	4770      	bx	lr

0800a7bc <_fini>:
 800a7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7be:	bf00      	nop
 800a7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7c2:	bc08      	pop	{r3}
 800a7c4:	469e      	mov	lr, r3
 800a7c6:	4770      	bx	lr
